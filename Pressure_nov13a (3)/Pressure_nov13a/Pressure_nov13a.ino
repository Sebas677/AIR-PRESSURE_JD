#include "arduino_secrets.h"
// ArduinoHttpClient - Version: Latest 

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/22d2b99e-47bd-468b-a63c-10ca2e20cf65 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int pressure_val;
  bool a_status;
  bool b_status;
  bool g_status;
  bool r_status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"

#include <mcp_can.h>
#include <SPI.h>

/* MCP2515 definitions */
#define WS_BUFFER_SIZE  13
#define TEST_PGN  0x18F00402

// CAN TX Variables
unsigned long txId = 0;
unsigned char txLen = 0;
unsigned char txBuf[8];
char msgString[128];
unsigned long prevTX = 0;                                        // Variable to store last execution time
const unsigned int invlTX = 1000;                                // One second interval constant


//byte data[] = {0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};  // Generic CAN data to send
// CAN RX Variables
unsigned long rxId;
unsigned char len;
unsigned char rxBuf[8];
unsigned char rxMsgBuffer[13];
// CAN0 INT and CS

#define CAN0_INT  D2                            // Set INT to pin 2 on ESP8266
MCP_CAN CAN0(D8);                               // Set CS to pin 15 on ESP8266


//Arena:7-13 psi
//Barro:18-19 psi
//Grava:20-23 psi
//Roca:14-17 psi
//char presure_val[2];                                 //Inser the hex value in between the given ranges




void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

    /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  /* Initialize MCP CAN */
  // Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s and the masks and filters disabled.
  if(CAN0.begin(MCP_ANY, CAN_250KBPS, MCP_8MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");
  
  // Since we do not set NORMAL mode, we are in loopback mode by default.
  CAN0.setMode(MCP_NORMAL);

  pinMode(CAN0_INT, INPUT);                           // Configuring pin for /INT input
  
  Serial.println("MCP2515 Loopback ...");
}


void loop() {
  ArduinoCloud.update();
  Serial.print("-_-_-_-_-_-_-_-_-_");
  onAStatusChange();
  onBStatusChange();
  onGStatusChange();
  onRStatusChange();
  Serial.println(pressure_val);


  int hex_core=pressure_val+22;
  byte data[] = {0xA2, 0x22, 0x33, 0xC5, 0xAA, hex_core, 0xCC, 0xDD}; 
  Serial.print("PSI:");
  Serial.println(pressure_val);
  delay(2000);
  Serial.println();
  
  //0  dec= 16 hex
  //1  dec= 17 hex,  2=18,  3=19,  4=1A
  //5  dec= 1B hex,  6=1C,  7=1D,  8=1E,  9=1F
  //10 dec= 20 hex, 11=21, 12=22, 13=23, 14=24
  //15 dec= 25 hex, 16=26, 17=27, 18=28, 19=29
  //20 dec= 2A hex, 21=2B, 22=2C, 23=2D, 24= 2E
  //25 dec= 2F hex
  
  
  
  
 
  
  if(millis() - prevTX >= invlTX){                    // Send this at a one second interval. 
    prevTX = millis();
    byte sndStat = CAN0.sendMsgBuf(TEST_PGN,1, 8, data);
    
    if(sndStat == CAN_OK)
      Serial.println("CAN Message Sent Successfully!");
    else
      Serial.println("Error Sending CAN Message...");

  }
  
  
  if(!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
  {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);      // Read data: len = data length, buf = data byte(s)
    
    if((rxId & 0x80000000) == 0x80000000)     // Determine if ID is standard (11 bits) or extended (29 bits)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (rxId & 0x1FFFFFFF), len);
    else
      sprintf(msgString, "Standard ID: 0x%.3lX       DLC: %1d  Data:", rxId, len);
  
    Serial.print(msgString);
    Serial.println();
    
    if((rxId & 0x40000000) == 0x40000000){    // Determine if message is a remote request frame.
      sprintf(msgString, " REMOTE REQUEST FRAME");
      Serial.print(msgString);
    } else {
      for(byte i = 0; i<len; i++){
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
      }
    }
    Serial.println();
    Serial.print("<><><><><><><><>");
    Serial.println();
    Serial.print("Dec value from STM32:");
    Serial.print(rxBuf[5]-22);
    
    if ((rxBuf[5]-22)>25){
      Serial.print("Received value NOT in range");
      Serial.println();
      
    }
    
    else{
      pressure_val=rxBuf[5]-22;
    }
    
  
        
    Serial.println();
  }
}

/*
  Since AStatus is READ_WRITE variable, onAStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAStatusChange(){
  // Add your code here to act upon AStatus change
    if (pressure_val>=7 && pressure_val <=13){
    a_status=true;
    Serial.print("ARENA: ");
   
  }
  else{
    a_status=false;
  }

}

void onPressureValChange(){
  
}

/*
  Since BStatus is READ_WRITE variable, onBStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBStatusChange()  {
  // Add your code here to act upon BStatus change
    if (pressure_val>=18 && pressure_val <=19){
    b_status=true;
    Serial.print("BARRO: ");
    
  }
  else{
    b_status=false;
  }
}



/*
  Since GStatus is READ_WRITE variable, onGStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onGStatusChange()  {
  // Add your code here to act upon GStatus change
  if (pressure_val>=20 && pressure_val <=23){
    g_status=true;
    Serial.print("GRAVA: ");
   
  }
  else{
    g_status=false;
  }
}

/*
  Since RStatus is READ_WRITE variable, onRStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRStatusChange()  {
  // Add your code here to act upon RStatus change
    if (pressure_val>=14 && pressure_val <=17){
    r_status=true;
    Serial.print("ROCAS: ");
    
  }
  else{
    r_status=false;
  }
}


