
stm32h7CAN_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800bfc0  0800bfc0  0001bfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4b4  0800c4b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4bc  0800c4bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4bc  0800c4bc  0001c4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4c0  0800c4c0  0001c4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800c4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  240001e0  0800c6a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000468  0800c6a4  00020468  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c730  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af4  00000000  00000000  0003c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0003f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00040b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dce0  00000000  00000000  000420e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4e0  00000000  00000000  0007fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a3ac7  00000000  00000000  0009a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023dd67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007274  00000000  00000000  0023ddb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bfa4 	.word	0x0800bfa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800bfa4 	.word	0x0800bfa4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_write>:
static void MX_FDCAN1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_ADC3_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
int _write( int file, char *ptr, int len ){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e00b      	b.n	80007ea <_write+0x2a>
		HAL_UART_Transmit(&huart3, ( uint8_t *)ptr++, 1, HAL_UART_TIMEOUT_VALUE);
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	1c4b      	adds	r3, r1, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80007dc:	2201      	movs	r2, #1
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <_write+0x3c>)
 80007e0:	f007 fe6e 	bl	80084c0 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++){
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbef      	blt.n	80007d2 <_write+0x12>
	}
	return len;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2400034c 	.word	0x2400034c

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09a      	sub	sp, #104	; 0x68
 8000804:	af00      	add	r7, sp, #0
int main(void)
 8000806:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800080c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000810:	667b      	str	r3, [r7, #100]	; 0x64
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000812:	bf00      	nop
 8000814:	4ba4      	ldr	r3, [pc, #656]	; (8000aa8 <main+0x2a8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d004      	beq.n	800082a <main+0x2a>
 8000820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	667a      	str	r2, [r7, #100]	; 0x64
 8000826:	2b00      	cmp	r3, #0
 8000828:	dcf4      	bgt.n	8000814 <main+0x14>
  if ( timeout < 0 )
 800082a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800082c:	2b00      	cmp	r3, #0
 800082e:	da01      	bge.n	8000834 <main+0x34>
  {
  Error_Handler();
 8000830:	f000 fc76 	bl	8001120 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 ff12 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f9b4 	bl	8000ba4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083c:	4b9a      	ldr	r3, [pc, #616]	; (8000aa8 <main+0x2a8>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000842:	4a99      	ldr	r2, [pc, #612]	; (8000aa8 <main+0x2a8>)
 8000844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084c:	4b96      	ldr	r3, [pc, #600]	; (8000aa8 <main+0x2a8>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085a:	2000      	movs	r0, #0
 800085c:	f003 fb7e 	bl	8003f5c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000860:	2100      	movs	r1, #0
 8000862:	2000      	movs	r0, #0
 8000864:	f003 fb94 	bl	8003f90 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800086e:	bf00      	nop
 8000870:	4b8d      	ldr	r3, [pc, #564]	; (8000aa8 <main+0x2a8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <main+0x86>
 800087c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	667a      	str	r2, [r7, #100]	; 0x64
 8000882:	2b00      	cmp	r3, #0
 8000884:	dcf4      	bgt.n	8000870 <main+0x70>
if ( timeout < 0 )
 8000886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000888:	2b00      	cmp	r3, #0
 800088a:	da01      	bge.n	8000890 <main+0x90>
{
Error_Handler();
 800088c:	f000 fc48 	bl	8001120 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 fbd4 	bl	800103c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000894:	f000 fa6a 	bl	8000d6c <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000898:	f000 fb84 	bl	8000fa4 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 800089c:	f000 fa06 	bl	8000cac <MX_ADC3_Init>
  MX_TIM2_Init();
 80008a0:	f000 fb0a 	bl	8000eb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //___________________________SENSOR AND PWM VARIABLES::::
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	4881      	ldr	r0, [pc, #516]	; (8000aac <main+0x2ac>)
 80008a8:	f006 fdde 	bl	8007468 <HAL_TIM_PWM_Start>
  uint16_t AD_RES=0; //SE INICIALIZA
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  uint16_t transPSI = 150; //FIJO AL VALOR DEL SENSOR
 80008b2:	2396      	movs	r3, #150	; 0x96
 80008b4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t maxPress = 16384; //2^14
 80008b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  uint16_t zeroPress = 1850; //VALOR MODIFICABLE
 80008c0:	f240 733a 	movw	r3, #1850	; 0x73a
 80008c4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  float pressure;
  //Global variables
  float e=0.0,e_1=0.0,u=0.0,u_1=0.0;
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
 80008ce:	f04f 0300 	mov.w	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  while(1){

		//______________________-CANNNN RX_____________________________-


		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80008e0:	4b73      	ldr	r3, [pc, #460]	; (8000ab0 <main+0x2b0>)
 80008e2:	4a74      	ldr	r2, [pc, #464]	; (8000ab4 <main+0x2b4>)
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4874      	ldr	r0, [pc, #464]	; (8000ab8 <main+0x2b8>)
 80008e8:	f002 fd82 	bl	80033f0 <HAL_FDCAN_GetRxMessage>
		HAL_Delay(10);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 ff47 	bl	8001780 <HAL_Delay>
		printf("\n\rCAN ID: %lx \n\r", RxHeader.Identifier);
 80008f2:	4b70      	ldr	r3, [pc, #448]	; (8000ab4 <main+0x2b4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4870      	ldr	r0, [pc, #448]	; (8000abc <main+0x2bc>)
 80008fa:	f009 fb1b 	bl	8009f34 <iprintf>

		int dataSize = RxHeader.DataLength >>  16;
 80008fe:	4b6d      	ldr	r3, [pc, #436]	; (8000ab4 <main+0x2b4>)
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	0c1b      	lsrs	r3, r3, #16
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < dataSize; i ++)
 8000906:	2300      	movs	r3, #0
 8000908:	663b      	str	r3, [r7, #96]	; 0x60
 800090a:	e00a      	b.n	8000922 <main+0x122>
		{
			printf(" %x", RxData[i]);
 800090c:	4a68      	ldr	r2, [pc, #416]	; (8000ab0 <main+0x2b0>)
 800090e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	486a      	ldr	r0, [pc, #424]	; (8000ac0 <main+0x2c0>)
 8000918:	f009 fb0c 	bl	8009f34 <iprintf>
		for (int i = 0; i < dataSize; i ++)
 800091c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800091e:	3301      	adds	r3, #1
 8000920:	663b      	str	r3, [r7, #96]	; 0x60
 8000922:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000926:	429a      	cmp	r2, r3
 8000928:	dbf0      	blt.n	800090c <main+0x10c>

		}
		printf(" \n\r");
 800092a:	4866      	ldr	r0, [pc, #408]	; (8000ac4 <main+0x2c4>)
 800092c:	f009 fb02 	bl	8009f34 <iprintf>

		//printf("CAN HEX SETPOINT: %x \n\r", RxData[5]);
		CAN_SET=RxData[5]-22;
 8000930:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <main+0x2b0>)
 8000932:	795b      	ldrb	r3, [r3, #5]
 8000934:	3b16      	subs	r3, #22
 8000936:	b2db      	uxtb	r3, r3
 8000938:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38



	//__________________________SENSOR::::

	  printf("_-_-_-_-_-_-_-_-_-_-_-_ \n\r");
 800093c:	4862      	ldr	r0, [pc, #392]	; (8000ac8 <main+0x2c8>)
 800093e:	f009 faf9 	bl	8009f34 <iprintf>
	  HAL_ADC_Start(&hadc3);
 8000942:	4862      	ldr	r0, [pc, #392]	; (8000acc <main+0x2cc>)
 8000944:	f001 fae6 	bl	8001f14 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 1); //1ms
 8000948:	2101      	movs	r1, #1
 800094a:	4860      	ldr	r0, [pc, #384]	; (8000acc <main+0x2cc>)
 800094c:	f001 fbac 	bl	80020a8 <HAL_ADC_PollForConversion>
	  AD_RES= HAL_ADC_GetValue(&hadc3);
 8000950:	485e      	ldr	r0, [pc, #376]	; (8000acc <main+0x2cc>)
 8000952:	f001 fc9d 	bl	8002290 <HAL_ADC_GetValue>
 8000956:	4603      	mov	r3, r0
 8000958:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  //printf ("PRESSURE RAW: %d \n\r", AD_RES);

	  pressure= ((AD_RES-zeroPress)*transPSI)/(maxPress-zeroPress);
 800095c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8000960:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800096a:	fb03 f202 	mul.w	r2, r3, r2
 800096e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000972:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000976:	1acb      	subs	r3, r1, r3
 8000978:	fb92 f3f3 	sdiv	r3, r2, r3
 800097c:	ee07 3a90 	vmov	s15, r3
 8000980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000984:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	  //__________________________SENSOR::::


	  //__________________________CAN_TX::::

	  printf ("PRESSURE: %f \n\r", pressure);
 8000988:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800098c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000990:	ec53 2b17 	vmov	r2, r3, d7
 8000994:	484e      	ldr	r0, [pc, #312]	; (8000ad0 <main+0x2d0>)
 8000996:	f009 facd 	bl	8009f34 <iprintf>
	  HAL_Delay(1000);
 800099a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099e:	f000 feef 	bl	8001780 <HAL_Delay>
	  float W=PID_Discrete(pressure);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	469c      	mov	ip, r3
 80009a8:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80009ac:	f000 f89c 	bl	8000ae8 <PID_Discrete.0>
 80009b0:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	  uint8_t send=pressure+22;
 80009b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80009b8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80009bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80009c8:	793b      	ldrb	r3, [r7, #4]
 80009ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	  uint8_t TxData[8] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, send, 0x12, 0x34};
 80009ce:	23aa      	movs	r3, #170	; 0xaa
 80009d0:	723b      	strb	r3, [r7, #8]
 80009d2:	23bb      	movs	r3, #187	; 0xbb
 80009d4:	727b      	strb	r3, [r7, #9]
 80009d6:	23cc      	movs	r3, #204	; 0xcc
 80009d8:	72bb      	strb	r3, [r7, #10]
 80009da:	23dd      	movs	r3, #221	; 0xdd
 80009dc:	72fb      	strb	r3, [r7, #11]
 80009de:	23ee      	movs	r3, #238	; 0xee
 80009e0:	733b      	strb	r3, [r7, #12]
 80009e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009e6:	737b      	strb	r3, [r7, #13]
 80009e8:	2312      	movs	r3, #18
 80009ea:	73bb      	strb	r3, [r7, #14]
 80009ec:	2334      	movs	r3, #52	; 0x34
 80009ee:	73fb      	strb	r3, [r7, #15]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	461a      	mov	r2, r3
 80009f6:	4937      	ldr	r1, [pc, #220]	; (8000ad4 <main+0x2d4>)
 80009f8:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <main+0x2b8>)
 80009fa:	f002 fc9e 	bl	800333a <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_Delay(100);
 80009fe:	2064      	movs	r0, #100	; 0x64
 8000a00:	f000 febe 	bl	8001780 <HAL_Delay>


	  //__________________________PWM BEHAVIOR::::

	  //printf ("W: %f \n\r", W);
	  float PWM= W*655.35;
 8000a04:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000a08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a0c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000aa0 <main+0x2a0>
 8000a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a18:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	  int32_t PWF=(int32_t)PWM;
 8000a1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a24:	ee17 3a90 	vmov	r3, s15
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
	  printf ("PWF: %ld \n\r", PWF);
 8000a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000a2c:	482a      	ldr	r0, [pc, #168]	; (8000ad8 <main+0x2d8>)
 8000a2e:	f009 fa81 	bl	8009f34 <iprintf>


	  TIM2->CCR1 = PWF;
 8000a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a38:	6353      	str	r3, [r2, #52]	; 0x34
	  HAL_Delay(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fea0 	bl	8001780 <HAL_Delay>



	  //__________________________SOLENOID RELEASE CONDITIONS::::

	  if(R+.5<pressure){
 8000a40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a48:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000a4c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000a50:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000a54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a60:	d510      	bpl.n	8000a84 <main+0x284>
		  HAL_GPIO_WritePin(GPIOA, RELEMAX_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	481d      	ldr	r0, [pc, #116]	; (8000adc <main+0x2dc>)
 8000a68:	f003 fa5e 	bl	8003f28 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000a6c:	2064      	movs	r0, #100	; 0x64
 8000a6e:	f000 fe87 	bl	8001780 <HAL_Delay>
		  printf("RELEASE-YES");
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <main+0x2e0>)
 8000a74:	f009 fa5e 	bl	8009f34 <iprintf>
		  HAL_GPIO_WritePin(GPIOA, RELEMAX_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <main+0x2dc>)
 8000a7e:	f003 fa53 	bl	8003f28 <HAL_GPIO_WritePin>
 8000a82:	e72d      	b.n	80008e0 <main+0xe0>
	  }

	  else{
		  HAL_GPIO_WritePin(GPIOA, RELEMAX_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2120      	movs	r1, #32
 8000a88:	4814      	ldr	r0, [pc, #80]	; (8000adc <main+0x2dc>)
 8000a8a:	f003 fa4d 	bl	8003f28 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 fe76 	bl	8001780 <HAL_Delay>
		  printf("RELEASE-NO");
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <main+0x2e4>)
 8000a96:	f009 fa4d 	bl	8009f34 <iprintf>
  while(1){
 8000a9a:	e721      	b.n	80008e0 <main+0xe0>
 8000a9c:	f3af 8000 	nop.w
 8000aa0:	cccccccd 	.word	0xcccccccd
 8000aa4:	40847acc 	.word	0x40847acc
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	24000300 	.word	0x24000300
 8000ab0:	24000448 	.word	0x24000448
 8000ab4:	24000420 	.word	0x24000420
 8000ab8:	24000260 	.word	0x24000260
 8000abc:	0800bfc0 	.word	0x0800bfc0
 8000ac0:	0800bfd4 	.word	0x0800bfd4
 8000ac4:	0800bfd8 	.word	0x0800bfd8
 8000ac8:	0800bfdc 	.word	0x0800bfdc
 8000acc:	240001fc 	.word	0x240001fc
 8000ad0:	0800bff8 	.word	0x0800bff8
 8000ad4:	240003fc 	.word	0x240003fc
 8000ad8:	0800c008 	.word	0x0800c008
 8000adc:	58020000 	.word	0x58020000
 8000ae0:	0800c014 	.word	0x0800c014
 8000ae4:	0800c020 	.word	0x0800c020

08000ae8 <PID_Discrete.0>:
  float PID_Discrete( float yM ){
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8000af2:	4664      	mov	r4, ip
 8000af4:	f8c7 c000 	str.w	ip, [r7]
	  R=CAN_SET;
 8000af8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b04:	edc4 7a04 	vstr	s15, [r4, #16]
	  printf("CAN DEC SETPOINT:%f  \n\r",R);
 8000b08:	edd4 7a04 	vldr	s15, [r4, #16]
 8000b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b10:	ec53 2b17 	vmov	r2, r3, d7
 8000b14:	481f      	ldr	r0, [pc, #124]	; (8000b94 <PID_Discrete.0+0xac>)
 8000b16:	f009 fa0d 	bl	8009f34 <iprintf>
      e = R - yM;//				calculate the error
 8000b1a:	ed94 7a04 	vldr	s14, [r4, #16]
 8000b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b26:	edc4 7a03 	vstr	s15, [r4, #12]
      u = u_1 + q0*e + q1*e_1;//	discrete PID controller
 8000b2a:	ed94 7a06 	vldr	s14, [r4, #24]
 8000b2e:	edd4 7a03 	vldr	s15, [r4, #12]
 8000b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b36:	ed94 7a02 	vldr	s14, [r4, #8]
 8000b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b3e:	edd4 6a05 	vldr	s13, [r4, #20]
 8000b42:	edd4 7a01 	vldr	s15, [r4, #4]
 8000b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4e:	edc4 7a00 	vstr	s15, [r4]
      if(u >= 100)// 			maximum pressure value
 8000b52:	edd4 7a00 	vldr	s15, [r4]
 8000b56:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000b98 <PID_Discrete.0+0xb0>
 8000b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b62:	db01      	blt.n	8000b68 <PID_Discrete.0+0x80>
          u = 90;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <PID_Discrete.0+0xb4>)
 8000b66:	6023      	str	r3, [r4, #0]
      if(u <= 0)//			minimum pressure value
 8000b68:	edd4 7a00 	vldr	s15, [r4]
 8000b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	d801      	bhi.n	8000b7a <PID_Discrete.0+0x92>
          u = 30;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <PID_Discrete.0+0xb8>)
 8000b78:	6023      	str	r3, [r4, #0]
      e_1 = e;
 8000b7a:	68e3      	ldr	r3, [r4, #12]
 8000b7c:	6063      	str	r3, [r4, #4]
      u_1 = u;
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	60a3      	str	r3, [r4, #8]
      return u;
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	ee07 3a90 	vmov	s15, r3
  }
 8000b88:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	0800c02c 	.word	0x0800c02c
 8000b98:	42c80000 	.word	0x42c80000
 8000b9c:	42b40000 	.word	0x42b40000
 8000ba0:	41f00000 	.word	0x41f00000

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09c      	sub	sp, #112	; 0x70
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	224c      	movs	r2, #76	; 0x4c
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f008 fd72 	bl	800969c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2220      	movs	r2, #32
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fd6c 	bl	800969c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f003 f9f7 	bl	8003fb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <SystemClock_Config+0xfc>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <SystemClock_Config+0xfc>)
 8000bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <SystemClock_Config+0xfc>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemClock_Config+0x100>)
 8000be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be8:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <SystemClock_Config+0x100>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <SystemClock_Config+0x100>)
 8000bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bfc:	bf00      	nop
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemClock_Config+0xfc>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0a:	d1f8      	bne.n	8000bfe <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SystemClock_Config+0x104>)
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	f023 0303 	bic.w	r3, r3, #3
 8000c14:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <SystemClock_Config+0x104>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000c32:	23f0      	movs	r3, #240	; 0xf0
 8000c34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000c3a:	2318      	movs	r3, #24
 8000c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fa0a 	bl	800406c <HAL_RCC_OscConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c5e:	f000 fa5f 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c62:	233f      	movs	r3, #63	; 0x3f
 8000c64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c66:	2303      	movs	r3, #3
 8000c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c72:	2340      	movs	r3, #64	; 0x40
 8000c74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2104      	movs	r1, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fe1d 	bl	80048c8 <HAL_RCC_ClockConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000c94:	f000 fa44 	bl	8001120 <Error_Handler>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3770      	adds	r7, #112	; 0x70
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	58024800 	.word	0x58024800
 8000ca4:	58000400 	.word	0x58000400
 8000ca8:	58024400 	.word	0x58024400

08000cac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <MX_ADC3_Init+0xbc>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_14B;
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d1a:	4812      	ldr	r0, [pc, #72]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000d1c:	f000 ff58 	bl	8001bd0 <HAL_ADC_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000d26:	f000 f9fb 	bl	8001120 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d36:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_ADC3_Init+0xb8>)
 8000d4e:	f001 faad 	bl	80022ac <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000d58:	f000 f9e2 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	240001fc 	.word	0x240001fc
 8000d68:	58026000 	.word	0x58026000

08000d6c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d70:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d72:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <MX_FDCAN1_Init+0x13c>)
 8000d74:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d76:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d7c:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d82:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d88:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d94:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000da2:	223f      	movs	r2, #63	; 0x3f
 8000da4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000da8:	2210      	movs	r2, #16
 8000daa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000db8:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000de2:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000df4:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e18:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e1a:	f002 f80f 	bl	8002e3c <HAL_FDCAN_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e24:	f000 f97c 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  /* Configure Rx filter */
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <MX_FDCAN1_Init+0x140>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIndex = 0;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_FDCAN1_Init+0x140>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_FDCAN1_Init+0x140>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_FDCAN1_Init+0x140>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	60da      	str	r2, [r3, #12]


     /* Configure global filter to reject all non-matching frames */
     //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000e40:	491a      	ldr	r1, [pc, #104]	; (8000eac <MX_FDCAN1_Init+0x140>)
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e44:	f002 f9d8 	bl	80031f8 <HAL_FDCAN_ConfigFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_FDCAN1_Init+0xe6>
    {
  	  /* Filter configuration Error */
        Error_Handler();
 8000e4e:	f000 f967 	bl	8001120 <Error_Handler>
    }
    /* Start the FDCAN module */
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e54:	f002 fa46 	bl	80032e4 <HAL_FDCAN_Start>
    {
  	  /* Start Error */
    }


    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <MX_FDCAN1_Init+0x138>)
 8000e5e:	f002 fc35 	bl	80036cc <HAL_FDCAN_ActivateNotification>
    {
  	  /* Notification Error */
    }

    /* Configure Tx buffer message */
    TxHeader.Identifier = 0x18F00401;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <MX_FDCAN1_Init+0x148>)
 8000e66:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_EXTENDED_ID;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6e:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e7c:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e8a:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e92:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0x00;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <MX_FDCAN1_Init+0x144>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]


  /* USER CODE END FDCAN1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24000260 	.word	0x24000260
 8000ea8:	4000a000 	.word	0x4000a000
 8000eac:	240003dc 	.word	0x240003dc
 8000eb0:	240003fc 	.word	0x240003fc
 8000eb4:	18f00401 	.word	0x18f00401

08000eb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000eec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ef0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f14:	f006 f9f0 	bl	80072f8 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f1e:	f000 f8ff 	bl	8001120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f30:	f006 fcbc 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f3a:	f000 f8f1 	bl	8001120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f40:	f006 fa31 	bl	80073a6 <HAL_TIM_PWM_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f4a:	f000 f8e9 	bl	8001120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f5e:	f007 f9d1 	bl	8008304 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f68:	f000 f8da 	bl	8001120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f84:	f006 fb7e 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f8e:	f000 f8c7 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM2_Init+0xe8>)
 8000f94:	f000 f9c6 	bl	8001324 <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3738      	adds	r7, #56	; 0x38
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000300 	.word	0x24000300

08000fa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <MX_USART3_UART_Init+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fec:	4811      	ldr	r0, [pc, #68]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8000fee:	f007 fa17 	bl	8008420 <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f000 f892 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8001000:	f008 fa4a 	bl	8009498 <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800100a:	f000 f889 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8001012:	f008 fa7f 	bl	8009514 <HAL_UARTEx_SetRxFifoThreshold>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800101c:	f000 f880 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_USART3_UART_Init+0x90>)
 8001022:	f008 fa00 	bl	8009426 <HAL_UARTEx_DisableFifoMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f878 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2400034c 	.word	0x2400034c
 8001038:	40004800 	.word	0x40004800

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <MX_GPIO_Init+0xd8>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001062:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	4a27      	ldr	r2, [pc, #156]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <MX_GPIO_Init+0xd8>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_GPIO_Init+0xd8>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_GPIO_Init+0xd8>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <MX_GPIO_Init+0xd8>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_GPIO_Init+0xd8>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELEMAX_GPIO_Port, RELEMAX_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <MX_GPIO_Init+0xdc>)
 80010d0:	f002 ff2a 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_GPIO_Init+0xe0>)
 80010ea:	f002 fd6d 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELEMAX_Pin */
  GPIO_InitStruct.Pin = RELEMAX_Pin;
 80010ee:	2320      	movs	r3, #32
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELEMAX_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_GPIO_Init+0xdc>)
 8001106:	f002 fd5f 	bl	8003bc8 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	58024400 	.word	0x58024400
 8001118:	58020000 	.word	0x58020000
 800111c:	58020800 	.word	0x58020800

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	e7fe      	b.n	8001128 <Error_Handler+0x8>
	...

0800112c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_MspInit+0x30>)
 8001134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x30>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x30>)
 8001144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	58024400 	.word	0x58024400

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0b4      	sub	sp, #208	; 0xd0
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	22bc      	movs	r2, #188	; 0xbc
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fa93 	bl	800969c <memset>
  if(hadc->Instance==ADC3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_ADC_MspInit+0xb0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d143      	bne.n	8001208 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001180:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001184:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 800118a:	2313      	movs	r3, #19
 800118c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001196:	2302      	movs	r3, #2
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800119e:	2320      	movs	r3, #32
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 ff15 	bl	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80011bc:	f7ff ffb0 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_ADC_MspInit+0xb4>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_ADC_MspInit+0xb4>)
 80011c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_ADC_MspInit+0xb4>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_ADC_MspInit+0xb4>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_ADC_MspInit+0xb4>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_ADC_MspInit+0xb4>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80011fc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001200:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001204:	f000 faec 	bl	80017e0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	37d0      	adds	r7, #208	; 0xd0
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58026000 	.word	0x58026000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b0b8      	sub	sp, #224	; 0xe0
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	22bc      	movs	r2, #188	; 0xbc
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 fa2f 	bl	800969c <memset>
  if(hfdcan->Instance==FDCAN1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_FDCAN_MspInit+0xc0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d142      	bne.n	80012ce <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800124c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800124e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001252:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fec1 	bl	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001264:	f7ff ff5c 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_FDCAN_MspInit+0xc4>)
 800126a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_FDCAN_MspInit+0xc4>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_FDCAN_MspInit+0xc4>)
 800127a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_FDCAN_MspInit+0xc4>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <HAL_FDCAN_MspInit+0xc4>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_FDCAN_MspInit+0xc4>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012a4:	2303      	movs	r3, #3
 80012a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012bc:	2309      	movs	r3, #9
 80012be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <HAL_FDCAN_MspInit+0xc8>)
 80012ca:	f002 fc7d 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	37e0      	adds	r7, #224	; 0xe0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	4000a000 	.word	0x4000a000
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58020c00 	.word	0x58020c00

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d10e      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_TIM_Base_MspInit+0x3c>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_TIM_Base_MspInit+0x3c>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_TIM_Base_MspInit+0x3c>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001344:	d11e      	bne.n	8001384 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_TIM_MspPostInit+0x68>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_TIM_MspPostInit+0x68>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_TIM_MspPostInit+0x68>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001364:	2301      	movs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4619      	mov	r1, r3
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <HAL_TIM_MspPostInit+0x6c>)
 8001380:	f002 fc22 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	58024400 	.word	0x58024400
 8001390:	58020000 	.word	0x58020000

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0b8      	sub	sp, #224	; 0xe0
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	22bc      	movs	r2, #188	; 0xbc
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f008 f971 	bl	800969c <memset>
  if(huart->Instance==USART3)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_UART_MspInit+0xc0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d142      	bne.n	800144a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fe04 	bl	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013de:	f7ff fe9f 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_UART_MspInit+0xc4>)
 80013e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <HAL_UART_MspInit+0xc4>)
 80013ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_UART_MspInit+0xc4>)
 80013f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_UART_MspInit+0xc4>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_UART_MspInit+0xc4>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0xc4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <HAL_UART_MspInit+0xc8>)
 8001446:	f002 fbbf 	bl	8003bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	37e0      	adds	r7, #224	; 0xe0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40004800 	.word	0x40004800
 8001458:	58024400 	.word	0x58024400
 800145c:	58020c00 	.word	0x58020c00

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 f948 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	return 1;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_kill>:

int _kill(int pid, int sig)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ce:	f008 f8ad 	bl	800962c <__errno>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2216      	movs	r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
	return -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_exit>:

void _exit (int status)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffe7 	bl	80014c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014f6:	e7fe      	b.n	80014f6 <_exit+0x12>

080014f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
	}

return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	605a      	str	r2, [r3, #4]
	return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f008 f82e 	bl	800962c <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	24080000 	.word	0x24080000
 80015fc:	00000400 	.word	0x00000400
 8001600:	24000450 	.word	0x24000450
 8001604:	24000468 	.word	0x24000468

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800160c:	f7ff f842 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f007 ffff 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff f8e1 	bl	8000800 <main>
  bx  lr
 800163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001644:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001648:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800164c:	0800c4c4 	.word	0x0800c4c4
  ldr r2, =_sbss
 8001650:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001654:	24000468 	.word	0x24000468

08001658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC3_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001662:	2003      	movs	r0, #3
 8001664:	f001 fbb8 	bl	8002dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001668:	f003 fae4 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 800166c:	4602      	mov	r2, r0
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_Init+0x68>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	4913      	ldr	r1, [pc, #76]	; (80016c8 <HAL_Init+0x6c>)
 800167a:	5ccb      	ldrb	r3, [r1, r3]
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_Init+0x68>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_Init+0x6c>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x70>)
 800169e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_Init+0x74>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f814 	bl	80016d4 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e002      	b.n	80016bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016b6:	f7ff fd39 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58024400 	.word	0x58024400
 80016c8:	0800c090 	.word	0x0800c090
 80016cc:	24000004 	.word	0x24000004
 80016d0:	24000000 	.word	0x24000000

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_InitTick+0x60>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e021      	b.n	800172c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_InitTick+0x64>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_InitTick+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 fb8f 	bl	8002e22 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f001 fb67 	bl	8002dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x68>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2400000c 	.word	0x2400000c
 8001738:	24000000 	.word	0x24000000
 800173c:	24000008 	.word	0x24000008

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2400000c 	.word	0x2400000c
 8001764:	24000454 	.word	0x24000454

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	24000454 	.word	0x24000454

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2400000c 	.word	0x2400000c

080017c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_GetREVID+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0c1b      	lsrs	r3, r3, #16
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	5c001000 	.word	0x5c001000

080017e0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	4904      	ldr	r1, [pc, #16]	; (8001808 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	58000400 	.word	0x58000400

0800180c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	609a      	str	r2, [r3, #8]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3360      	adds	r3, #96	; 0x60
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	611a      	str	r2, [r3, #16]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b087      	sub	sp, #28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	; 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	431a      	orrs	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]
  }
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3330      	adds	r3, #48	; 0x30
 8001952:	461a      	mov	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	4413      	add	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	211f      	movs	r1, #31
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 011f 	and.w	r1, r3, #31
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800199a:	b480      	push	{r7}
 800199c:	b087      	sub	sp, #28
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3314      	adds	r3, #20
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0e5b      	lsrs	r3, r3, #25
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	2107      	movs	r1, #7
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	0d1b      	lsrs	r3, r3, #20
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019e4:	bf00      	nop
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0318 	and.w	r3, r3, #24
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a14:	40d9      	lsrs	r1, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	400b      	ands	r3, r1
 8001a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	000fffff 	.word	0x000fffff

08001a38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 031f 	and.w	r3, r3, #31
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6093      	str	r3, [r2, #8]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	5fffffc0 	.word	0x5fffffc0

08001a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	6fffffc0 	.word	0x6fffffc0

08001ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001af8:	d101      	bne.n	8001afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_ADC_Enable+0x24>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	7fffffc0 	.word	0x7fffffc0

08001b34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_IsEnabled+0x18>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_IsEnabled+0x1a>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <LL_ADC_REG_StartConversion+0x24>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	f043 0204 	orr.w	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	7fffffc0 	.word	0x7fffffc0

08001b84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e18f      	b.n	8001f0a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff fab1 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff3f 	bl	8001a94 <LL_ADC_IsDeepPowerDownEnabled>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff25 	bl	8001a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff5a 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d114      	bne.n	8001c60 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff3e 	bl	8001abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c40:	4b87      	ldr	r3, [pc, #540]	; (8001e60 <HAL_ADC_Init+0x290>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_ADC_Init+0x294>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c52:	e002      	b.n	8001c5a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f9      	bne.n	8001c54 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff3d 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10d      	bne.n	8001c8c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c74:	f043 0210 	orr.w	r2, r3, #16
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff77 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001c96:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 8129 	bne.w	8001ef8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 8125 	bne.w	8001ef8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff36 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d136      	bne.n	8001d3c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a65      	ldr	r2, [pc, #404]	; (8001e68 <HAL_ADC_Init+0x298>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d004      	beq.n	8001ce2 <HAL_ADC_Init+0x112>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_ADC_Init+0x29c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10e      	bne.n	8001d00 <HAL_ADC_Init+0x130>
 8001ce2:	4861      	ldr	r0, [pc, #388]	; (8001e68 <HAL_ADC_Init+0x298>)
 8001ce4:	f7ff ff26 	bl	8001b34 <LL_ADC_IsEnabled>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	4860      	ldr	r0, [pc, #384]	; (8001e6c <HAL_ADC_Init+0x29c>)
 8001cec:	f7ff ff22 	bl	8001b34 <LL_ADC_IsEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4323      	orrs	r3, r4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e008      	b.n	8001d12 <HAL_ADC_Init+0x142>
 8001d00:	485b      	ldr	r0, [pc, #364]	; (8001e70 <HAL_ADC_Init+0x2a0>)
 8001d02:	f7ff ff17 	bl	8001b34 <LL_ADC_IsEnabled>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d012      	beq.n	8001d3c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a53      	ldr	r2, [pc, #332]	; (8001e68 <HAL_ADC_Init+0x298>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Init+0x15a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a51      	ldr	r2, [pc, #324]	; (8001e6c <HAL_ADC_Init+0x29c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Init+0x15e>
 8001d2a:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_ADC_Init+0x2a4>)
 8001d2c:	e000      	b.n	8001d30 <HAL_ADC_Init+0x160>
 8001d2e:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_ADC_Init+0x2a8>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f7ff fd68 	bl	800180c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d3c:	f7ff fd44 	bl	80017c8 <HAL_GetREVID>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d914      	bls.n	8001d74 <HAL_ADC_Init+0x1a4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d110      	bne.n	8001d74 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7d5b      	ldrb	r3, [r3, #21]
 8001d56:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7f1b      	ldrb	r3, [r3, #28]
 8001d68:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d6a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d6c:	f043 030c 	orr.w	r3, r3, #12
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	e00d      	b.n	8001d90 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7d5b      	ldrb	r3, [r3, #21]
 8001d78:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d7e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d84:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7f1b      	ldrb	r3, [r3, #28]
 8001d8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7f1b      	ldrb	r3, [r3, #28]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	045b      	lsls	r3, r3, #17
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_ADC_Init+0x2ac>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fed2 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001de0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fedf 	bl	8001baa <LL_ADC_INJ_IsConversionOngoing>
 8001dec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d15f      	bne.n	8001eb4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d15c      	bne.n	8001eb4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7d1b      	ldrb	r3, [r3, #20]
 8001dfe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_ADC_Init+0x2b0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d130      	bne.n	8001e88 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_ADC_Init+0x2b4>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0411      	lsls	r1, r2, #16
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e48:	4311      	orrs	r1, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	611a      	str	r2, [r3, #16]
 8001e5c:	e01c      	b.n	8001e98 <HAL_ADC_Init+0x2c8>
 8001e5e:	bf00      	nop
 8001e60:	24000000 	.word	0x24000000
 8001e64:	053e2d63 	.word	0x053e2d63
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40022100 	.word	0x40022100
 8001e70:	58026000 	.word	0x58026000
 8001e74:	40022300 	.word	0x40022300
 8001e78:	58026300 	.word	0x58026300
 8001e7c:	fff0c003 	.word	0xfff0c003
 8001e80:	ffffbffc 	.word	0xffffbffc
 8001e84:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fdd6 	bl	8002a60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10c      	bne.n	8001ed6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f023 010f 	bic.w	r1, r3, #15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	1e5a      	subs	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed4:	e007      	b.n	8001ee6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 020f 	bic.w	r2, r2, #15
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ef6:	e007      	b.n	8001f08 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f043 0210 	orr.w	r2, r3, #16
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop

08001f14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5c      	ldr	r2, [pc, #368]	; (8002094 <HAL_ADC_Start+0x180>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_Start+0x1c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5b      	ldr	r2, [pc, #364]	; (8002098 <HAL_ADC_Start+0x184>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_Start+0x20>
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <HAL_ADC_Start+0x188>)
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_Start+0x22>
 8001f34:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_ADC_Start+0x18c>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fd7e 	bl	8001a38 <LL_ADC_GetMultimode>
 8001f3c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe1e 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 809a 	bne.w	8002084 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Start+0x4a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e095      	b.n	800208a <HAL_ADC_Start+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fcf0 	bl	800294c <ADC_Enable>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8081 	bne.w	800207a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_ADC_Start+0x190>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a42      	ldr	r2, [pc, #264]	; (8002098 <HAL_ADC_Start+0x184>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d002      	beq.n	8001f98 <HAL_ADC_Start+0x84>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_Start+0x86>
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_ADC_Start+0x180>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d002      	beq.n	8001fa8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	f023 0206 	bic.w	r2, r3, #6
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58
 8001fce:	e002      	b.n	8001fd6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	221c      	movs	r2, #28
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_ADC_Start+0x184>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_Start+0xe2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_Start+0xe4>
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_ADC_Start+0x180>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d008      	beq.n	8002012 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d002      	beq.n	8002012 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b09      	cmp	r3, #9
 8002010:	d114      	bne.n	800203c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002028:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fd91 	bl	8001b5c <LL_ADC_REG_StartConversion>
 800203a:	e025      	b.n	8002088 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_ADC_Start+0x184>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d002      	beq.n	8002058 <HAL_ADC_Start+0x144>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	e000      	b.n	800205a <HAL_ADC_Start+0x146>
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_ADC_Start+0x180>)
 800205a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00f      	beq.n	8002088 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002070:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
 8002078:	e006      	b.n	8002088 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002082:	e001      	b.n	8002088 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002084:	2302      	movs	r3, #2
 8002086:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002088:	7dfb      	ldrb	r3, [r7, #23]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000
 8002098:	40022100 	.word	0x40022100
 800209c:	40022300 	.word	0x40022300
 80020a0:	58026300 	.word	0x58026300
 80020a4:	fffff0fe 	.word	0xfffff0fe

080020a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a72      	ldr	r2, [pc, #456]	; (8002280 <HAL_ADC_PollForConversion+0x1d8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_PollForConversion+0x1e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a70      	ldr	r2, [pc, #448]	; (8002284 <HAL_ADC_PollForConversion+0x1dc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_PollForConversion+0x22>
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <HAL_ADC_PollForConversion+0x1e0>)
 80020c8:	e000      	b.n	80020cc <HAL_ADC_PollForConversion+0x24>
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_ADC_PollForConversion+0x1e4>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fcb3 	bl	8001a38 <LL_ADC_GetMultimode>
 80020d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020dc:	2308      	movs	r3, #8
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	e037      	b.n	8002152 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d002      	beq.n	80020f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	d111      	bne.n	8002118 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0b1      	b.n	8002276 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002112:	2304      	movs	r3, #4
 8002114:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002116:	e01c      	b.n	8002152 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_ADC_PollForConversion+0x1d8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_ADC_PollForConversion+0x84>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_ADC_PollForConversion+0x1dc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_ADC_PollForConversion+0x88>
 800212c:	4b56      	ldr	r3, [pc, #344]	; (8002288 <HAL_ADC_PollForConversion+0x1e0>)
 800212e:	e000      	b.n	8002132 <HAL_ADC_PollForConversion+0x8a>
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_ADC_PollForConversion+0x1e4>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fc8e 	bl	8001a54 <LL_ADC_GetMultiDMATransfer>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0220 	orr.w	r2, r3, #32
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e093      	b.n	8002276 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800214e:	2304      	movs	r3, #4
 8002150:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002152:	f7ff fb09 	bl	8001768 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002158:	e021      	b.n	800219e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d01d      	beq.n	800219e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002162:	f7ff fb01 	bl	8001768 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d302      	bcc.n	8002178 <HAL_ADC_PollForConversion+0xd0>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d112      	bne.n	800219e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e06b      	b.n	8002276 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0d6      	beq.n	800215a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fbad 	bl	800191c <LL_ADC_REG_IsTriggerSourceSWStart>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01c      	beq.n	8002202 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7d5b      	ldrb	r3, [r3, #21]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d118      	bne.n	8002202 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d111      	bne.n	8002202 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <HAL_ADC_PollForConversion+0x1dc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d002      	beq.n	8002212 <HAL_ADC_PollForConversion+0x16a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e000      	b.n	8002214 <HAL_ADC_PollForConversion+0x16c>
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_ADC_PollForConversion+0x1d8>)
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4293      	cmp	r3, r2
 800221a:	d008      	beq.n	800222e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d002      	beq.n	800222e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b09      	cmp	r3, #9
 800222c:	d104      	bne.n	8002238 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	e00c      	b.n	8002252 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_ADC_PollForConversion+0x1dc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d002      	beq.n	8002248 <HAL_ADC_PollForConversion+0x1a0>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e000      	b.n	800224a <HAL_ADC_PollForConversion+0x1a2>
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_ADC_PollForConversion+0x1d8>)
 800224a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d104      	bne.n	8002262 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e008      	b.n	8002274 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d103      	bne.n	8002274 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	220c      	movs	r2, #12
 8002272:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000
 8002284:	40022100 	.word	0x40022100
 8002288:	40022300 	.word	0x40022300
 800228c:	58026300 	.word	0x58026300

08002290 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b0a1      	sub	sp, #132	; 0x84
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	4a9d      	ldr	r2, [pc, #628]	; (800253c <HAL_ADC_ConfigChannel+0x290>)
 80022c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x2a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e321      	b.n	800291a <HAL_ADC_ConfigChannel+0x66e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc4e 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 8306 	bne.w	80028fc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d108      	bne.n	800230e <HAL_ADC_ConfigChannel+0x62>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2201      	movs	r2, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	e016      	b.n	800233c <HAL_ADC_ConfigChannel+0x90>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800231c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e003      	b.n	8002332 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800232a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2201      	movs	r2, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	69d1      	ldr	r1, [r2, #28]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	430b      	orrs	r3, r1
 8002348:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f7ff faf3 	bl	8001942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fc0f 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002366:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fc1c 	bl	8001baa <LL_ADC_INJ_IsConversionOngoing>
 8002372:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 80b3 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800237c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80af 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	461a      	mov	r2, r3
 8002392:	f7ff fb02 	bl	800199a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002396:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_ADC_ConfigChannel+0x294>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800239e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023a2:	d10b      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x110>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	e01d      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x14c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x136>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	e00a      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x14c>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d027      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6919      	ldr	r1, [r3, #16]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002410:	f7ff fa30 	bl	8001874 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6919      	ldr	r1, [r3, #16]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7e5b      	ldrb	r3, [r3, #25]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d102      	bne.n	800242a <HAL_ADC_ConfigChannel+0x17e>
 8002424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002428:	e000      	b.n	800242c <HAL_ADC_ConfigChannel+0x180>
 800242a:	2300      	movs	r3, #0
 800242c:	461a      	mov	r2, r3
 800242e:	f7ff fa5a 	bl	80018e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7e1b      	ldrb	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x19c>
 8002442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002446:	e000      	b.n	800244a <HAL_ADC_ConfigChannel+0x19e>
 8002448:	2300      	movs	r3, #0
 800244a:	461a      	mov	r2, r3
 800244c:	f7ff fa32 	bl	80018b4 <LL_ADC_SetDataRightShift>
 8002450:	e047      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	069b      	lsls	r3, r3, #26
 8002462:	429a      	cmp	r2, r3
 8002464:	d107      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002474:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	069b      	lsls	r3, r3, #26
 8002486:	429a      	cmp	r2, r3
 8002488:	d107      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002498:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d107      	bne.n	80024be <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024bc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	069b      	lsls	r3, r3, #26
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d107      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fb24 	bl	8001b34 <LL_ADC_IsEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 820d 	bne.w	800290e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	461a      	mov	r2, r3
 8002502:	f7ff fa75 	bl	80019f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <HAL_ADC_ConfigChannel+0x290>)
 800250c:	4293      	cmp	r3, r2
 800250e:	f040 8133 	bne.w	8002778 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800251e:	2b00      	cmp	r3, #0
 8002520:	d110      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x298>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	3301      	adds	r3, #1
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2b09      	cmp	r3, #9
 8002530:	bf94      	ite	ls
 8002532:	2301      	movls	r3, #1
 8002534:	2300      	movhi	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e01e      	b.n	8002578 <HAL_ADC_ConfigChannel+0x2cc>
 800253a:	bf00      	nop
 800253c:	47ff0000 	.word	0x47ff0000
 8002540:	5c001000 	.word	0x5c001000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002554:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2b09      	cmp	r3, #9
 8002570:	bf94      	ite	ls
 8002572:	2301      	movls	r3, #1
 8002574:	2300      	movhi	r3, #0
 8002576:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	2b00      	cmp	r3, #0
 800257a:	d079      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x2ec>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	069b      	lsls	r3, r3, #26
 8002592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002596:	e015      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x318>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80025b0:	2320      	movs	r3, #32
 80025b2:	e003      	b.n	80025bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	069b      	lsls	r3, r3, #26
 80025c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x338>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	e017      	b.n	8002614 <HAL_ADC_ConfigChannel+0x368>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e003      	b.n	8002608 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	ea42 0103 	orr.w	r1, r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <HAL_ADC_ConfigChannel+0x38e>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	051b      	lsls	r3, r3, #20
 8002638:	e018      	b.n	800266c <HAL_ADC_ConfigChannel+0x3c0>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e003      	b.n	800265e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	fab3 f383 	clz	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266c:	430b      	orrs	r3, r1
 800266e:	e07e      	b.n	800276e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_ADC_ConfigChannel+0x3e0>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	069b      	lsls	r3, r3, #26
 8002686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268a:	e015      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x40c>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e003      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	069b      	lsls	r3, r3, #26
 80026b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x42c>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	e017      	b.n	8002708 <HAL_ADC_ConfigChannel+0x45c>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	61bb      	str	r3, [r7, #24]
  return result;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	ea42 0103 	orr.w	r1, r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10d      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x488>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	3b1e      	subs	r3, #30
 800272c:	051b      	lsls	r3, r3, #20
 800272e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002732:	e01b      	b.n	800276c <HAL_ADC_ConfigChannel+0x4c0>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	60fb      	str	r3, [r7, #12]
  return result;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e003      	b.n	8002758 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f003 021f 	and.w	r2, r3, #31
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	3b1e      	subs	r3, #30
 8002766:	051b      	lsls	r3, r3, #20
 8002768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800276c:	430b      	orrs	r3, r1
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	6892      	ldr	r2, [r2, #8]
 8002772:	4619      	mov	r1, r3
 8002774:	f7ff f911 	bl	800199a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f280 80c6 	bge.w	800290e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a67      	ldr	r2, [pc, #412]	; (8002924 <HAL_ADC_ConfigChannel+0x678>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x4ea>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_ADC_ConfigChannel+0x67c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x4ee>
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <HAL_ADC_ConfigChannel+0x680>)
 8002798:	e000      	b.n	800279c <HAL_ADC_ConfigChannel+0x4f0>
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_ADC_ConfigChannel+0x684>)
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f85b 	bl	8001858 <LL_ADC_GetCommonPathInternalCh>
 80027a2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <HAL_ADC_ConfigChannel+0x678>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d004      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x50c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5d      	ldr	r2, [pc, #372]	; (8002928 <HAL_ADC_ConfigChannel+0x67c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10e      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x52a>
 80027b8:	485a      	ldr	r0, [pc, #360]	; (8002924 <HAL_ADC_ConfigChannel+0x678>)
 80027ba:	f7ff f9bb 	bl	8001b34 <LL_ADC_IsEnabled>
 80027be:	4604      	mov	r4, r0
 80027c0:	4859      	ldr	r0, [pc, #356]	; (8002928 <HAL_ADC_ConfigChannel+0x67c>)
 80027c2:	f7ff f9b7 	bl	8001b34 <LL_ADC_IsEnabled>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4323      	orrs	r3, r4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e008      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x53c>
 80027d6:	4857      	ldr	r0, [pc, #348]	; (8002934 <HAL_ADC_ConfigChannel+0x688>)
 80027d8:	f7ff f9ac 	bl	8001b34 <LL_ADC_IsEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d07d      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_ADC_ConfigChannel+0x68c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d130      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x5ac>
 80027f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12b      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_ADC_ConfigChannel+0x688>)
 8002806:	4293      	cmp	r3, r2
 8002808:	f040 8081 	bne.w	800290e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a44      	ldr	r2, [pc, #272]	; (8002924 <HAL_ADC_ConfigChannel+0x678>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d004      	beq.n	8002820 <HAL_ADC_ConfigChannel+0x574>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_ADC_ConfigChannel+0x67c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x578>
 8002820:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_ADC_ConfigChannel+0x680>)
 8002822:	e000      	b.n	8002826 <HAL_ADC_ConfigChannel+0x57a>
 8002824:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_ADC_ConfigChannel+0x684>)
 8002826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7fe ffff 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_ADC_ConfigChannel+0x690>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	4a41      	ldr	r2, [pc, #260]	; (8002940 <HAL_ADC_ConfigChannel+0x694>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002848:	e002      	b.n	8002850 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3b01      	subs	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f9      	bne.n	800284a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002856:	e05a      	b.n	800290e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a39      	ldr	r2, [pc, #228]	; (8002944 <HAL_ADC_ConfigChannel+0x698>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d11e      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d119      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a30      	ldr	r2, [pc, #192]	; (8002934 <HAL_ADC_ConfigChannel+0x688>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d14b      	bne.n	800290e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_ADC_ConfigChannel+0x678>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_ADC_ConfigChannel+0x5de>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a28      	ldr	r2, [pc, #160]	; (8002928 <HAL_ADC_ConfigChannel+0x67c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x5e2>
 800288a:	4a28      	ldr	r2, [pc, #160]	; (800292c <HAL_ADC_ConfigChannel+0x680>)
 800288c:	e000      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5e4>
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <HAL_ADC_ConfigChannel+0x684>)
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7fe ffca 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800289e:	e036      	b.n	800290e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <HAL_ADC_ConfigChannel+0x69c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d131      	bne.n	800290e <HAL_ADC_ConfigChannel+0x662>
 80028aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12c      	bne.n	800290e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_ADC_ConfigChannel+0x688>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d127      	bne.n	800290e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_ADC_ConfigChannel+0x678>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x626>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_ADC_ConfigChannel+0x67c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x62a>
 80028d2:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_ADC_ConfigChannel+0x680>)
 80028d4:	e000      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x62c>
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_ADC_ConfigChannel+0x684>)
 80028d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f7fe ffa6 	bl	8001832 <LL_ADC_SetCommonPathInternalCh>
 80028e6:	e012      	b.n	800290e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028fa:	e008      	b.n	800290e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800291a:	4618      	mov	r0, r3
 800291c:	3784      	adds	r7, #132	; 0x84
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	40022000 	.word	0x40022000
 8002928:	40022100 	.word	0x40022100
 800292c:	40022300 	.word	0x40022300
 8002930:	58026300 	.word	0x58026300
 8002934:	58026000 	.word	0x58026000
 8002938:	cb840000 	.word	0xcb840000
 800293c:	24000000 	.word	0x24000000
 8002940:	053e2d63 	.word	0x053e2d63
 8002944:	c7520000 	.word	0xc7520000
 8002948:	cfb80000 	.word	0xcfb80000

0800294c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f8eb 	bl	8001b34 <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d16e      	bne.n	8002a42 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <ADC_Enable+0x100>)
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e05a      	b.n	8002a44 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f8ba 	bl	8001b0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002998:	f7fe fee6 	bl	8001768 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <ADC_Enable+0x104>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <ADC_Enable+0x66>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <ADC_Enable+0x108>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <ADC_Enable+0x6a>
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <ADC_Enable+0x10c>)
 80029b4:	e000      	b.n	80029b8 <ADC_Enable+0x6c>
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <ADC_Enable+0x110>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f83d 	bl	8001a38 <LL_ADC_GetMultimode>
 80029be:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <ADC_Enable+0x108>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d002      	beq.n	80029d0 <ADC_Enable+0x84>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e000      	b.n	80029d2 <ADC_Enable+0x86>
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <ADC_Enable+0x104>)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02c      	beq.n	8002a34 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d130      	bne.n	8002a42 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e0:	e028      	b.n	8002a34 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff f8a4 	bl	8001b34 <LL_ADC_IsEnabled>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f888 	bl	8001b0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029fc:	f7fe feb4 	bl	8001768 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d914      	bls.n	8002a34 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d00d      	beq.n	8002a34 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f043 0210 	orr.w	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e007      	b.n	8002a44 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d1cf      	bne.n	80029e2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	8000003f 	.word	0x8000003f
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40022100 	.word	0x40022100
 8002a58:	40022300 	.word	0x40022300
 8002a5c:	58026300 	.word	0x58026300

08002a60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <ADC_ConfigureBoostMode+0x1f4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <ADC_ConfigureBoostMode+0x1c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a78      	ldr	r2, [pc, #480]	; (8002c58 <ADC_ConfigureBoostMode+0x1f8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d109      	bne.n	8002a90 <ADC_ConfigureBoostMode+0x30>
 8002a7c:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <ADC_ConfigureBoostMode+0x1fc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e008      	b.n	8002aa2 <ADC_ConfigureBoostMode+0x42>
 8002a90:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <ADC_ConfigureBoostMode+0x200>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01c      	beq.n	8002ae0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002aa6:	f002 fa3f 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8002aaa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ab4:	d010      	beq.n	8002ad8 <ADC_ConfigureBoostMode+0x78>
 8002ab6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aba:	d871      	bhi.n	8002ba0 <ADC_ConfigureBoostMode+0x140>
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d002      	beq.n	8002ac8 <ADC_ConfigureBoostMode+0x68>
 8002ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac6:	d16b      	bne.n	8002ba0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	60fb      	str	r3, [r7, #12]
        break;
 8002ad6:	e066      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
        break;
 8002ade:	e062      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ae0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ae4:	f003 f9c2 	bl	8005e6c <HAL_RCCEx_GetPeriphCLKFreq>
 8002ae8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002af2:	d051      	beq.n	8002b98 <ADC_ConfigureBoostMode+0x138>
 8002af4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002af8:	d854      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002afa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002afe:	d047      	beq.n	8002b90 <ADC_ConfigureBoostMode+0x130>
 8002b00:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b04:	d84e      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b06:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b0a:	d03d      	beq.n	8002b88 <ADC_ConfigureBoostMode+0x128>
 8002b0c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b10:	d848      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b16:	d033      	beq.n	8002b80 <ADC_ConfigureBoostMode+0x120>
 8002b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b1c:	d842      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b22:	d029      	beq.n	8002b78 <ADC_ConfigureBoostMode+0x118>
 8002b24:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b28:	d83c      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b2a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b2e:	d01a      	beq.n	8002b66 <ADC_ConfigureBoostMode+0x106>
 8002b30:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b34:	d836      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b36:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b3a:	d014      	beq.n	8002b66 <ADC_ConfigureBoostMode+0x106>
 8002b3c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b40:	d830      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b46:	d00e      	beq.n	8002b66 <ADC_ConfigureBoostMode+0x106>
 8002b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4c:	d82a      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b52:	d008      	beq.n	8002b66 <ADC_ConfigureBoostMode+0x106>
 8002b54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b58:	d824      	bhi.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
 8002b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b5e:	d002      	beq.n	8002b66 <ADC_ConfigureBoostMode+0x106>
 8002b60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b64:	d11e      	bne.n	8002ba4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0c9b      	lsrs	r3, r3, #18
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	60fb      	str	r3, [r7, #12]
        break;
 8002b76:	e016      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
        break;
 8002b7e:	e012      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	60fb      	str	r3, [r7, #12]
        break;
 8002b86:	e00e      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	60fb      	str	r3, [r7, #12]
        break;
 8002b8e:	e00a      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	09db      	lsrs	r3, r3, #7
 8002b94:	60fb      	str	r3, [r7, #12]
        break;
 8002b96:	e006      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	60fb      	str	r3, [r7, #12]
        break;
 8002b9e:	e002      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
        break;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002ba4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ba6:	f7fe fe0f 	bl	80017c8 <HAL_GetREVID>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d815      	bhi.n	8002be0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <ADC_ConfigureBoostMode+0x204>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d908      	bls.n	8002bce <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bcc:	e03e      	b.n	8002c4c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bdc:	609a      	str	r2, [r3, #8]
}
 8002bde:	e035      	b.n	8002c4c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <ADC_ConfigureBoostMode+0x208>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d808      	bhi.n	8002c00 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bfc:	609a      	str	r2, [r3, #8]
}
 8002bfe:	e025      	b.n	8002c4c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <ADC_ConfigureBoostMode+0x20c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d80a      	bhi.n	8002c1e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1a:	609a      	str	r2, [r3, #8]
}
 8002c1c:	e016      	b.n	8002c4c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <ADC_ConfigureBoostMode+0x210>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d80a      	bhi.n	8002c3c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	e007      	b.n	8002c4c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40022100 	.word	0x40022100
 8002c5c:	40022300 	.word	0x40022300
 8002c60:	58026300 	.word	0x58026300
 8002c64:	01312d00 	.word	0x01312d00
 8002c68:	005f5e10 	.word	0x005f5e10
 8002c6c:	00bebc20 	.word	0x00bebc20
 8002c70:	017d7840 	.word	0x017d7840

08002c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	05fa0000 	.word	0x05fa0000

08002cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da4:	d301      	bcc.n	8002daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00f      	b.n	8002dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <SysTick_Config+0x40>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db2:	210f      	movs	r1, #15
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	f7ff ff8e 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <SysTick_Config+0x40>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <SysTick_Config+0x40>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	e000e010 	.word	0xe000e010

08002dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff47 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff5e 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff90 	bl	8002d2c <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5f 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffb2 	bl	8002d94 <SysTick_Config>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b098      	sub	sp, #96	; 0x60
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002e44:	4a84      	ldr	r2, [pc, #528]	; (8003058 <HAL_FDCAN_Init+0x21c>)
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	224c      	movs	r2, #76	; 0x4c
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f006 fc16 	bl	8009680 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1c6      	b.n	80031ec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7e      	ldr	r2, [pc, #504]	; (800305c <HAL_FDCAN_Init+0x220>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d106      	bne.n	8002e76 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe f9c4 	bl	8001218 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0210 	bic.w	r2, r2, #16
 8002e9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea0:	f7fe fc62 	bl	8001768 <HAL_GetTick>
 8002ea4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ea6:	e014      	b.n	8002ed2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ea8:	f7fe fc5e 	bl	8001768 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b0a      	cmp	r3, #10
 8002eb4:	d90d      	bls.n	8002ed2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e18c      	b.n	80031ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d0e3      	beq.n	8002ea8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef0:	f7fe fc3a 	bl	8001768 <HAL_GetTick>
 8002ef4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ef6:	e014      	b.n	8002f22 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ef8:	f7fe fc36 	bl	8001768 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d90d      	bls.n	8002f22 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e164      	b.n	80031ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0e3      	beq.n	8002ef8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0202 	orr.w	r2, r2, #2
 8002f3e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7c1b      	ldrb	r3, [r3, #16]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	619a      	str	r2, [r3, #24]
 8002f58:	e007      	b.n	8002f6a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f68:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7c5b      	ldrb	r3, [r3, #17]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f80:	619a      	str	r2, [r3, #24]
 8002f82:	e007      	b.n	8002f94 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f92:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7c9b      	ldrb	r3, [r3, #18]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d108      	bne.n	8002fae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	e007      	b.n	8002fbe <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fbc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002fe2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d108      	bne.n	800300e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0204 	orr.w	r2, r2, #4
 800300a:	619a      	str	r2, [r3, #24]
 800300c:	e030      	b.n	8003070 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02c      	beq.n	8003070 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d020      	beq.n	8003060 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800302c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0210 	orr.w	r2, r2, #16
 800303c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b03      	cmp	r3, #3
 8003044:	d114      	bne.n	8003070 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0220 	orr.w	r2, r2, #32
 8003054:	619a      	str	r2, [r3, #24]
 8003056:	e00b      	b.n	8003070 <HAL_FDCAN_Init+0x234>
 8003058:	0800c044 	.word	0x0800c044
 800305c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	3b01      	subs	r3, #1
 8003076:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	3b01      	subs	r3, #1
 800307e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003080:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003088:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	3b01      	subs	r3, #1
 8003092:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003098:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800309a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a4:	d115      	bne.n	80030d2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	3b01      	subs	r3, #1
 80030b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	3b01      	subs	r3, #1
 80030bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80030be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80030ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80030d0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f8:	4413      	add	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003106:	f023 0107 	bic.w	r1, r3, #7
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	3360      	adds	r3, #96	; 0x60
 8003112:	443b      	add	r3, r7
 8003114:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d011      	beq.n	800314e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003132:	f023 0107 	bic.w	r1, r3, #7
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3360      	adds	r3, #96	; 0x60
 800313e:	443b      	add	r3, r7
 8003140:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d012      	beq.n	800317c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800315e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	3360      	adds	r3, #96	; 0x60
 800316a:	443b      	add	r3, r7
 800316c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003170:	011a      	lsls	r2, r3, #4
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800318c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3360      	adds	r3, #96	; 0x60
 8003198:	443b      	add	r3, r7
 800319a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <HAL_FDCAN_Init+0x3b8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d107      	bne.n	80031c4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f022 0203 	bic.w	r2, r2, #3
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 faef 	bl	80037c0 <FDCAN_CalcultateRamBlockAddresses>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80031e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3760      	adds	r7, #96	; 0x60
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	4000a000 	.word	0x4000a000

080031f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003208:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d002      	beq.n	8003216 <HAL_FDCAN_ConfigFilter+0x1e>
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d157      	bne.n	80032c6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d12b      	bne.n	8003276 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b07      	cmp	r3, #7
 8003224:	d10d      	bne.n	8003242 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003232:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003238:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800323a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e00e      	b.n	8003260 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800324e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003256:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e025      	b.n	80032c2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	075a      	lsls	r2, r3, #29
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b07      	cmp	r3, #7
 800328a:	d103      	bne.n	8003294 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e006      	b.n	80032a2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	079a      	lsls	r2, r3, #30
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3304      	adds	r3, #4
 80032ba:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e008      	b.n	80032d8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032cc:	f043 0202 	orr.w	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d111      	bne.n	800331c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e008      	b.n	800332e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d141      	bne.n	80033d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800335a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e038      	b.n	80033e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800338c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e026      	b.n	80033e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fb8b 	bl	8003acc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80033c6:	2201      	movs	r2, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e008      	b.n	80033e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033dc:	f043 0208 	orr.w	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
  }
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b08b      	sub	sp, #44	; 0x2c
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003408:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800340a:	7efb      	ldrb	r3, [r7, #27]
 800340c:	2b02      	cmp	r3, #2
 800340e:	f040 814b 	bne.w	80036a8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d14d      	bne.n	80034b4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003420:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e13e      	b.n	80036ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e12c      	b.n	80036ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003468:	0e1b      	lsrs	r3, r3, #24
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10b      	bne.n	800348a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800347a:	0fdb      	lsrs	r3, r3, #31
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003484:	d101      	bne.n	800348a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003486:	2301      	movs	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	4413      	add	r3, r2
 800349c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	69f9      	ldr	r1, [r7, #28]
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e069      	b.n	8003588 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b41      	cmp	r3, #65	; 0x41
 80034b8:	d14d      	bne.n	8003556 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0ed      	b.n	80036ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0db      	b.n	80036ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10b      	bne.n	800352c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800351c:	0fdb      	lsrs	r3, r3, #31
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003526:	d101      	bne.n	800352c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003528:	2301      	movs	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	69f9      	ldr	r1, [r7, #28]
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	e018      	b.n	8003588 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	d309      	bcc.n	8003574 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0a2      	b.n	80036ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0c9b      	lsrs	r3, r3, #18
 80035a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e005      	b.n	80035b8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	3304      	adds	r3, #4
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e1b      	lsrs	r3, r3, #24
 800360a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0fda      	lsrs	r2, r3, #31
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	3304      	adds	r3, #4
 8003620:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	e00a      	b.n	8003642 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	441a      	add	r2, r3
 8003632:	6839      	ldr	r1, [r7, #0]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	440b      	add	r3, r1
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	3301      	adds	r3, #1
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	461a      	mov	r2, r3
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	4293      	cmp	r3, r2
 8003652:	d3eb      	bcc.n	800362c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d105      	bne.n	8003666 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003664:	e01e      	b.n	80036a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b41      	cmp	r3, #65	; 0x41
 800366a:	d105      	bne.n	8003678 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003676:	e015      	b.n	80036a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b1f      	cmp	r3, #31
 800367c:	d808      	bhi.n	8003690 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800368e:	e009      	b.n	80036a4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 021f 	and.w	r2, r3, #31
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e008      	b.n	80036ba <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ae:	f043 0208 	orr.w	r2, r3, #8
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	372c      	adds	r7, #44	; 0x2c
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	0800c0a0 	.word	0x0800c0a0

080036cc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036de:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d002      	beq.n	80036ec <HAL_FDCAN_ActivateNotification+0x20>
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d155      	bne.n	8003798 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	65da      	str	r2, [r3, #92]	; 0x5c
 800370a:	e014      	b.n	8003736 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	429a      	cmp	r2, r3
 800371a:	d108      	bne.n	800372e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0202 	orr.w	r2, r2, #2
 800372a:	65da      	str	r2, [r3, #92]	; 0x5c
 800372c:	e003      	b.n	8003736 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2203      	movs	r2, #3
 8003734:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	430a      	orrs	r2, r1
 8003750:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	430a      	orrs	r2, r1
 800376e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_FDCAN_ActivateNotification+0xec>)
 800377c:	4013      	ands	r3, r2
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	430b      	orrs	r3, r1
 8003784:	6553      	str	r3, [r2, #84]	; 0x54
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0f9b      	lsrs	r3, r3, #30
 800378e:	490b      	ldr	r1, [pc, #44]	; (80037bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e008      	b.n	80037aa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	3fcfffff 	.word	0x3fcfffff
 80037bc:	4000a800 	.word	0x4000a800

080037c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037d6:	4ba7      	ldr	r3, [pc, #668]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	0091      	lsls	r1, r2, #2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	430b      	orrs	r3, r1
 80037e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	4413      	add	r3, r2
 800380c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003816:	4b97      	ldr	r3, [pc, #604]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003818:	4013      	ands	r3, r2
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	0091      	lsls	r1, r2, #2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	430b      	orrs	r3, r1
 8003824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	041a      	lsls	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	4413      	add	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003858:	4b86      	ldr	r3, [pc, #536]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	0091      	lsls	r1, r2, #2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003872:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	041a      	lsls	r2, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4413      	add	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038a0:	4b74      	ldr	r3, [pc, #464]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	0091      	lsls	r1, r2, #2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	041a      	lsls	r2, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80038e8:	4b62      	ldr	r3, [pc, #392]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	0091      	lsls	r1, r2, #2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003914:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003916:	4013      	ands	r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	0091      	lsls	r1, r2, #2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	430b      	orrs	r3, r1
 8003922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800392e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	041a      	lsls	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4413      	add	r3, r2
 800394c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003958:	4013      	ands	r3, r2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	0091      	lsls	r1, r2, #2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	430b      	orrs	r3, r1
 8003964:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003970:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	041a      	lsls	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800398c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	061a      	lsls	r2, r3, #24
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a4:	4b34      	ldr	r3, [pc, #208]	; (8003a78 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80039a6:	4413      	add	r3, r2
 80039a8:	009a      	lsls	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d915      	bls.n	8003a9c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003a70:	e006      	b.n	8003a80 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003a72:	bf00      	nop
 8003a74:	ffff0003 	.word	0xffff0003
 8003a78:	10002b00 	.word	0x10002b00
 8003a7c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2203      	movs	r2, #3
 8003a94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e010      	b.n	8003abe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e005      	b.n	8003ab0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3304      	adds	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3f3      	bcc.n	8003aa4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop

08003acc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	; 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003aea:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	e00a      	b.n	8003b0e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003b00:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003b06:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b0c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003b18:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003b1e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003b24:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b38:	6839      	ldr	r1, [r7, #0]
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e020      	b.n	8003ba4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3303      	adds	r3, #3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3302      	adds	r3, #2
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	440b      	add	r3, r1
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003b7a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	440b      	add	r3, r1
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003b88:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	440a      	add	r2, r1
 8003b90:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003b92:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <FDCAN_CopyMessageToRAM+0xf8>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d3d5      	bcc.n	8003b62 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	3724      	adds	r7, #36	; 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	0800c0a0 	.word	0x0800c0a0

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bd6:	4b89      	ldr	r3, [pc, #548]	; (8003dfc <HAL_GPIO_Init+0x234>)
 8003bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bda:	e194      	b.n	8003f06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2101      	movs	r1, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8186 	beq.w	8003f00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_GPIO_Init+0x44>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d130      	bne.n	8003c6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c42:	2201      	movs	r2, #1
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	f003 0201 	and.w	r2, r3, #1
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d017      	beq.n	8003caa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d123      	bne.n	8003cfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	08da      	lsrs	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3208      	adds	r2, #8
 8003cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	220f      	movs	r2, #15
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0203 	and.w	r2, r3, #3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80e0 	beq.w	8003f00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d40:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_GPIO_Init+0x238>)
 8003d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <HAL_GPIO_Init+0x238>)
 8003d48:	f043 0302 	orr.w	r3, r3, #2
 8003d4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_GPIO_Init+0x238>)
 8003d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d5e:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <HAL_GPIO_Init+0x23c>)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	3302      	adds	r3, #2
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	220f      	movs	r2, #15
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a20      	ldr	r2, [pc, #128]	; (8003e08 <HAL_GPIO_Init+0x240>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d052      	beq.n	8003e30 <HAL_GPIO_Init+0x268>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_GPIO_Init+0x244>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_GPIO_Init+0x22e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_GPIO_Init+0x248>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d02b      	beq.n	8003df2 <HAL_GPIO_Init+0x22a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_GPIO_Init+0x24c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d025      	beq.n	8003dee <HAL_GPIO_Init+0x226>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_GPIO_Init+0x250>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <HAL_GPIO_Init+0x222>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_GPIO_Init+0x254>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d019      	beq.n	8003de6 <HAL_GPIO_Init+0x21e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <HAL_GPIO_Init+0x258>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0x21a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_GPIO_Init+0x25c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_GPIO_Init+0x216>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <HAL_GPIO_Init+0x260>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_Init+0x212>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_GPIO_Init+0x264>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_GPIO_Init+0x20e>
 8003dd2:	2309      	movs	r3, #9
 8003dd4:	e02d      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	e02b      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dda:	2308      	movs	r3, #8
 8003ddc:	e029      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e027      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003de2:	2306      	movs	r3, #6
 8003de4:	e025      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e023      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e021      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e01f      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e01d      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e01b      	b.n	8003e32 <HAL_GPIO_Init+0x26a>
 8003dfa:	bf00      	nop
 8003dfc:	58000080 	.word	0x58000080
 8003e00:	58024400 	.word	0x58024400
 8003e04:	58000400 	.word	0x58000400
 8003e08:	58020000 	.word	0x58020000
 8003e0c:	58020400 	.word	0x58020400
 8003e10:	58020800 	.word	0x58020800
 8003e14:	58020c00 	.word	0x58020c00
 8003e18:	58021000 	.word	0x58021000
 8003e1c:	58021400 	.word	0x58021400
 8003e20:	58021800 	.word	0x58021800
 8003e24:	58021c00 	.word	0x58021c00
 8003e28:	58022000 	.word	0x58022000
 8003e2c:	58022400 	.word	0x58022400
 8003e30:	2300      	movs	r3, #0
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	f002 0203 	and.w	r2, r2, #3
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	4093      	lsls	r3, r2
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e42:	4938      	ldr	r1, [pc, #224]	; (8003f24 <HAL_GPIO_Init+0x35c>)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f ae63 	bne.w	8003bdc <HAL_GPIO_Init+0x14>
  }
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	3724      	adds	r7, #36	; 0x24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	58000400 	.word	0x58000400

08003f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
 8003f34:	4613      	mov	r3, r2
 8003f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f38:	787b      	ldrb	r3, [r7, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f44:	e003      	b.n	8003f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	041a      	lsls	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	619a      	str	r2, [r3, #24]
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003f64:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <HAL_HSEM_FastTake+0x2c>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3320      	adds	r3, #32
 8003f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <HAL_HSEM_FastTake+0x30>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	58026400 	.word	0x58026400
 8003f8c:	80000300 	.word	0x80000300

08003f90 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003f9a:	4906      	ldr	r1, [pc, #24]	; (8003fb4 <HAL_HSEM_Release+0x24>)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	58026400 	.word	0x58026400

08003fb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003fc0:	4b29      	ldr	r3, [pc, #164]	; (8004068 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d00a      	beq.n	8003fe2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fcc:	4b26      	ldr	r3, [pc, #152]	; (8004068 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e040      	b.n	8004060 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e03e      	b.n	8004060 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003fea:	491f      	ldr	r1, [pc, #124]	; (8004068 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ff2:	f7fd fbb9 	bl	8001768 <HAL_GetTick>
 8003ff6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ff8:	e009      	b.n	800400e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ffa:	f7fd fbb5 	bl	8001768 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004008:	d901      	bls.n	800400e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e028      	b.n	8004060 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_PWREx_ConfigSupply+0xb0>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401a:	d1ee      	bne.n	8003ffa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b1e      	cmp	r3, #30
 8004020:	d008      	beq.n	8004034 <HAL_PWREx_ConfigSupply+0x7c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b2e      	cmp	r3, #46	; 0x2e
 8004026:	d005      	beq.n	8004034 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b1d      	cmp	r3, #29
 800402c:	d002      	beq.n	8004034 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b2d      	cmp	r3, #45	; 0x2d
 8004032:	d114      	bne.n	800405e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004034:	f7fd fb98 	bl	8001768 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800403a:	e009      	b.n	8004050 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800403c:	f7fd fb94 	bl	8001768 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404a:	d901      	bls.n	8004050 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_PWREx_ConfigSupply+0xb0>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d1ee      	bne.n	800403c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58024800 	.word	0x58024800

0800406c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08c      	sub	sp, #48	; 0x30
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f000 bc1d 	b.w	80048ba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8087 	beq.w	800419c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408e:	4b99      	ldr	r3, [pc, #612]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004098:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d007      	beq.n	80040b4 <HAL_RCC_OscConfig+0x48>
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2b18      	cmp	r3, #24
 80040a8:	d110      	bne.n	80040cc <HAL_RCC_OscConfig+0x60>
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d10b      	bne.n	80040cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d06c      	beq.n	800419a <HAL_RCC_OscConfig+0x12e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d168      	bne.n	800419a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e3f6      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x78>
 80040d6:	4b87      	ldr	r3, [pc, #540]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a86      	ldr	r2, [pc, #536]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e02e      	b.n	8004142 <HAL_RCC_OscConfig+0xd6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10c      	bne.n	8004106 <HAL_RCC_OscConfig+0x9a>
 80040ec:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a80      	ldr	r2, [pc, #512]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b7e      	ldr	r3, [pc, #504]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a7d      	ldr	r2, [pc, #500]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80040fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e01d      	b.n	8004142 <HAL_RCC_OscConfig+0xd6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410e:	d10c      	bne.n	800412a <HAL_RCC_OscConfig+0xbe>
 8004110:	4b78      	ldr	r3, [pc, #480]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a77      	ldr	r2, [pc, #476]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b75      	ldr	r3, [pc, #468]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a74      	ldr	r2, [pc, #464]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e00b      	b.n	8004142 <HAL_RCC_OscConfig+0xd6>
 800412a:	4b72      	ldr	r3, [pc, #456]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a71      	ldr	r2, [pc, #452]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6e      	ldr	r2, [pc, #440]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800413c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004140:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d013      	beq.n	8004172 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fd fb0d 	bl	8001768 <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004152:	f7fd fb09 	bl	8001768 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	; 0x64
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e3aa      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004164:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0xe6>
 8004170:	e014      	b.n	800419c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd faf9 	bl	8001768 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800417a:	f7fd faf5 	bl	8001768 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b64      	cmp	r3, #100	; 0x64
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e396      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800418c:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x10e>
 8004198:	e000      	b.n	800419c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80cb 	beq.w	8004340 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041aa:	4b52      	ldr	r3, [pc, #328]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041b4:	4b4f      	ldr	r3, [pc, #316]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_RCC_OscConfig+0x164>
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b18      	cmp	r3, #24
 80041c4:	d156      	bne.n	8004274 <HAL_RCC_OscConfig+0x208>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d151      	bne.n	8004274 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d0:	4b48      	ldr	r3, [pc, #288]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_OscConfig+0x17c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e368      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041e8:	4b42      	ldr	r3, [pc, #264]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 0219 	bic.w	r2, r3, #25
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	493f      	ldr	r1, [pc, #252]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041fa:	f7fd fab5 	bl	8001768 <HAL_GetTick>
 80041fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004202:	f7fd fab1 	bl	8001768 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e352      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004214:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004220:	f7fd fad2 	bl	80017c8 <HAL_GetREVID>
 8004224:	4603      	mov	r3, r0
 8004226:	f241 0203 	movw	r2, #4099	; 0x1003
 800422a:	4293      	cmp	r3, r2
 800422c:	d817      	bhi.n	800425e <HAL_RCC_OscConfig+0x1f2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d108      	bne.n	8004248 <HAL_RCC_OscConfig+0x1dc>
 8004236:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800423e:	4a2d      	ldr	r2, [pc, #180]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004244:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004246:	e07b      	b.n	8004340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004248:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	4927      	ldr	r1, [pc, #156]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425c:	e070      	b.n	8004340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425e:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	4921      	ldr	r1, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004272:	e065      	b.n	8004340 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d048      	beq.n	800430e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f023 0219 	bic.w	r2, r3, #25
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	491a      	ldr	r1, [pc, #104]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fd fa6b 	bl	8001768 <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004296:	f7fd fa67 	bl	8001768 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e308      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	f7fd fa88 	bl	80017c8 <HAL_GetREVID>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80042be:	4293      	cmp	r3, r2
 80042c0:	d81a      	bhi.n	80042f8 <HAL_RCC_OscConfig+0x28c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d108      	bne.n	80042dc <HAL_RCC_OscConfig+0x270>
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80042d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d8:	6053      	str	r3, [r2, #4]
 80042da:	e031      	b.n	8004340 <HAL_RCC_OscConfig+0x2d4>
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	031b      	lsls	r3, r3, #12
 80042ea:	4902      	ldr	r1, [pc, #8]	; (80042f4 <HAL_RCC_OscConfig+0x288>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	e026      	b.n	8004340 <HAL_RCC_OscConfig+0x2d4>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
 80042f8:	4b9a      	ldr	r3, [pc, #616]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	061b      	lsls	r3, r3, #24
 8004306:	4997      	ldr	r1, [pc, #604]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
 800430c:	e018      	b.n	8004340 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b95      	ldr	r3, [pc, #596]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a94      	ldr	r2, [pc, #592]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd fa25 	bl	8001768 <HAL_GetTick>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004322:	f7fd fa21 	bl	8001768 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e2c2      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004334:	4b8b      	ldr	r3, [pc, #556]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a9 	beq.w	80044a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800434e:	4b85      	ldr	r3, [pc, #532]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004356:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004358:	4b82      	ldr	r3, [pc, #520]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d007      	beq.n	8004374 <HAL_RCC_OscConfig+0x308>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b18      	cmp	r3, #24
 8004368:	d13a      	bne.n	80043e0 <HAL_RCC_OscConfig+0x374>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d135      	bne.n	80043e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004374:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x320>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e296      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800438c:	f7fd fa1c 	bl	80017c8 <HAL_GetREVID>
 8004390:	4603      	mov	r3, r0
 8004392:	f241 0203 	movw	r2, #4099	; 0x1003
 8004396:	4293      	cmp	r3, r2
 8004398:	d817      	bhi.n	80043ca <HAL_RCC_OscConfig+0x35e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d108      	bne.n	80043b4 <HAL_RCC_OscConfig+0x348>
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043aa:	4a6e      	ldr	r2, [pc, #440]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043b2:	e075      	b.n	80044a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043b4:	4b6b      	ldr	r3, [pc, #428]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	069b      	lsls	r3, r3, #26
 80043c2:	4968      	ldr	r1, [pc, #416]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c8:	e06a      	b.n	80044a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043ca:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	4962      	ldr	r1, [pc, #392]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043de:	e05f      	b.n	80044a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d042      	beq.n	800446e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043e8:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5d      	ldr	r2, [pc, #372]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fd f9b8 	bl	8001768 <HAL_GetTick>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043fc:	f7fd f9b4 	bl	8001768 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e255      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800440e:	4b55      	ldr	r3, [pc, #340]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800441a:	f7fd f9d5 	bl	80017c8 <HAL_GetREVID>
 800441e:	4603      	mov	r3, r0
 8004420:	f241 0203 	movw	r2, #4099	; 0x1003
 8004424:	4293      	cmp	r3, r2
 8004426:	d817      	bhi.n	8004458 <HAL_RCC_OscConfig+0x3ec>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	2b20      	cmp	r3, #32
 800442e:	d108      	bne.n	8004442 <HAL_RCC_OscConfig+0x3d6>
 8004430:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004438:	4a4a      	ldr	r2, [pc, #296]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 800443a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800443e:	6053      	str	r3, [r2, #4]
 8004440:	e02e      	b.n	80044a0 <HAL_RCC_OscConfig+0x434>
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	069b      	lsls	r3, r3, #26
 8004450:	4944      	ldr	r1, [pc, #272]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
 8004456:	e023      	b.n	80044a0 <HAL_RCC_OscConfig+0x434>
 8004458:	4b42      	ldr	r3, [pc, #264]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	493f      	ldr	r1, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	60cb      	str	r3, [r1, #12]
 800446c:	e018      	b.n	80044a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3c      	ldr	r2, [pc, #240]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd f975 	bl	8001768 <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004482:	f7fd f971 	bl	8001768 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e212      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004494:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d036      	beq.n	800451a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d019      	beq.n	80044e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80044b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b8:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd f952 	bl	8001768 <HAL_GetTick>
 80044c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fd f94e 	bl	8001768 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1ef      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044da:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80044dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x45c>
 80044e6:	e018      	b.n	800451a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80044ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ec:	4a1d      	ldr	r2, [pc, #116]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd f938 	bl	8001768 <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fd f934 	bl	8001768 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1d5      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b00      	cmp	r3, #0
 8004524:	d039      	beq.n	800459a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01c      	beq.n	8004568 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004538:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800453a:	f7fd f915 	bl	8001768 <HAL_GetTick>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004542:	f7fd f911 	bl	8001768 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1b2      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x4d6>
 8004560:	e01b      	b.n	800459a <HAL_RCC_OscConfig+0x52e>
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004568:	4b9b      	ldr	r3, [pc, #620]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a9a      	ldr	r2, [pc, #616]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800456e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004572:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004574:	f7fd f8f8 	bl	8001768 <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800457c:	f7fd f8f4 	bl	8001768 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e195      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800458e:	4b92      	ldr	r3, [pc, #584]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8081 	beq.w	80046aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045a8:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <HAL_RCC_OscConfig+0x770>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a8b      	ldr	r2, [pc, #556]	; (80047dc <HAL_RCC_OscConfig+0x770>)
 80045ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b4:	f7fd f8d8 	bl	8001768 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045bc:	f7fd f8d4 	bl	8001768 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e175      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ce:	4b83      	ldr	r3, [pc, #524]	; (80047dc <HAL_RCC_OscConfig+0x770>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d106      	bne.n	80045f0 <HAL_RCC_OscConfig+0x584>
 80045e2:	4b7d      	ldr	r3, [pc, #500]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a7c      	ldr	r2, [pc, #496]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
 80045ee:	e02d      	b.n	800464c <HAL_RCC_OscConfig+0x5e0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10c      	bne.n	8004612 <HAL_RCC_OscConfig+0x5a6>
 80045f8:	4b77      	ldr	r3, [pc, #476]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a76      	ldr	r2, [pc, #472]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
 8004604:	4b74      	ldr	r3, [pc, #464]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a73      	ldr	r2, [pc, #460]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800460a:	f023 0304 	bic.w	r3, r3, #4
 800460e:	6713      	str	r3, [r2, #112]	; 0x70
 8004610:	e01c      	b.n	800464c <HAL_RCC_OscConfig+0x5e0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b05      	cmp	r3, #5
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x5c8>
 800461a:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a6e      	ldr	r2, [pc, #440]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	4b6c      	ldr	r3, [pc, #432]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a6b      	ldr	r2, [pc, #428]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	e00b      	b.n	800464c <HAL_RCC_OscConfig+0x5e0>
 8004634:	4b68      	ldr	r3, [pc, #416]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a67      	ldr	r2, [pc, #412]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	4b65      	ldr	r3, [pc, #404]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a64      	ldr	r2, [pc, #400]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd f888 	bl	8001768 <HAL_GetTick>
 8004658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd f884 	bl	8001768 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e123      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004672:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCC_OscConfig+0x5f0>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fd f872 	bl	8001768 <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fd f86e 	bl	8001768 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e10d      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800469e:	4b4e      	ldr	r3, [pc, #312]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ee      	bne.n	8004688 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8102 	beq.w	80048b8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046b4:	4b48      	ldr	r3, [pc, #288]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046bc:	2b18      	cmp	r3, #24
 80046be:	f000 80bd 	beq.w	800483c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	f040 809e 	bne.w	8004808 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b42      	ldr	r3, [pc, #264]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a41      	ldr	r2, [pc, #260]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd f846 	bl	8001768 <HAL_GetTick>
 80046dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd f842 	bl	8001768 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0e3      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <HAL_RCC_OscConfig+0x774>)
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	430a      	orrs	r2, r1
 8004712:	4931      	ldr	r1, [pc, #196]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	628b      	str	r3, [r1, #40]	; 0x28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	3b01      	subs	r3, #1
 800471e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	3b01      	subs	r3, #1
 8004728:	025b      	lsls	r3, r3, #9
 800472a:	b29b      	uxth	r3, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	3b01      	subs	r3, #1
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004748:	4923      	ldr	r1, [pc, #140]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800474a:	4313      	orrs	r3, r2
 800474c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800475a:	4b1f      	ldr	r3, [pc, #124]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800475c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_RCC_OscConfig+0x778>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004766:	00d2      	lsls	r2, r2, #3
 8004768:	491b      	ldr	r1, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800476a:	4313      	orrs	r3, r2
 800476c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800476e:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	f023 020c 	bic.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4917      	ldr	r1, [pc, #92]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f023 0202 	bic.w	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	4912      	ldr	r1, [pc, #72]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fc ffcb 	bl	8001768 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d4:	e011      	b.n	80047fa <HAL_RCC_OscConfig+0x78e>
 80047d6:	bf00      	nop
 80047d8:	58024400 	.word	0x58024400
 80047dc:	58024800 	.word	0x58024800
 80047e0:	fffffc0c 	.word	0xfffffc0c
 80047e4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fc ffbe 	bl	8001768 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e05f      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047fa:	4b32      	ldr	r3, [pc, #200]	; (80048c4 <HAL_RCC_OscConfig+0x858>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x77c>
 8004806:	e057      	b.n	80048b8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <HAL_RCC_OscConfig+0x858>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2d      	ldr	r2, [pc, #180]	; (80048c4 <HAL_RCC_OscConfig+0x858>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fc ffa8 	bl	8001768 <HAL_GetTick>
 8004818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481c:	f7fc ffa4 	bl	8001768 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e045      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482e:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <HAL_RCC_OscConfig+0x858>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x7b0>
 800483a:	e03d      	b.n	80048b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCC_OscConfig+0x858>)
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCC_OscConfig+0x858>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b01      	cmp	r3, #1
 800484e:	d031      	beq.n	80048b4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d12a      	bne.n	80048b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d122      	bne.n	80048b4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d11a      	bne.n	80048b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0a5b      	lsrs	r3, r3, #9
 8004882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d111      	bne.n	80048b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d108      	bne.n	80048b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	0e1b      	lsrs	r3, r3, #24
 80048a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3730      	adds	r7, #48	; 0x30
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	58024400 	.word	0x58024400

080048c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e19c      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048dc:	4b8a      	ldr	r3, [pc, #552]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d910      	bls.n	800490c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b87      	ldr	r3, [pc, #540]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 020f 	bic.w	r2, r3, #15
 80048f2:	4985      	ldr	r1, [pc, #532]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b83      	ldr	r3, [pc, #524]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e184      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d010      	beq.n	800493a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	4b7b      	ldr	r3, [pc, #492]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004924:	429a      	cmp	r2, r3
 8004926:	d908      	bls.n	800493a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004928:	4b78      	ldr	r3, [pc, #480]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	4975      	ldr	r1, [pc, #468]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004936:	4313      	orrs	r3, r2
 8004938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d010      	beq.n	8004968 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	4b70      	ldr	r3, [pc, #448]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004952:	429a      	cmp	r2, r3
 8004954:	d908      	bls.n	8004968 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004956:	4b6d      	ldr	r3, [pc, #436]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	496a      	ldr	r1, [pc, #424]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004964:	4313      	orrs	r3, r2
 8004966:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	4b64      	ldr	r3, [pc, #400]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004980:	429a      	cmp	r2, r3
 8004982:	d908      	bls.n	8004996 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004984:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	495e      	ldr	r1, [pc, #376]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004992:	4313      	orrs	r3, r2
 8004994:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d010      	beq.n	80049c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69da      	ldr	r2, [r3, #28]
 80049a6:	4b59      	ldr	r3, [pc, #356]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d908      	bls.n	80049c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	4953      	ldr	r1, [pc, #332]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d010      	beq.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	429a      	cmp	r2, r3
 80049de:	d908      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f023 020f 	bic.w	r2, r3, #15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4947      	ldr	r1, [pc, #284]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d055      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049fe:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4940      	ldr	r1, [pc, #256]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a18:	4b3c      	ldr	r3, [pc, #240]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d121      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0f6      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a30:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d115      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0ea      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a48:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d109      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0de      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a58:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d6      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f023 0207 	bic.w	r2, r3, #7
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fc fe75 	bl	8001768 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a82:	f7fc fe71 	bl	8001768 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0be      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a98:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d1eb      	bne.n	8004a82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d010      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d208      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f023 020f 	bic.w	r2, r3, #15
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	490e      	ldr	r1, [pc, #56]	; (8004b0c <HAL_RCC_ClockConfig+0x244>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d214      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f023 020f 	bic.w	r2, r3, #15
 8004aee:	4906      	ldr	r1, [pc, #24]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <HAL_RCC_ClockConfig+0x240>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e086      	b.n	8004c16 <HAL_RCC_ClockConfig+0x34e>
 8004b08:	52002000 	.word	0x52002000
 8004b0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d010      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d208      	bcs.n	8004b3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	4939      	ldr	r1, [pc, #228]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d208      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b5a:	4b31      	ldr	r3, [pc, #196]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	492e      	ldr	r1, [pc, #184]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d208      	bcs.n	8004b9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	4922      	ldr	r1, [pc, #136]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d208      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4917      	ldr	r1, [pc, #92]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bc8:	f000 f834 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	4912      	ldr	r1, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x35c>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_RCC_ClockConfig+0x358>)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <HAL_RCC_ClockConfig+0x35c>)
 8004bf0:	5cd3      	ldrb	r3, [r2, r3]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <HAL_RCC_ClockConfig+0x360>)
 8004bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <HAL_RCC_ClockConfig+0x364>)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_RCC_ClockConfig+0x368>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fc fd62 	bl	80016d4 <HAL_InitTick>
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
 8004c24:	0800c090 	.word	0x0800c090
 8004c28:	24000004 	.word	0x24000004
 8004c2c:	24000000 	.word	0x24000000
 8004c30:	24000008 	.word	0x24000008

08004c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	; 0x24
 8004c38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c3a:	4bb3      	ldr	r3, [pc, #716]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c42:	2b18      	cmp	r3, #24
 8004c44:	f200 8155 	bhi.w	8004ef2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004cb5 	.word	0x08004cb5
 8004c54:	08004ef3 	.word	0x08004ef3
 8004c58:	08004ef3 	.word	0x08004ef3
 8004c5c:	08004ef3 	.word	0x08004ef3
 8004c60:	08004ef3 	.word	0x08004ef3
 8004c64:	08004ef3 	.word	0x08004ef3
 8004c68:	08004ef3 	.word	0x08004ef3
 8004c6c:	08004ef3 	.word	0x08004ef3
 8004c70:	08004cdb 	.word	0x08004cdb
 8004c74:	08004ef3 	.word	0x08004ef3
 8004c78:	08004ef3 	.word	0x08004ef3
 8004c7c:	08004ef3 	.word	0x08004ef3
 8004c80:	08004ef3 	.word	0x08004ef3
 8004c84:	08004ef3 	.word	0x08004ef3
 8004c88:	08004ef3 	.word	0x08004ef3
 8004c8c:	08004ef3 	.word	0x08004ef3
 8004c90:	08004ce1 	.word	0x08004ce1
 8004c94:	08004ef3 	.word	0x08004ef3
 8004c98:	08004ef3 	.word	0x08004ef3
 8004c9c:	08004ef3 	.word	0x08004ef3
 8004ca0:	08004ef3 	.word	0x08004ef3
 8004ca4:	08004ef3 	.word	0x08004ef3
 8004ca8:	08004ef3 	.word	0x08004ef3
 8004cac:	08004ef3 	.word	0x08004ef3
 8004cb0:	08004ce7 	.word	0x08004ce7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb4:	4b94      	ldr	r3, [pc, #592]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d009      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cc0:	4b91      	ldr	r3, [pc, #580]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	08db      	lsrs	r3, r3, #3
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	4a90      	ldr	r2, [pc, #576]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004cd2:	e111      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cd4:	4b8d      	ldr	r3, [pc, #564]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cd6:	61bb      	str	r3, [r7, #24]
    break;
 8004cd8:	e10e      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004cda:	4b8d      	ldr	r3, [pc, #564]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cdc:	61bb      	str	r3, [r7, #24]
    break;
 8004cde:	e10b      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ce0:	4b8c      	ldr	r3, [pc, #560]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ce2:	61bb      	str	r3, [r7, #24]
    break;
 8004ce4:	e108      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ce6:	4b88      	ldr	r3, [pc, #544]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004cf0:	4b85      	ldr	r3, [pc, #532]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cfc:	4b82      	ldr	r3, [pc, #520]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d06:	4b80      	ldr	r3, [pc, #512]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	08db      	lsrs	r3, r3, #3
 8004d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80e1 	beq.w	8004eec <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	f000 8083 	beq.w	8004e38 <HAL_RCC_GetSysClockFreq+0x204>
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	f200 80a1 	bhi.w	8004e7c <HAL_RCC_GetSysClockFreq+0x248>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x114>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d056      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d46:	e099      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d48:	4b6f      	ldr	r3, [pc, #444]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d02d      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d54:	4b6c      	ldr	r3, [pc, #432]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	08db      	lsrs	r3, r3, #3
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	ee07 3a90 	vmov	s15, r3
 8004d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7e:	4b62      	ldr	r3, [pc, #392]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004dae:	e087      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc2:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dd6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df2:	e065      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e06:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e36:	e043      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4a:	4b2f      	ldr	r3, [pc, #188]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e7a:	e021      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ebe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ec0:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	0a5b      	lsrs	r3, r3, #9
 8004ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eca:	3301      	adds	r3, #1
 8004ecc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee4:	ee17 3a90 	vmov	r3, s15
 8004ee8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004eea:	e005      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    break;
 8004ef0:	e002      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004ef2:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ef4:	61bb      	str	r3, [r7, #24]
    break;
 8004ef6:	bf00      	nop
  }

  return sysclockfreq;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3724      	adds	r7, #36	; 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	03d09000 	.word	0x03d09000
 8004f10:	003d0900 	.word	0x003d0900
 8004f14:	007a1200 	.word	0x007a1200
 8004f18:	46000000 	.word	0x46000000
 8004f1c:	4c742400 	.word	0x4c742400
 8004f20:	4a742400 	.word	0x4a742400
 8004f24:	4af42400 	.word	0x4af42400

08004f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f2e:	f7ff fe81 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004f32:	4602      	mov	r2, r0
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	490f      	ldr	r1, [pc, #60]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f40:	5ccb      	ldrb	r3, [r1, r3]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f56:	5cd3      	ldrb	r3, [r2, r3]
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f62:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	58024400 	.word	0x58024400
 8004f7c:	0800c090 	.word	0x0800c090
 8004f80:	24000004 	.word	0x24000004
 8004f84:	24000000 	.word	0x24000000

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f8c:	f7ff ffcc 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4904      	ldr	r1, [pc, #16]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	0800c090 	.word	0x0800c090

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fb8:	f7ff ffb6 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4904      	ldr	r1, [pc, #16]	; (8004fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	0800c090 	.word	0x0800c090

08004fe0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fec:	2300      	movs	r3, #0
 8004fee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d03f      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005004:	d02a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005006:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800500a:	d824      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800500c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005010:	d018      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005016:	d81e      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800501c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005020:	d007      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005022:	e018      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005024:	4ba3      	ldr	r3, [pc, #652]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	4aa2      	ldr	r2, [pc, #648]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800502a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005030:	e015      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	2102      	movs	r1, #2
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fff9 	bl	8007030 <RCCEx_PLL2_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005042:	e00c      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3324      	adds	r3, #36	; 0x24
 8005048:	2102      	movs	r1, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f002 f8a2 	bl	8007194 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005054:	e003      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
      break;
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800505c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005064:	4b93      	ldr	r3, [pc, #588]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005070:	4990      	ldr	r1, [pc, #576]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	650b      	str	r3, [r1, #80]	; 0x50
 8005076:	e001      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d03d      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508c:	2b04      	cmp	r3, #4
 800508e:	d826      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050ad 	.word	0x080050ad
 800509c:	080050bb 	.word	0x080050bb
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050e5 	.word	0x080050e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ac:	4b81      	ldr	r3, [pc, #516]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4a80      	ldr	r2, [pc, #512]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050b8:	e015      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 ffb5 	bl	8007030 <RCCEx_PLL2_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ca:	e00c      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3324      	adds	r3, #36	; 0x24
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f002 f85e 	bl	8007194 <RCCEx_PLL3_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050dc:	e003      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
      break;
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80050e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ec:	4b71      	ldr	r3, [pc, #452]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f0:	f023 0207 	bic.w	r2, r3, #7
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	496e      	ldr	r1, [pc, #440]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	650b      	str	r3, [r1, #80]	; 0x50
 80050fe:	e001      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510c:	2b00      	cmp	r3, #0
 800510e:	d042      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005118:	d02b      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800511a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511e:	d825      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005120:	2bc0      	cmp	r3, #192	; 0xc0
 8005122:	d028      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005124:	2bc0      	cmp	r3, #192	; 0xc0
 8005126:	d821      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005128:	2b80      	cmp	r3, #128	; 0x80
 800512a:	d016      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d81d      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d007      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005138:	e018      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513a:	4b5e      	ldr	r3, [pc, #376]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4a5d      	ldr	r2, [pc, #372]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005146:	e017      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f001 ff6e 	bl	8007030 <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005158:	e00e      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f002 f817 	bl	8007194 <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800516a:	e005      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
      break;
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800517e:	4b4d      	ldr	r3, [pc, #308]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	494a      	ldr	r1, [pc, #296]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	650b      	str	r3, [r1, #80]	; 0x50
 8005190:	e001      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d049      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051ac:	d030      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80051ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051b2:	d82a      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051b8:	d02c      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80051ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80051be:	d824      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051c4:	d018      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80051c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ca:	d81e      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051d4:	d007      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80051d6:	e018      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d8:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a35      	ldr	r2, [pc, #212]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051e4:	e017      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	2100      	movs	r1, #0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 ff1f 	bl	8007030 <RCCEx_PLL2_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051f6:	e00e      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3324      	adds	r3, #36	; 0x24
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 ffc8 	bl	8007194 <RCCEx_PLL3_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005208:	e005      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800522a:	4922      	ldr	r1, [pc, #136]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	658b      	str	r3, [r1, #88]	; 0x58
 8005230:	e001      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523e:	2b00      	cmp	r3, #0
 8005240:	d04b      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800524c:	d030      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800524e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005252:	d82a      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005254:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005258:	d02e      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800525a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800525e:	d824      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005260:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005264:	d018      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800526a:	d81e      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005274:	d007      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005276:	e018      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005278:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800527e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005284:	e019      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fecf 	bl	8007030 <RCCEx_PLL2_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005296:	e010      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3324      	adds	r3, #36	; 0x24
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 ff78 	bl	8007194 <RCCEx_PLL3_Config>
 80052a4:	4603      	mov	r3, r0
 80052a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052a8:	e007      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
      break;
 80052ae:	e004      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80052b0:	bf00      	nop
 80052b2:	e002      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80052b4:	58024400 	.word	0x58024400
      break;
 80052b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80052c0:	4b99      	ldr	r3, [pc, #612]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052ce:	4996      	ldr	r1, [pc, #600]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	658b      	str	r3, [r1, #88]	; 0x58
 80052d4:	e001      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d032      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ea:	2b30      	cmp	r3, #48	; 0x30
 80052ec:	d01c      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80052ee:	2b30      	cmp	r3, #48	; 0x30
 80052f0:	d817      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d00c      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d813      	bhi.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d016      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d10f      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005302:	4b89      	ldr	r3, [pc, #548]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4a88      	ldr	r2, [pc, #544]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800530e:	e00e      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	2102      	movs	r1, #2
 8005316:	4618      	mov	r0, r3
 8005318:	f001 fe8a 	bl	8007030 <RCCEx_PLL2_Config>
 800531c:	4603      	mov	r3, r0
 800531e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005320:	e005      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
      break;
 8005326:	e002      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800532c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005334:	4b7c      	ldr	r3, [pc, #496]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005340:	4979      	ldr	r1, [pc, #484]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005342:	4313      	orrs	r3, r2
 8005344:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005346:	e001      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d047      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005360:	d030      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005366:	d82a      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800536c:	d02c      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800536e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005372:	d824      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005378:	d018      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800537e:	d81e      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d007      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800538a:	e018      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a65      	ldr	r2, [pc, #404]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005398:	e017      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fe45 	bl	8007030 <RCCEx_PLL2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053aa:	e00e      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3324      	adds	r3, #36	; 0x24
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 feee 	bl	8007194 <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80053bc:	e005      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80053c4:	bf00      	nop
 80053c6:	e000      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80053c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053d0:	4b55      	ldr	r3, [pc, #340]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053dc:	4952      	ldr	r1, [pc, #328]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	650b      	str	r3, [r1, #80]	; 0x50
 80053e2:	e001      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d049      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053fc:	d02e      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80053fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005402:	d828      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005408:	d02a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800540a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800540e:	d822      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005414:	d026      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800541a:	d81c      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800541c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005420:	d010      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005426:	d816      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01d      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005430:	d111      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f001 fdf9 	bl	8007030 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005442:	e012      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f001 fea2 	bl	8007194 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005454:	e009      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	e006      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800545c:	bf00      	nop
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005460:	bf00      	nop
 8005462:	e002      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005464:	bf00      	nop
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005470:	4b2d      	ldr	r3, [pc, #180]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005474:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547c:	492a      	ldr	r1, [pc, #168]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800547e:	4313      	orrs	r3, r2
 8005480:	650b      	str	r3, [r1, #80]	; 0x50
 8005482:	e001      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d04d      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800549a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549e:	d02e      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80054a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054a4:	d828      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d02a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d822      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054b6:	d026      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80054b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054bc:	d81c      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c2:	d010      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c8:	d816      	bhi.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01d      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80054ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d2:	d111      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 fda8 	bl	8007030 <RCCEx_PLL2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054e4:	e012      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3324      	adds	r3, #36	; 0x24
 80054ea:	2101      	movs	r1, #1
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 fe51 	bl	8007194 <RCCEx_PLL3_Config>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054f6:	e009      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      break;
 80054fc:	e006      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80054fe:	bf00      	nop
 8005500:	e004      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800550a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005516:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005520:	4901      	ldr	r1, [pc, #4]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005522:	4313      	orrs	r3, r2
 8005524:	658b      	str	r3, [r1, #88]	; 0x58
 8005526:	e003      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d00e      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554a:	d814      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d015      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005554:	d10f      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005556:	4baf      	ldr	r3, [pc, #700]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4aae      	ldr	r2, [pc, #696]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005562:	e00c      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fd60 	bl	8007030 <RCCEx_PLL2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
      break;
 800557a:	e000      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800557c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005584:	4ba3      	ldr	r3, [pc, #652]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005588:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	49a0      	ldr	r1, [pc, #640]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005592:	4313      	orrs	r3, r2
 8005594:	650b      	str	r3, [r1, #80]	; 0x50
 8005596:	e001      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d032      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d81b      	bhi.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055c9 	.word	0x080055c9
 80055c0:	080055d7 	.word	0x080055d7
 80055c4:	080055ef 	.word	0x080055ef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c8:	4b92      	ldr	r3, [pc, #584]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	4a91      	ldr	r2, [pc, #580]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055d4:	e00c      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	2102      	movs	r1, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 fd27 	bl	8007030 <RCCEx_PLL2_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
      break;
 80055ec:	e000      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80055ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055f6:	4b87      	ldr	r3, [pc, #540]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	4984      	ldr	r1, [pc, #528]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005604:	4313      	orrs	r3, r2
 8005606:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005608:	e001      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8086 	beq.w	8005728 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561c:	4b7e      	ldr	r3, [pc, #504]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7d      	ldr	r2, [pc, #500]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005628:	f7fc f89e 	bl	8001768 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800562e:	e009      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005630:	f7fc f89a 	bl	8001768 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	; 0x64
 800563c:	d902      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	75fb      	strb	r3, [r7, #23]
        break;
 8005642:	e005      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005644:	4b74      	ldr	r3, [pc, #464]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ef      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d166      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005656:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005660:	4053      	eors	r3, r2
 8005662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005666:	2b00      	cmp	r3, #0
 8005668:	d013      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800566a:	4b6a      	ldr	r3, [pc, #424]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005674:	4b67      	ldr	r3, [pc, #412]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a66      	ldr	r2, [pc, #408]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800567a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005680:	4b64      	ldr	r3, [pc, #400]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a63      	ldr	r2, [pc, #396]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800568c:	4a61      	ldr	r2, [pc, #388]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569c:	d115      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fc f863 	bl	8001768 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a4:	e00b      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fc f85f 	bl	8001768 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d902      	bls.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	75fb      	strb	r3, [r7, #23]
            break;
 80056bc:	e005      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056be:	4b55      	ldr	r3, [pc, #340]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0ed      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d126      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056de:	d10d      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80056e0:	4b4c      	ldr	r3, [pc, #304]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ee:	0919      	lsrs	r1, r3, #4
 80056f0:	4b4a      	ldr	r3, [pc, #296]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80056f2:	400b      	ands	r3, r1
 80056f4:	4947      	ldr	r1, [pc, #284]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	610b      	str	r3, [r1, #16]
 80056fa:	e005      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80056fc:	4b45      	ldr	r3, [pc, #276]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	4a44      	ldr	r2, [pc, #272]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005702:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005706:	6113      	str	r3, [r2, #16]
 8005708:	4b42      	ldr	r3, [pc, #264]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800570a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005716:	493f      	ldr	r1, [pc, #252]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005718:	4313      	orrs	r3, r2
 800571a:	670b      	str	r3, [r1, #112]	; 0x70
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	75bb      	strb	r3, [r7, #22]
 8005722:	e001      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8085 	beq.w	8005840 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573a:	2b28      	cmp	r3, #40	; 0x28
 800573c:	d866      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005821 	.word	0x08005821
 8005748:	0800580d 	.word	0x0800580d
 800574c:	0800580d 	.word	0x0800580d
 8005750:	0800580d 	.word	0x0800580d
 8005754:	0800580d 	.word	0x0800580d
 8005758:	0800580d 	.word	0x0800580d
 800575c:	0800580d 	.word	0x0800580d
 8005760:	0800580d 	.word	0x0800580d
 8005764:	080057e9 	.word	0x080057e9
 8005768:	0800580d 	.word	0x0800580d
 800576c:	0800580d 	.word	0x0800580d
 8005770:	0800580d 	.word	0x0800580d
 8005774:	0800580d 	.word	0x0800580d
 8005778:	0800580d 	.word	0x0800580d
 800577c:	0800580d 	.word	0x0800580d
 8005780:	0800580d 	.word	0x0800580d
 8005784:	080057fb 	.word	0x080057fb
 8005788:	0800580d 	.word	0x0800580d
 800578c:	0800580d 	.word	0x0800580d
 8005790:	0800580d 	.word	0x0800580d
 8005794:	0800580d 	.word	0x0800580d
 8005798:	0800580d 	.word	0x0800580d
 800579c:	0800580d 	.word	0x0800580d
 80057a0:	0800580d 	.word	0x0800580d
 80057a4:	08005821 	.word	0x08005821
 80057a8:	0800580d 	.word	0x0800580d
 80057ac:	0800580d 	.word	0x0800580d
 80057b0:	0800580d 	.word	0x0800580d
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	0800580d 	.word	0x0800580d
 80057bc:	0800580d 	.word	0x0800580d
 80057c0:	0800580d 	.word	0x0800580d
 80057c4:	08005821 	.word	0x08005821
 80057c8:	0800580d 	.word	0x0800580d
 80057cc:	0800580d 	.word	0x0800580d
 80057d0:	0800580d 	.word	0x0800580d
 80057d4:	0800580d 	.word	0x0800580d
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	0800580d 	.word	0x0800580d
 80057e0:	0800580d 	.word	0x0800580d
 80057e4:	08005821 	.word	0x08005821
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	2101      	movs	r1, #1
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fc1e 	bl	8007030 <RCCEx_PLL2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057f8:	e013      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fcc7 	bl	8007194 <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800580a:	e00a      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	e007      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
 8005818:	58024800 	.word	0x58024800
 800581c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005828:	4b96      	ldr	r3, [pc, #600]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800582a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005834:	4993      	ldr	r1, [pc, #588]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	654b      	str	r3, [r1, #84]	; 0x54
 800583a:	e001      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d038      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	2b05      	cmp	r3, #5
 8005852:	d821      	bhi.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005854:	a201      	add	r2, pc, #4	; (adr r2, 800585c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585a:	bf00      	nop
 800585c:	0800589f 	.word	0x0800589f
 8005860:	08005875 	.word	0x08005875
 8005864:	08005887 	.word	0x08005887
 8005868:	0800589f 	.word	0x0800589f
 800586c:	0800589f 	.word	0x0800589f
 8005870:	0800589f 	.word	0x0800589f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3304      	adds	r3, #4
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fbd8 	bl	8007030 <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005884:	e00c      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3324      	adds	r3, #36	; 0x24
 800588a:	2101      	movs	r1, #1
 800588c:	4618      	mov	r0, r3
 800588e:	f001 fc81 	bl	8007194 <RCCEx_PLL3_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	75fb      	strb	r3, [r7, #23]
      break;
 800589c:	e000      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800589e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058a6:	4b77      	ldr	r3, [pc, #476]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f023 0207 	bic.w	r2, r3, #7
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b2:	4974      	ldr	r1, [pc, #464]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	654b      	str	r3, [r1, #84]	; 0x54
 80058b8:	e001      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d821      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	0800591f 	.word	0x0800591f
 80058e0:	080058f5 	.word	0x080058f5
 80058e4:	08005907 	.word	0x08005907
 80058e8:	0800591f 	.word	0x0800591f
 80058ec:	0800591f 	.word	0x0800591f
 80058f0:	0800591f 	.word	0x0800591f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fb98 	bl	8007030 <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005904:	e00c      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3324      	adds	r3, #36	; 0x24
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f001 fc41 	bl	8007194 <RCCEx_PLL3_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	75fb      	strb	r3, [r7, #23]
      break;
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800591e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005926:	4b57      	ldr	r3, [pc, #348]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	f023 0207 	bic.w	r2, r3, #7
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005934:	4953      	ldr	r1, [pc, #332]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	658b      	str	r3, [r1, #88]	; 0x58
 800593a:	e001      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d04b      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005956:	d02e      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800595c:	d828      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d02a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005968:	d822      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800596a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800596e:	d026      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005974:	d81c      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800597a:	d010      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800597c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005980:	d816      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01d      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800598a:	d111      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fb4c 	bl	8007030 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800599c:	e012      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3324      	adds	r3, #36	; 0x24
 80059a2:	2102      	movs	r1, #2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fbf5 	bl	8007194 <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80059ae:	e009      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
      break;
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059b6:	bf00      	nop
 80059b8:	e004      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059ba:	bf00      	nop
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80059c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ca:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d8:	492a      	ldr	r1, [pc, #168]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	654b      	str	r3, [r1, #84]	; 0x54
 80059de:	e001      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d04d      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059fa:	d02e      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80059fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a00:	d828      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	d02a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d822      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a12:	d026      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005a14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a18:	d81c      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1e:	d010      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	d816      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01d      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2e:	d111      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f001 fafa 	bl	8007030 <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a40:	e012      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3324      	adds	r3, #36	; 0x24
 8005a46:	2102      	movs	r1, #2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 fba3 	bl	8007194 <RCCEx_PLL3_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a52:	e009      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
      break;
 8005a58:	e006      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a7c:	4901      	ldr	r1, [pc, #4]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	658b      	str	r3, [r1, #88]	; 0x58
 8005a82:	e003      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d04b      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005aa2:	d02e      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005aa4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005aa8:	d828      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aae:	d02a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab4:	d822      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ab6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005aba:	d026      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005abc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ac0:	d81c      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac6:	d010      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005acc:	d816      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01d      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d111      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	2100      	movs	r1, #0
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 faa6 	bl	8007030 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ae8:	e012      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	2102      	movs	r1, #2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fb4f 	bl	8007194 <RCCEx_PLL3_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005afa:	e009      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	75fb      	strb	r3, [r7, #23]
      break;
 8005b00:	e006      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b16:	4b9d      	ldr	r3, [pc, #628]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b24:	4999      	ldr	r1, [pc, #612]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	658b      	str	r3, [r1, #88]	; 0x58
 8005b2a:	e001      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b46:	d10a      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3324      	adds	r3, #36	; 0x24
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fb20 	bl	8007194 <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b5e:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b6c:	4987      	ldr	r1, [pc, #540]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b88:	d10a      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3324      	adds	r3, #36	; 0x24
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 faff 	bl	8007194 <RCCEx_PLL3_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ba0:	4b7a      	ldr	r3, [pc, #488]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bae:	4977      	ldr	r1, [pc, #476]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d034      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bca:	d01d      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd0:	d817      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bda:	d009      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005bdc:	e011      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2100      	movs	r1, #0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f001 fa23 	bl	8007030 <RCCEx_PLL2_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005bee:	e00c      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3324      	adds	r3, #36	; 0x24
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 facc 	bl	8007194 <RCCEx_PLL3_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c00:	e003      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
      break;
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c10:	4b5e      	ldr	r3, [pc, #376]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c1e:	495b      	ldr	r1, [pc, #364]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	658b      	str	r3, [r1, #88]	; 0x58
 8005c24:	e001      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d033      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c40:	d01c      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c46:	d816      	bhi.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c52:	d007      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005c54:	e00f      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	4a4c      	ldr	r2, [pc, #304]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c62:	e00c      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3324      	adds	r3, #36	; 0x24
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 fa92 	bl	8007194 <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c74:	e003      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c84:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c92:	493e      	ldr	r1, [pc, #248]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	654b      	str	r3, [r1, #84]	; 0x54
 8005c98:	e001      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
 8005c9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d029      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb6:	d007      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005cb8:	e00f      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cba:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a33      	ldr	r2, [pc, #204]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 f9ae 	bl	8007030 <RCCEx_PLL2_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ce6:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf2:	4926      	ldr	r1, [pc, #152]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cf8:	e001      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3324      	adds	r3, #36	; 0x24
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fa3f 	bl	8007194 <RCCEx_PLL3_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d033      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d34:	d017      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3a:	d811      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d40:	d013      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d46:	d80b      	bhi.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d50:	d106      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	4a0d      	ldr	r2, [pc, #52]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005d5e:	e007      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	75fb      	strb	r3, [r7, #23]
      break;
 8005d64:	e004      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d66:	bf00      	nop
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10c      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d82:	4902      	ldr	r1, [pc, #8]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	654b      	str	r3, [r1, #84]	; 0x54
 8005d88:	e004      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	492e      	ldr	r1, [pc, #184]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dcc:	4926      	ldr	r1, [pc, #152]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dde:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dea:	491f      	ldr	r1, [pc, #124]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00d      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e06:	6113      	str	r3, [r2, #16]
 8005e08:	4b17      	ldr	r3, [pc, #92]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e12:	4915      	ldr	r1, [pc, #84]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da08      	bge.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2c:	490e      	ldr	r1, [pc, #56]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	4906      	ldr	r1, [pc, #24]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005e52:	7dbb      	ldrb	r3, [r7, #22]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400

08005e6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b090      	sub	sp, #64	; 0x40
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7a:	f040 8095 	bne.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005e7e:	4b97      	ldr	r3, [pc, #604]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	f200 8088 	bhi.w	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ead 	.word	0x08005ead
 8005e9c:	08005ed5 	.word	0x08005ed5
 8005ea0:	08005efd 	.word	0x08005efd
 8005ea4:	08005f99 	.word	0x08005f99
 8005ea8:	08005f25 	.word	0x08005f25
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eac:	4b8b      	ldr	r3, [pc, #556]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eb8:	d108      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 ff64 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ec8:	f000 bc94 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed0:	f000 bc90 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ed4:	4b81      	ldr	r3, [pc, #516]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee0:	d108      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ee2:	f107 0318 	add.w	r3, r7, #24
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fca8 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ef0:	f000 bc80 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ef8:	f000 bc7c 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005efc:	4b77      	ldr	r3, [pc, #476]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f08:	d108      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fde8 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f18:	f000 bc6c 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f20:	f000 bc68 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f24:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f2e:	4b6b      	ldr	r3, [pc, #428]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d10c      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f40:	4b66      	ldr	r3, [pc, #408]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	08db      	lsrs	r3, r3, #3
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	4a65      	ldr	r2, [pc, #404]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f52:	e01f      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f54:	4b61      	ldr	r3, [pc, #388]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f60:	d106      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f68:	d102      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f6a:	4b5e      	ldr	r3, [pc, #376]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f6e:	e011      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f70:	4b5a      	ldr	r3, [pc, #360]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f7c:	d106      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f84:	d102      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f86:	4b58      	ldr	r3, [pc, #352]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	e003      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005f90:	f000 bc30 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f94:	f000 bc2e 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f98:	4b54      	ldr	r3, [pc, #336]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f9c:	f000 bc2a 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa4:	f000 bc26 	b.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fae:	f040 809f 	bne.w	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc2:	d04d      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	f200 8084 	bhi.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd2:	d07d      	beq.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd8:	d87d      	bhi.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d02d      	beq.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	d877      	bhi.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d012      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005ff2:	e070      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ff4:	4b39      	ldr	r3, [pc, #228]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006000:	d107      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fec0 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006010:	e3f0      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006016:	e3ed      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006024:	d107      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006026:	f107 0318 	add.w	r3, r7, #24
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fc06 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006034:	e3de      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800603a:	e3db      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800603c:	4b27      	ldr	r3, [pc, #156]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006048:	d107      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800604a:	f107 030c 	add.w	r3, r7, #12
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fd48 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006058:	e3cc      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800605e:	e3c9      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006060:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006068:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800606a:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d10c      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800607c:	4b17      	ldr	r3, [pc, #92]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	08db      	lsrs	r3, r3, #3
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800608e:	e01e      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609c:	d106      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800609e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a4:	d102      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80060a6:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060aa:	e010      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060b8:	d106      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c0:	d102      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80060c2:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c6:	e002      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060cc:	e392      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80060ce:	e391      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d4:	e38e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060da:	e38b      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80060dc:	58024400 	.word	0x58024400
 80060e0:	03d09000 	.word	0x03d09000
 80060e4:	003d0900 	.word	0x003d0900
 80060e8:	007a1200 	.word	0x007a1200
 80060ec:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f6:	f040 809c 	bne.w	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80060fa:	4b9d      	ldr	r3, [pc, #628]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80060fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006102:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800610a:	d054      	beq.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006112:	f200 808b 	bhi.w	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800611c:	f000 8083 	beq.w	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006126:	f200 8081 	bhi.w	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006130:	d02f      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006138:	d878      	bhi.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006146:	d012      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006148:	e070      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800614a:	4b89      	ldr	r3, [pc, #548]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006156:	d107      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fe15 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006166:	e345      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800616c:	e342      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800616e:	4b80      	ldr	r3, [pc, #512]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800617a:	d107      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617c:	f107 0318 	add.w	r3, r7, #24
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fb5b 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800618a:	e333      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006190:	e330      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006192:	4b77      	ldr	r3, [pc, #476]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800619a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619e:	d107      	bne.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fc9d 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061ae:	e321      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061b4:	e31e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80061b6:	4b6e      	ldr	r3, [pc, #440]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061be:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061c0:	4b6b      	ldr	r3, [pc, #428]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	d10c      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061d2:	4b67      	ldr	r3, [pc, #412]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	4a65      	ldr	r2, [pc, #404]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e4:	e01e      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061e6:	4b62      	ldr	r3, [pc, #392]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f2:	d106      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80061f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fa:	d102      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80061fc:	4b5e      	ldr	r3, [pc, #376]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006200:	e010      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006202:	4b5b      	ldr	r3, [pc, #364]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800620e:	d106      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006216:	d102      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006218:	4b58      	ldr	r3, [pc, #352]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	e002      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006222:	e2e7      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006224:	e2e6      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006226:	4b56      	ldr	r3, [pc, #344]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800622a:	e2e3      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006230:	e2e0      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006238:	f040 80a7 	bne.w	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800623c:	4b4c      	ldr	r3, [pc, #304]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006244:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800624c:	d055      	beq.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006254:	f200 8096 	bhi.w	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800625e:	f000 8084 	beq.w	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006268:	f200 808c 	bhi.w	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006272:	d030      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800627a:	f200 8083 	bhi.w	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800628a:	d012      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800628c:	e07a      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800628e:	4b38      	ldr	r3, [pc, #224]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800629a:	d107      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800629c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fd73 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062aa:	e2a3      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062b0:	e2a0      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062b2:	4b2f      	ldr	r3, [pc, #188]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062be:	d107      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c0:	f107 0318 	add.w	r3, r7, #24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fab9 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80062ce:	e291      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062d4:	e28e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062d6:	4b26      	ldr	r3, [pc, #152]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e2:	d107      	bne.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fbfb 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062f2:	e27f      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062f8:	e27c      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062fa:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006302:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d10c      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	08db      	lsrs	r3, r3, #3
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006328:	e01e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006336:	d106      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800633e:	d102      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006344:	e010      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006352:	d106      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635a:	d102      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006360:	e002      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006366:	e245      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006368:	e244      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800636e:	e241      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006370:	58024400 	.word	0x58024400
 8006374:	03d09000 	.word	0x03d09000
 8006378:	003d0900 	.word	0x003d0900
 800637c:	007a1200 	.word	0x007a1200
 8006380:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006388:	e234      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	f040 809c 	bne.w	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006394:	4b9b      	ldr	r3, [pc, #620]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a4:	d054      	beq.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ac:	f200 808b 	bhi.w	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b6:	f000 8083 	beq.w	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063c0:	f200 8081 	bhi.w	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ca:	d02f      	beq.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d2:	d878      	bhi.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e0:	d012      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80063e2:	e070      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063e4:	4b87      	ldr	r3, [pc, #540]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063f0:	d107      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fcc8 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006400:	e1f8      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006406:	e1f5      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006408:	4b7e      	ldr	r3, [pc, #504]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006414:	d107      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006416:	f107 0318 	add.w	r3, r7, #24
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fa0e 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006424:	e1e6      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800642a:	e1e3      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800642c:	4b75      	ldr	r3, [pc, #468]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006438:	d107      	bne.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800643a:	f107 030c 	add.w	r3, r7, #12
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fb50 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006448:	e1d4      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800644e:	e1d1      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006450:	4b6c      	ldr	r3, [pc, #432]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006458:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800645a:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b04      	cmp	r3, #4
 8006464:	d10c      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800646c:	4b65      	ldr	r3, [pc, #404]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	08db      	lsrs	r3, r3, #3
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	4a64      	ldr	r2, [pc, #400]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647e:	e01e      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006480:	4b60      	ldr	r3, [pc, #384]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648c:	d106      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006494:	d102      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006496:	4b5d      	ldr	r3, [pc, #372]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649a:	e010      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800649c:	4b59      	ldr	r3, [pc, #356]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064a8:	d106      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064b0:	d102      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064b2:	4b57      	ldr	r3, [pc, #348]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b6:	e002      	b.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064bc:	e19a      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80064be:	e199      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80064c0:	4b54      	ldr	r3, [pc, #336]	; (8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064c4:	e196      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064ca:	e193      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064d2:	d173      	bne.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80064d4:	4b4b      	ldr	r3, [pc, #300]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e4:	d02f      	beq.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ec:	d863      	bhi.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fa:	d012      	beq.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80064fc:	e05b      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064fe:	4b41      	ldr	r3, [pc, #260]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800650a:	d107      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800650c:	f107 0318 	add.w	r3, r7, #24
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f993 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800651a:	e16b      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006520:	e168      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800652a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652e:	d107      	bne.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fad5 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800653e:	e159      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006544:	e156      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006546:	4b2f      	ldr	r3, [pc, #188]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800654e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006550:	4b2c      	ldr	r3, [pc, #176]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b04      	cmp	r3, #4
 800655a:	d10c      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006562:	4b28      	ldr	r3, [pc, #160]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800656e:	fa22 f303 	lsr.w	r3, r2, r3
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	e01e      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006576:	4b23      	ldr	r3, [pc, #140]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d106      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800658a:	d102      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	e010      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800659e:	d106      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a6:	d102      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065a8:	4b19      	ldr	r3, [pc, #100]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ac:	e002      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065b2:	e11f      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065b4:	e11e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ba:	e11b      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c2:	d13e      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d004      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	d01d      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80065dc:	e02e      	b.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ea:	d107      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fbcb 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065fa:	e0fb      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006600:	e0f8      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	03d09000 	.word	0x03d09000
 800660c:	003d0900 	.word	0x003d0900
 8006610:	007a1200 	.word	0x007a1200
 8006614:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006618:	4b79      	ldr	r3, [pc, #484]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006624:	d107      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006626:	f107 0318 	add.w	r3, r7, #24
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f906 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006634:	e0de      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800663a:	e0db      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006640:	e0d8      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006648:	f040 8085 	bne.w	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800664c:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800665c:	d06b      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006664:	d874      	bhi.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d056      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d86c      	bhi.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800667c:	d03b      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006684:	d864      	bhi.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800668c:	d021      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006694:	d85c      	bhi.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a2:	d004      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80066a4:	e054      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80066a6:	f000 f8b3 	bl	8006810 <HAL_RCCEx_GetD3PCLK1Freq>
 80066aa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80066ac:	e0a2      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066ae:	4b54      	ldr	r3, [pc, #336]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ba:	d107      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066bc:	f107 0318 	add.w	r3, r7, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f8bb 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066ca:	e093      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d0:	e090      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066d2:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066de:	d107      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066e0:	f107 030c 	add.w	r3, r7, #12
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f9fd 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066ee:	e081      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f4:	e07e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066f6:	4b42      	ldr	r3, [pc, #264]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d109      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006702:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	08db      	lsrs	r3, r3, #3
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	4a3d      	ldr	r2, [pc, #244]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006714:	e06e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800671a:	e06b      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800671c:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006728:	d102      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800672a:	4b37      	ldr	r3, [pc, #220]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800672e:	e061      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006734:	e05e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006736:	4b32      	ldr	r3, [pc, #200]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006742:	d102      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006744:	4b31      	ldr	r3, [pc, #196]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006748:	e054      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800674a:	2300      	movs	r3, #0
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800674e:	e051      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006754:	e04e      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	d148      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800675e:	4b28      	ldr	r3, [pc, #160]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676e:	d02a      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006776:	d838      	bhi.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006784:	d00d      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006786:	e030      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006794:	d102      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800679a:	e02b      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a0:	e028      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fae9 	bl	8006d8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067be:	e019      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c4:	e016      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d2:	d107      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d4:	f107 0318 	add.w	r3, r7, #24
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 f82f 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067e2:	e007      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ee:	e001      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3740      	adds	r7, #64	; 0x40
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	58024400 	.word	0x58024400
 8006804:	03d09000 	.word	0x03d09000
 8006808:	003d0900 	.word	0x003d0900
 800680c:	007a1200 	.word	0x007a1200

08006810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006814:	f7fe fb88 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8006818:	4602      	mov	r2, r0
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	091b      	lsrs	r3, r3, #4
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	4904      	ldr	r1, [pc, #16]	; (8006838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006826:	5ccb      	ldrb	r3, [r1, r3]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006830:	4618      	mov	r0, r3
 8006832:	bd80      	pop	{r7, pc}
 8006834:	58024400 	.word	0x58024400
 8006838:	0800c090 	.word	0x0800c090

0800683c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800683c:	b480      	push	{r7}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006844:	4ba1      	ldr	r3, [pc, #644]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800684e:	4b9f      	ldr	r3, [pc, #636]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	0b1b      	lsrs	r3, r3, #12
 8006854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800685a:	4b9c      	ldr	r3, [pc, #624]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006866:	4b99      	ldr	r3, [pc, #612]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	08db      	lsrs	r3, r3, #3
 800686c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8111 	beq.w	8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b02      	cmp	r3, #2
 800688e:	f000 8083 	beq.w	8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b02      	cmp	r3, #2
 8006896:	f200 80a1 	bhi.w	80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d056      	beq.n	8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068a6:	e099      	b.n	80069dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02d      	beq.n	8006910 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068b4:	4b85      	ldr	r3, [pc, #532]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	08db      	lsrs	r3, r3, #3
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	4a84      	ldr	r2, [pc, #528]	; (8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80068c0:	fa22 f303 	lsr.w	r3, r2, r3
 80068c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068de:	4b7b      	ldr	r3, [pc, #492]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800690e:	e087      	b.n	8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800691e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006922:	4b6a      	ldr	r3, [pc, #424]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006932:	ed97 6a03 	vldr	s12, [r7, #12]
 8006936:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800693a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006952:	e065      	b.n	8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006966:	4b59      	ldr	r3, [pc, #356]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006976:	ed97 6a03 	vldr	s12, [r7, #12]
 800697a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800697e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800698a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006992:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006996:	e043      	b.n	8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069aa:	4b48      	ldr	r3, [pc, #288]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80069be:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069da:	e021      	b.n	8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ee:	4b37      	ldr	r3, [pc, #220]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a20:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	0a5b      	lsrs	r3, r3, #9
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a46:	ee17 2a90 	vmov	r2, s15
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	0c1b      	lsrs	r3, r3, #16
 8006a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a74:	ee17 2a90 	vmov	r2, s15
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a7c:	4b13      	ldr	r3, [pc, #76]	; (8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	0e1b      	lsrs	r3, r3, #24
 8006a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa2:	ee17 2a90 	vmov	r2, s15
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006aaa:	e008      	b.n	8006abe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
}
 8006abe:	bf00      	nop
 8006ac0:	3724      	adds	r7, #36	; 0x24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	03d09000 	.word	0x03d09000
 8006ad4:	46000000 	.word	0x46000000
 8006ad8:	4c742400 	.word	0x4c742400
 8006adc:	4a742400 	.word	0x4a742400
 8006ae0:	4af42400 	.word	0x4af42400

08006ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aec:	4ba1      	ldr	r3, [pc, #644]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006af6:	4b9f      	ldr	r3, [pc, #636]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	0d1b      	lsrs	r3, r3, #20
 8006afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b02:	4b9c      	ldr	r3, [pc, #624]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b0e:	4b99      	ldr	r3, [pc, #612]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	08db      	lsrs	r3, r3, #3
 8006b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8111 	beq.w	8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	f000 8083 	beq.w	8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	f200 80a1 	bhi.w	8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d056      	beq.n	8006bfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b4e:	e099      	b.n	8006c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b50:	4b88      	ldr	r3, [pc, #544]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d02d      	beq.n	8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b5c:	4b85      	ldr	r3, [pc, #532]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	4a84      	ldr	r2, [pc, #528]	; (8006d78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b86:	4b7b      	ldr	r3, [pc, #492]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006bb6:	e087      	b.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bca:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfa:	e065      	b.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0e:	4b59      	ldr	r3, [pc, #356]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c3e:	e043      	b.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c52:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c82:	e021      	b.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006caa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006cc8:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	0a5b      	lsrs	r3, r3, #9
 8006cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cee:	ee17 2a90 	vmov	r2, s15
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	0c1b      	lsrs	r3, r3, #16
 8006cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d00:	ee07 3a90 	vmov	s15, r3
 8006d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d1c:	ee17 2a90 	vmov	r2, s15
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d52:	e008      	b.n	8006d66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	609a      	str	r2, [r3, #8]
}
 8006d66:	bf00      	nop
 8006d68:	3724      	adds	r7, #36	; 0x24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	58024400 	.word	0x58024400
 8006d78:	03d09000 	.word	0x03d09000
 8006d7c:	46000000 	.word	0x46000000
 8006d80:	4c742400 	.word	0x4c742400
 8006d84:	4a742400 	.word	0x4a742400
 8006d88:	4af42400 	.word	0x4af42400

08006d8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b089      	sub	sp, #36	; 0x24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d94:	4ba0      	ldr	r3, [pc, #640]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006d9e:	4b9e      	ldr	r3, [pc, #632]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006daa:	4b9b      	ldr	r3, [pc, #620]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006db4:	4b98      	ldr	r3, [pc, #608]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	08db      	lsrs	r3, r3, #3
 8006dba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	fb02 f303 	mul.w	r3, r2, r3
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dcc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8111 	beq.w	8006ffa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	f000 8083 	beq.w	8006ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	f200 80a1 	bhi.w	8006f2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d056      	beq.n	8006ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006df4:	e099      	b.n	8006f2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df6:	4b88      	ldr	r3, [pc, #544]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d02d      	beq.n	8006e5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e02:	4b85      	ldr	r3, [pc, #532]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a83      	ldr	r2, [pc, #524]	; (800701c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2c:	4b7a      	ldr	r3, [pc, #488]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e40:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e58:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e5c:	e087      	b.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	ee07 3a90 	vmov	s15, r3
 8006e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e68:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007024 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e70:	4b69      	ldr	r3, [pc, #420]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e78:	ee07 3a90 	vmov	s15, r3
 8006e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e84:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea0:	e065      	b.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007028 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb4:	4b58      	ldr	r3, [pc, #352]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebc:	ee07 3a90 	vmov	s15, r3
 8006ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee4:	e043      	b.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800702c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef8:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f08:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f28:	e021      	b.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f34:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007024 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3c:	4b36      	ldr	r3, [pc, #216]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f50:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006f6e:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	0a5b      	lsrs	r3, r3, #9
 8006f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f94:	ee17 2a90 	vmov	r2, s15
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006f9c:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc2:	ee17 2a90 	vmov	r2, s15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	0e1b      	lsrs	r3, r3, #24
 8006fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff0:	ee17 2a90 	vmov	r2, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ff8:	e008      	b.n	800700c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	609a      	str	r2, [r3, #8]
}
 800700c:	bf00      	nop
 800700e:	3724      	adds	r7, #36	; 0x24
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	58024400 	.word	0x58024400
 800701c:	03d09000 	.word	0x03d09000
 8007020:	46000000 	.word	0x46000000
 8007024:	4c742400 	.word	0x4c742400
 8007028:	4a742400 	.word	0x4a742400
 800702c:	4af42400 	.word	0x4af42400

08007030 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800703e:	4b53      	ldr	r3, [pc, #332]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d101      	bne.n	800704e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e099      	b.n	8007182 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800704e:	4b4f      	ldr	r3, [pc, #316]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a4e      	ldr	r2, [pc, #312]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007054:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705a:	f7fa fb85 	bl	8001768 <HAL_GetTick>
 800705e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007060:	e008      	b.n	8007074 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007062:	f7fa fb81 	bl	8001768 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e086      	b.n	8007182 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007074:	4b45      	ldr	r3, [pc, #276]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1f0      	bne.n	8007062 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007080:	4b42      	ldr	r3, [pc, #264]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	031b      	lsls	r3, r3, #12
 800708e:	493f      	ldr	r1, [pc, #252]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007090:	4313      	orrs	r3, r2
 8007092:	628b      	str	r3, [r1, #40]	; 0x28
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	3b01      	subs	r3, #1
 800709a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	025b      	lsls	r3, r3, #9
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	041b      	lsls	r3, r3, #16
 80070b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070b6:	431a      	orrs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	3b01      	subs	r3, #1
 80070be:	061b      	lsls	r3, r3, #24
 80070c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070c4:	4931      	ldr	r1, [pc, #196]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070ca:	4b30      	ldr	r3, [pc, #192]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	492d      	ldr	r1, [pc, #180]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070dc:	4b2b      	ldr	r3, [pc, #172]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	f023 0220 	bic.w	r2, r3, #32
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	4928      	ldr	r1, [pc, #160]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80070ee:	4b27      	ldr	r3, [pc, #156]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	4a26      	ldr	r2, [pc, #152]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070fa:	4b24      	ldr	r3, [pc, #144]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 80070fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <RCCEx_PLL2_Config+0x160>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	69d2      	ldr	r2, [r2, #28]
 8007106:	00d2      	lsls	r2, r2, #3
 8007108:	4920      	ldr	r1, [pc, #128]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 800710a:	4313      	orrs	r3, r2
 800710c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800710e:	4b1f      	ldr	r3, [pc, #124]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	4a1e      	ldr	r2, [pc, #120]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007114:	f043 0310 	orr.w	r3, r3, #16
 8007118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007120:	4b1a      	ldr	r3, [pc, #104]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	4a19      	ldr	r2, [pc, #100]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800712a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800712c:	e00f      	b.n	800714e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d106      	bne.n	8007142 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007134:	4b15      	ldr	r3, [pc, #84]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a14      	ldr	r2, [pc, #80]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 800713a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007140:	e005      	b.n	800714e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	4a11      	ldr	r2, [pc, #68]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800714c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a0e      	ldr	r2, [pc, #56]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007154:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800715a:	f7fa fb05 	bl	8001768 <HAL_GetTick>
 800715e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007160:	e008      	b.n	8007174 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007162:	f7fa fb01 	bl	8001768 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e006      	b.n	8007182 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <RCCEx_PLL2_Config+0x15c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f0      	beq.n	8007162 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	58024400 	.word	0x58024400
 8007190:	ffff0007 	.word	0xffff0007

08007194 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071a2:	4b53      	ldr	r3, [pc, #332]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d101      	bne.n	80071b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e099      	b.n	80072e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071b2:	4b4f      	ldr	r3, [pc, #316]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a4e      	ldr	r2, [pc, #312]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80071b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071be:	f7fa fad3 	bl	8001768 <HAL_GetTick>
 80071c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071c4:	e008      	b.n	80071d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071c6:	f7fa facf 	bl	8001768 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e086      	b.n	80072e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071d8:	4b45      	ldr	r3, [pc, #276]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f0      	bne.n	80071c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071e4:	4b42      	ldr	r3, [pc, #264]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	051b      	lsls	r3, r3, #20
 80071f2:	493f      	ldr	r1, [pc, #252]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	628b      	str	r3, [r1, #40]	; 0x28
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	3b01      	subs	r3, #1
 8007208:	025b      	lsls	r3, r3, #9
 800720a:	b29b      	uxth	r3, r3
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	3b01      	subs	r3, #1
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	3b01      	subs	r3, #1
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007228:	4931      	ldr	r1, [pc, #196]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800722e:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	492d      	ldr	r1, [pc, #180]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800723c:	4313      	orrs	r3, r2
 800723e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007240:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	4928      	ldr	r1, [pc, #160]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800724e:	4313      	orrs	r3, r2
 8007250:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007252:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800725c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007262:	4b24      	ldr	r3, [pc, #144]	; (80072f4 <RCCEx_PLL3_Config+0x160>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	69d2      	ldr	r2, [r2, #28]
 800726a:	00d2      	lsls	r2, r2, #3
 800726c:	4920      	ldr	r1, [pc, #128]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007272:	4b1f      	ldr	r3, [pc, #124]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800727c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007284:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800728a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800728e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007290:	e00f      	b.n	80072b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d106      	bne.n	80072a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007298:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a14      	ldr	r2, [pc, #80]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 800729e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072a4:	e005      	b.n	80072b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072a6:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	4a11      	ldr	r2, [pc, #68]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80072ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072b2:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a0e      	ldr	r2, [pc, #56]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80072b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072be:	f7fa fa53 	bl	8001768 <HAL_GetTick>
 80072c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072c4:	e008      	b.n	80072d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072c6:	f7fa fa4f 	bl	8001768 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e006      	b.n	80072e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <RCCEx_PLL3_Config+0x15c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	58024400 	.word	0x58024400
 80072f4:	ffff0007 	.word	0xffff0007

080072f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e049      	b.n	800739e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7f9 ffe0 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f000 fbb0 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e049      	b.n	800744c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d106      	bne.n	80073d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f841 	bl	8007454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f000 fb59 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d109      	bne.n	800748c <HAL_TIM_PWM_Start+0x24>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b01      	cmp	r3, #1
 8007482:	bf14      	ite	ne
 8007484:	2301      	movne	r3, #1
 8007486:	2300      	moveq	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	e03c      	b.n	8007506 <HAL_TIM_PWM_Start+0x9e>
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b04      	cmp	r3, #4
 8007490:	d109      	bne.n	80074a6 <HAL_TIM_PWM_Start+0x3e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	e02f      	b.n	8007506 <HAL_TIM_PWM_Start+0x9e>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d109      	bne.n	80074c0 <HAL_TIM_PWM_Start+0x58>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	bf14      	ite	ne
 80074b8:	2301      	movne	r3, #1
 80074ba:	2300      	moveq	r3, #0
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	e022      	b.n	8007506 <HAL_TIM_PWM_Start+0x9e>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b0c      	cmp	r3, #12
 80074c4:	d109      	bne.n	80074da <HAL_TIM_PWM_Start+0x72>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	bf14      	ite	ne
 80074d2:	2301      	movne	r3, #1
 80074d4:	2300      	moveq	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	e015      	b.n	8007506 <HAL_TIM_PWM_Start+0x9e>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d109      	bne.n	80074f4 <HAL_TIM_PWM_Start+0x8c>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	bf14      	ite	ne
 80074ec:	2301      	movne	r3, #1
 80074ee:	2300      	moveq	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	e008      	b.n	8007506 <HAL_TIM_PWM_Start+0x9e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	bf14      	ite	ne
 8007500:	2301      	movne	r3, #1
 8007502:	2300      	moveq	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0a1      	b.n	8007652 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_Start+0xb6>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800751c:	e023      	b.n	8007566 <HAL_TIM_PWM_Start+0xfe>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b04      	cmp	r3, #4
 8007522:	d104      	bne.n	800752e <HAL_TIM_PWM_Start+0xc6>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752c:	e01b      	b.n	8007566 <HAL_TIM_PWM_Start+0xfe>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b08      	cmp	r3, #8
 8007532:	d104      	bne.n	800753e <HAL_TIM_PWM_Start+0xd6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800753c:	e013      	b.n	8007566 <HAL_TIM_PWM_Start+0xfe>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d104      	bne.n	800754e <HAL_TIM_PWM_Start+0xe6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800754c:	e00b      	b.n	8007566 <HAL_TIM_PWM_Start+0xfe>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b10      	cmp	r3, #16
 8007552:	d104      	bne.n	800755e <HAL_TIM_PWM_Start+0xf6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800755c:	e003      	b.n	8007566 <HAL_TIM_PWM_Start+0xfe>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2201      	movs	r2, #1
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fea2 	bl	80082b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a38      	ldr	r2, [pc, #224]	; (800765c <HAL_TIM_PWM_Start+0x1f4>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x13e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a37      	ldr	r2, [pc, #220]	; (8007660 <HAL_TIM_PWM_Start+0x1f8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00e      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x13e>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a35      	ldr	r2, [pc, #212]	; (8007664 <HAL_TIM_PWM_Start+0x1fc>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d009      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x13e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a34      	ldr	r2, [pc, #208]	; (8007668 <HAL_TIM_PWM_Start+0x200>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d004      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x13e>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a32      	ldr	r2, [pc, #200]	; (800766c <HAL_TIM_PWM_Start+0x204>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d101      	bne.n	80075aa <HAL_TIM_PWM_Start+0x142>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <HAL_TIM_PWM_Start+0x144>
 80075aa:	2300      	movs	r3, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a25      	ldr	r2, [pc, #148]	; (800765c <HAL_TIM_PWM_Start+0x1f4>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d022      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d2:	d01d      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a25      	ldr	r2, [pc, #148]	; (8007670 <HAL_TIM_PWM_Start+0x208>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d018      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a24      	ldr	r2, [pc, #144]	; (8007674 <HAL_TIM_PWM_Start+0x20c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a22      	ldr	r2, [pc, #136]	; (8007678 <HAL_TIM_PWM_Start+0x210>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00e      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a1a      	ldr	r2, [pc, #104]	; (8007660 <HAL_TIM_PWM_Start+0x1f8>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1e      	ldr	r2, [pc, #120]	; (800767c <HAL_TIM_PWM_Start+0x214>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_TIM_PWM_Start+0x1a8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a16      	ldr	r2, [pc, #88]	; (8007664 <HAL_TIM_PWM_Start+0x1fc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d115      	bne.n	800763c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <HAL_TIM_PWM_Start+0x218>)
 8007618:	4013      	ands	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b06      	cmp	r3, #6
 8007620:	d015      	beq.n	800764e <HAL_TIM_PWM_Start+0x1e6>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007628:	d011      	beq.n	800764e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	e008      	b.n	800764e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e000      	b.n	8007650 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40010400 	.word	0x40010400
 8007664:	40014000 	.word	0x40014000
 8007668:	40014400 	.word	0x40014400
 800766c:	40014800 	.word	0x40014800
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40001800 	.word	0x40001800
 8007680:	00010007 	.word	0x00010007

08007684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0ff      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b14      	cmp	r3, #20
 80076ae:	f200 80f0 	bhi.w	8007892 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	08007893 	.word	0x08007893
 80076c0:	08007893 	.word	0x08007893
 80076c4:	08007893 	.word	0x08007893
 80076c8:	0800774d 	.word	0x0800774d
 80076cc:	08007893 	.word	0x08007893
 80076d0:	08007893 	.word	0x08007893
 80076d4:	08007893 	.word	0x08007893
 80076d8:	0800778f 	.word	0x0800778f
 80076dc:	08007893 	.word	0x08007893
 80076e0:	08007893 	.word	0x08007893
 80076e4:	08007893 	.word	0x08007893
 80076e8:	080077cf 	.word	0x080077cf
 80076ec:	08007893 	.word	0x08007893
 80076f0:	08007893 	.word	0x08007893
 80076f4:	08007893 	.word	0x08007893
 80076f8:	08007811 	.word	0x08007811
 80076fc:	08007893 	.word	0x08007893
 8007700:	08007893 	.word	0x08007893
 8007704:	08007893 	.word	0x08007893
 8007708:	08007851 	.word	0x08007851
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fa5c 	bl	8007bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0208 	orr.w	r2, r2, #8
 8007726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0204 	bic.w	r2, r2, #4
 8007736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6999      	ldr	r1, [r3, #24]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	619a      	str	r2, [r3, #24]
      break;
 800774a:	e0a5      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 facc 	bl	8007cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6999      	ldr	r1, [r3, #24]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	619a      	str	r2, [r3, #24]
      break;
 800778c:	e084      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fb35 	bl	8007e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0208 	orr.w	r2, r2, #8
 80077a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0204 	bic.w	r2, r2, #4
 80077b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	61da      	str	r2, [r3, #28]
      break;
 80077cc:	e064      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fb9d 	bl	8007f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	021a      	lsls	r2, r3, #8
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	61da      	str	r2, [r3, #28]
      break;
 800780e:	e043      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fbe6 	bl	8007fe8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0208 	orr.w	r2, r2, #8
 800782a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0204 	bic.w	r2, r2, #4
 800783a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800784e:	e023      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fc2a 	bl	80080b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800786a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	021a      	lsls	r2, r3, #8
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007890:	e002      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
      break;
 8007896:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_TIM_ConfigClockSource+0x1c>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0dc      	b.n	8007a82 <HAL_TIM_ConfigClockSource+0x1d6>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4b6a      	ldr	r3, [pc, #424]	; (8007a8c <HAL_TIM_ConfigClockSource+0x1e0>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a64      	ldr	r2, [pc, #400]	; (8007a90 <HAL_TIM_ConfigClockSource+0x1e4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	f000 80a9 	beq.w	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8007904:	4a62      	ldr	r2, [pc, #392]	; (8007a90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	f200 80ae 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800790c:	4a61      	ldr	r2, [pc, #388]	; (8007a94 <HAL_TIM_ConfigClockSource+0x1e8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	f000 80a1 	beq.w	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8007914:	4a5f      	ldr	r2, [pc, #380]	; (8007a94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	f200 80a6 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800791c:	4a5e      	ldr	r2, [pc, #376]	; (8007a98 <HAL_TIM_ConfigClockSource+0x1ec>)
 800791e:	4293      	cmp	r3, r2
 8007920:	f000 8099 	beq.w	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8007924:	4a5c      	ldr	r2, [pc, #368]	; (8007a98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007926:	4293      	cmp	r3, r2
 8007928:	f200 809e 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800792c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007930:	f000 8091 	beq.w	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8007934:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007938:	f200 8096 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800793c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007940:	f000 8089 	beq.w	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8007944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007948:	f200 808e 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800794c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007950:	d03e      	beq.n	80079d0 <HAL_TIM_ConfigClockSource+0x124>
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007956:	f200 8087 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	f000 8086 	beq.w	8007a6e <HAL_TIM_ConfigClockSource+0x1c2>
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d87f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007968:	2b70      	cmp	r3, #112	; 0x70
 800796a:	d01a      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0xf6>
 800796c:	2b70      	cmp	r3, #112	; 0x70
 800796e:	d87b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007970:	2b60      	cmp	r3, #96	; 0x60
 8007972:	d050      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x16a>
 8007974:	2b60      	cmp	r3, #96	; 0x60
 8007976:	d877      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007978:	2b50      	cmp	r3, #80	; 0x50
 800797a:	d03c      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x14a>
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d873      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d058      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x18a>
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d86f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007988:	2b30      	cmp	r3, #48	; 0x30
 800798a:	d064      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d86b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007990:	2b20      	cmp	r3, #32
 8007992:	d060      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d867      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 800799c:	2b10      	cmp	r3, #16
 800799e:	d05a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x1aa>
 80079a0:	e062      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f000 fc61 	bl	8008278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	609a      	str	r2, [r3, #8]
      break;
 80079ce:	e04f      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6899      	ldr	r1, [r3, #8]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f000 fc4a 	bl	8008278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f2:	609a      	str	r2, [r3, #8]
      break;
 80079f4:	e03c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 fbba 	bl	800817c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2150      	movs	r1, #80	; 0x50
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc14 	bl	800823c <TIM_ITRx_SetConfig>
      break;
 8007a14:	e02c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fbd9 	bl	80081da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2160      	movs	r1, #96	; 0x60
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fc04 	bl	800823c <TIM_ITRx_SetConfig>
      break;
 8007a34:	e01c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fb9a 	bl	800817c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fbf4 	bl	800823c <TIM_ITRx_SetConfig>
      break;
 8007a54:	e00c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f000 fbeb 	bl	800823c <TIM_ITRx_SetConfig>
      break;
 8007a66:	e003      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e000      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	ffceff88 	.word	0xffceff88
 8007a90:	00100040 	.word	0x00100040
 8007a94:	00100030 	.word	0x00100030
 8007a98:	00100020 	.word	0x00100020

08007a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a40      	ldr	r2, [pc, #256]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d00f      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a3d      	ldr	r2, [pc, #244]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00b      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a3c      	ldr	r2, [pc, #240]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d007      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a3b      	ldr	r2, [pc, #236]	; (8007bbc <TIM_Base_SetConfig+0x120>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d003      	beq.n	8007adc <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a3a      	ldr	r2, [pc, #232]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d108      	bne.n	8007aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2f      	ldr	r2, [pc, #188]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01f      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afc:	d01b      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2c      	ldr	r2, [pc, #176]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d017      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a2b      	ldr	r2, [pc, #172]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <TIM_Base_SetConfig+0x120>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00f      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00b      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <TIM_Base_SetConfig+0x128>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d007      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a27      	ldr	r2, [pc, #156]	; (8007bc8 <TIM_Base_SetConfig+0x12c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_Base_SetConfig+0x9a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <TIM_Base_SetConfig+0x130>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d00f      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TIM_Base_SetConfig+0x124>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00b      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a11      	ldr	r2, [pc, #68]	; (8007bc4 <TIM_Base_SetConfig+0x128>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d007      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a10      	ldr	r2, [pc, #64]	; (8007bc8 <TIM_Base_SetConfig+0x12c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d003      	beq.n	8007b94 <TIM_Base_SetConfig+0xf8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a0f      	ldr	r2, [pc, #60]	; (8007bcc <TIM_Base_SetConfig+0x130>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d103      	bne.n	8007b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	615a      	str	r2, [r3, #20]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40010400 	.word	0x40010400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800

08007bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0201 	bic.w	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4b37      	ldr	r3, [pc, #220]	; (8007cd8 <TIM_OC1_SetConfig+0x108>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 0303 	bic.w	r3, r3, #3
 8007c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 0302 	bic.w	r3, r3, #2
 8007c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a2d      	ldr	r2, [pc, #180]	; (8007cdc <TIM_OC1_SetConfig+0x10c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00f      	beq.n	8007c4c <TIM_OC1_SetConfig+0x7c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ce0 <TIM_OC1_SetConfig+0x110>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00b      	beq.n	8007c4c <TIM_OC1_SetConfig+0x7c>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a2b      	ldr	r2, [pc, #172]	; (8007ce4 <TIM_OC1_SetConfig+0x114>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d007      	beq.n	8007c4c <TIM_OC1_SetConfig+0x7c>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ce8 <TIM_OC1_SetConfig+0x118>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d003      	beq.n	8007c4c <TIM_OC1_SetConfig+0x7c>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a29      	ldr	r2, [pc, #164]	; (8007cec <TIM_OC1_SetConfig+0x11c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d10c      	bne.n	8007c66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f023 0308 	bic.w	r3, r3, #8
 8007c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f023 0304 	bic.w	r3, r3, #4
 8007c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a1c      	ldr	r2, [pc, #112]	; (8007cdc <TIM_OC1_SetConfig+0x10c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00f      	beq.n	8007c8e <TIM_OC1_SetConfig+0xbe>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <TIM_OC1_SetConfig+0x110>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00b      	beq.n	8007c8e <TIM_OC1_SetConfig+0xbe>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <TIM_OC1_SetConfig+0x114>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <TIM_OC1_SetConfig+0xbe>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a19      	ldr	r2, [pc, #100]	; (8007ce8 <TIM_OC1_SetConfig+0x118>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d003      	beq.n	8007c8e <TIM_OC1_SetConfig+0xbe>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a18      	ldr	r2, [pc, #96]	; (8007cec <TIM_OC1_SetConfig+0x11c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d111      	bne.n	8007cb2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	621a      	str	r2, [r3, #32]
}
 8007ccc:	bf00      	nop
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	fffeff8f 	.word	0xfffeff8f
 8007cdc:	40010000 	.word	0x40010000
 8007ce0:	40010400 	.word	0x40010400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800

08007cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	f023 0210 	bic.w	r2, r3, #16
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4b34      	ldr	r3, [pc, #208]	; (8007dec <TIM_OC2_SetConfig+0xfc>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0320 	bic.w	r3, r3, #32
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a29      	ldr	r2, [pc, #164]	; (8007df0 <TIM_OC2_SetConfig+0x100>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC2_SetConfig+0x68>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a28      	ldr	r2, [pc, #160]	; (8007df4 <TIM_OC2_SetConfig+0x104>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d10d      	bne.n	8007d74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <TIM_OC2_SetConfig+0x100>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00f      	beq.n	8007d9c <TIM_OC2_SetConfig+0xac>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1d      	ldr	r2, [pc, #116]	; (8007df4 <TIM_OC2_SetConfig+0x104>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <TIM_OC2_SetConfig+0xac>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1c      	ldr	r2, [pc, #112]	; (8007df8 <TIM_OC2_SetConfig+0x108>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_OC2_SetConfig+0xac>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <TIM_OC2_SetConfig+0x10c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_OC2_SetConfig+0xac>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <TIM_OC2_SetConfig+0x110>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d113      	bne.n	8007dc4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	621a      	str	r2, [r3, #32]
}
 8007dde:	bf00      	nop
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	feff8fff 	.word	0xfeff8fff
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40010400 	.word	0x40010400
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800

08007e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4b33      	ldr	r3, [pc, #204]	; (8007efc <TIM_OC3_SetConfig+0xf8>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a28      	ldr	r2, [pc, #160]	; (8007f00 <TIM_OC3_SetConfig+0xfc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <TIM_OC3_SetConfig+0x66>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <TIM_OC3_SetConfig+0x100>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d10d      	bne.n	8007e86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	021b      	lsls	r3, r3, #8
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <TIM_OC3_SetConfig+0xfc>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00f      	beq.n	8007eae <TIM_OC3_SetConfig+0xaa>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <TIM_OC3_SetConfig+0x100>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00b      	beq.n	8007eae <TIM_OC3_SetConfig+0xaa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <TIM_OC3_SetConfig+0x104>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d007      	beq.n	8007eae <TIM_OC3_SetConfig+0xaa>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <TIM_OC3_SetConfig+0x108>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d003      	beq.n	8007eae <TIM_OC3_SetConfig+0xaa>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <TIM_OC3_SetConfig+0x10c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d113      	bne.n	8007ed6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	621a      	str	r2, [r3, #32]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	fffeff8f 	.word	0xfffeff8f
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40010400 	.word	0x40010400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400
 8007f10:	40014800 	.word	0x40014800

08007f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <TIM_OC4_SetConfig+0xbc>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a19      	ldr	r2, [pc, #100]	; (8007fd4 <TIM_OC4_SetConfig+0xc0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00f      	beq.n	8007f94 <TIM_OC4_SetConfig+0x80>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a18      	ldr	r2, [pc, #96]	; (8007fd8 <TIM_OC4_SetConfig+0xc4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00b      	beq.n	8007f94 <TIM_OC4_SetConfig+0x80>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a17      	ldr	r2, [pc, #92]	; (8007fdc <TIM_OC4_SetConfig+0xc8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d007      	beq.n	8007f94 <TIM_OC4_SetConfig+0x80>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <TIM_OC4_SetConfig+0xcc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d003      	beq.n	8007f94 <TIM_OC4_SetConfig+0x80>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <TIM_OC4_SetConfig+0xd0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d109      	bne.n	8007fa8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	621a      	str	r2, [r3, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	feff8fff 	.word	0xfeff8fff
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40010400 	.word	0x40010400
 8007fdc:	40014000 	.word	0x40014000
 8007fe0:	40014400 	.word	0x40014400
 8007fe4:	40014800 	.word	0x40014800

08007fe8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4b21      	ldr	r3, [pc, #132]	; (8008098 <TIM_OC5_SetConfig+0xb0>)
 8008014:	4013      	ands	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a18      	ldr	r2, [pc, #96]	; (800809c <TIM_OC5_SetConfig+0xb4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00f      	beq.n	800805e <TIM_OC5_SetConfig+0x76>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a17      	ldr	r2, [pc, #92]	; (80080a0 <TIM_OC5_SetConfig+0xb8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00b      	beq.n	800805e <TIM_OC5_SetConfig+0x76>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a16      	ldr	r2, [pc, #88]	; (80080a4 <TIM_OC5_SetConfig+0xbc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d007      	beq.n	800805e <TIM_OC5_SetConfig+0x76>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <TIM_OC5_SetConfig+0xc0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d003      	beq.n	800805e <TIM_OC5_SetConfig+0x76>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a14      	ldr	r2, [pc, #80]	; (80080ac <TIM_OC5_SetConfig+0xc4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d109      	bne.n	8008072 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	621a      	str	r2, [r3, #32]
}
 800808c:	bf00      	nop
 800808e:	371c      	adds	r7, #28
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	fffeff8f 	.word	0xfffeff8f
 800809c:	40010000 	.word	0x40010000
 80080a0:	40010400 	.word	0x40010400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40014400 	.word	0x40014400
 80080ac:	40014800 	.word	0x40014800

080080b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4b22      	ldr	r3, [pc, #136]	; (8008164 <TIM_OC6_SetConfig+0xb4>)
 80080dc:	4013      	ands	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	051b      	lsls	r3, r3, #20
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a19      	ldr	r2, [pc, #100]	; (8008168 <TIM_OC6_SetConfig+0xb8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00f      	beq.n	8008128 <TIM_OC6_SetConfig+0x78>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a18      	ldr	r2, [pc, #96]	; (800816c <TIM_OC6_SetConfig+0xbc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00b      	beq.n	8008128 <TIM_OC6_SetConfig+0x78>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a17      	ldr	r2, [pc, #92]	; (8008170 <TIM_OC6_SetConfig+0xc0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d007      	beq.n	8008128 <TIM_OC6_SetConfig+0x78>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a16      	ldr	r2, [pc, #88]	; (8008174 <TIM_OC6_SetConfig+0xc4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d003      	beq.n	8008128 <TIM_OC6_SetConfig+0x78>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a15      	ldr	r2, [pc, #84]	; (8008178 <TIM_OC6_SetConfig+0xc8>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d109      	bne.n	800813c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800812e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	029b      	lsls	r3, r3, #10
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4313      	orrs	r3, r2
 800813a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	feff8fff 	.word	0xfeff8fff
 8008168:	40010000 	.word	0x40010000
 800816c:	40010400 	.word	0x40010400
 8008170:	40014000 	.word	0x40014000
 8008174:	40014400 	.word	0x40014400
 8008178:	40014800 	.word	0x40014800

0800817c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f023 0201 	bic.w	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f023 030a 	bic.w	r3, r3, #10
 80081b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	621a      	str	r2, [r3, #32]
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081da:	b480      	push	{r7}
 80081dc:	b087      	sub	sp, #28
 80081de:	af00      	add	r7, sp, #0
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f023 0210 	bic.w	r2, r3, #16
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	031b      	lsls	r3, r3, #12
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008216:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <TIM_ITRx_SetConfig+0x38>)
 8008250:	4013      	ands	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	f043 0307 	orr.w	r3, r3, #7
 800825e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	609a      	str	r2, [r3, #8]
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	ffcfff8f 	.word	0xffcfff8f

08008278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	021a      	lsls	r2, r3, #8
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	431a      	orrs	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	2201      	movs	r2, #1
 80082cc:	fa02 f303 	lsl.w	r3, r2, r3
 80082d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a1a      	ldr	r2, [r3, #32]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	43db      	mvns	r3, r3
 80082da:	401a      	ands	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a1a      	ldr	r2, [r3, #32]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 031f 	and.w	r3, r3, #31
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	fa01 f303 	lsl.w	r3, r1, r3
 80082f0:	431a      	orrs	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	621a      	str	r2, [r3, #32]
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008318:	2302      	movs	r3, #2
 800831a:	e06d      	b.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a30      	ldr	r2, [pc, #192]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d004      	beq.n	8008350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a2f      	ldr	r2, [pc, #188]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d108      	bne.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a20      	ldr	r2, [pc, #128]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d022      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838e:	d01d      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1d      	ldr	r2, [pc, #116]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d018      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a1c      	ldr	r2, [pc, #112]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d013      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a1a      	ldr	r2, [pc, #104]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00e      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a15      	ldr	r2, [pc, #84]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d009      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a16      	ldr	r2, [pc, #88]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d004      	beq.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d10c      	bne.n	80083e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	40010000 	.word	0x40010000
 8008408:	40010400 	.word	0x40010400
 800840c:	40000400 	.word	0x40000400
 8008410:	40000800 	.word	0x40000800
 8008414:	40000c00 	.word	0x40000c00
 8008418:	40001800 	.word	0x40001800
 800841c:	40014000 	.word	0x40014000

08008420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e042      	b.n	80084b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7f8 ffa5 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2224      	movs	r2, #36	; 0x24
 800844e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0201 	bic.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f8c2 	bl	80085ec <UART_SetConfig>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e022      	b.n	80084b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fe1e 	bl	80090bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800848e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800849e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fea5 	bl	8009200 <UART_CheckIdleState>
 80084b6:	4603      	mov	r3, r0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	f040 8083 	bne.w	80085e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_UART_Transmit+0x28>
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e07b      	b.n	80085e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_UART_Transmit+0x3a>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e074      	b.n	80085e4 <HAL_UART_Transmit+0x124>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2221      	movs	r2, #33	; 0x21
 800850e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008512:	f7f9 f929 	bl	8001768 <HAL_GetTick>
 8008516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	88fa      	ldrh	r2, [r7, #6]
 8008524:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008530:	d108      	bne.n	8008544 <HAL_UART_Transmit+0x84>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	e003      	b.n	800854c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008554:	e02c      	b.n	80085b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2200      	movs	r2, #0
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fe98 	bl	8009296 <UART_WaitOnFlagUntilTimeout>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e039      	b.n	80085e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10b      	bne.n	800858e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008584:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	3302      	adds	r3, #2
 800858a:	61bb      	str	r3, [r7, #24]
 800858c:	e007      	b.n	800859e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	3301      	adds	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1cc      	bne.n	8008556 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2200      	movs	r2, #0
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 fe65 	bl	8009296 <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e006      	b.n	80085e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	e000      	b.n	80085e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80085e2:	2302      	movs	r3, #2
  }
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f0:	b092      	sub	sp, #72	; 0x48
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	431a      	orrs	r2, r3
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	431a      	orrs	r2, r3
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	4313      	orrs	r3, r2
 8008612:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4bbe      	ldr	r3, [pc, #760]	; (8008914 <UART_SetConfig+0x328>)
 800861c:	4013      	ands	r3, r2
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008624:	430b      	orrs	r3, r1
 8008626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4ab3      	ldr	r2, [pc, #716]	; (8008918 <UART_SetConfig+0x32c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008654:	4313      	orrs	r3, r2
 8008656:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689a      	ldr	r2, [r3, #8]
 800865e:	4baf      	ldr	r3, [pc, #700]	; (800891c <UART_SetConfig+0x330>)
 8008660:	4013      	ands	r3, r2
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008668:	430b      	orrs	r3, r1
 800866a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	f023 010f 	bic.w	r1, r3, #15
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4aa6      	ldr	r2, [pc, #664]	; (8008920 <UART_SetConfig+0x334>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d177      	bne.n	800877c <UART_SetConfig+0x190>
 800868c:	4ba5      	ldr	r3, [pc, #660]	; (8008924 <UART_SetConfig+0x338>)
 800868e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008694:	2b28      	cmp	r3, #40	; 0x28
 8008696:	d86d      	bhi.n	8008774 <UART_SetConfig+0x188>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <UART_SetConfig+0xb4>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	08008745 	.word	0x08008745
 80086a4:	08008775 	.word	0x08008775
 80086a8:	08008775 	.word	0x08008775
 80086ac:	08008775 	.word	0x08008775
 80086b0:	08008775 	.word	0x08008775
 80086b4:	08008775 	.word	0x08008775
 80086b8:	08008775 	.word	0x08008775
 80086bc:	08008775 	.word	0x08008775
 80086c0:	0800874d 	.word	0x0800874d
 80086c4:	08008775 	.word	0x08008775
 80086c8:	08008775 	.word	0x08008775
 80086cc:	08008775 	.word	0x08008775
 80086d0:	08008775 	.word	0x08008775
 80086d4:	08008775 	.word	0x08008775
 80086d8:	08008775 	.word	0x08008775
 80086dc:	08008775 	.word	0x08008775
 80086e0:	08008755 	.word	0x08008755
 80086e4:	08008775 	.word	0x08008775
 80086e8:	08008775 	.word	0x08008775
 80086ec:	08008775 	.word	0x08008775
 80086f0:	08008775 	.word	0x08008775
 80086f4:	08008775 	.word	0x08008775
 80086f8:	08008775 	.word	0x08008775
 80086fc:	08008775 	.word	0x08008775
 8008700:	0800875d 	.word	0x0800875d
 8008704:	08008775 	.word	0x08008775
 8008708:	08008775 	.word	0x08008775
 800870c:	08008775 	.word	0x08008775
 8008710:	08008775 	.word	0x08008775
 8008714:	08008775 	.word	0x08008775
 8008718:	08008775 	.word	0x08008775
 800871c:	08008775 	.word	0x08008775
 8008720:	08008765 	.word	0x08008765
 8008724:	08008775 	.word	0x08008775
 8008728:	08008775 	.word	0x08008775
 800872c:	08008775 	.word	0x08008775
 8008730:	08008775 	.word	0x08008775
 8008734:	08008775 	.word	0x08008775
 8008738:	08008775 	.word	0x08008775
 800873c:	08008775 	.word	0x08008775
 8008740:	0800876d 	.word	0x0800876d
 8008744:	2301      	movs	r3, #1
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874a:	e222      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800874c:	2304      	movs	r3, #4
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008752:	e21e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008754:	2308      	movs	r3, #8
 8008756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875a:	e21a      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800875c:	2310      	movs	r3, #16
 800875e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008762:	e216      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008764:	2320      	movs	r3, #32
 8008766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876a:	e212      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800876c:	2340      	movs	r3, #64	; 0x40
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008772:	e20e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008774:	2380      	movs	r3, #128	; 0x80
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877a:	e20a      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a69      	ldr	r2, [pc, #420]	; (8008928 <UART_SetConfig+0x33c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d130      	bne.n	80087e8 <UART_SetConfig+0x1fc>
 8008786:	4b67      	ldr	r3, [pc, #412]	; (8008924 <UART_SetConfig+0x338>)
 8008788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	2b05      	cmp	r3, #5
 8008790:	d826      	bhi.n	80087e0 <UART_SetConfig+0x1f4>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <UART_SetConfig+0x1ac>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087b1 	.word	0x080087b1
 800879c:	080087b9 	.word	0x080087b9
 80087a0:	080087c1 	.word	0x080087c1
 80087a4:	080087c9 	.word	0x080087c9
 80087a8:	080087d1 	.word	0x080087d1
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	2300      	movs	r3, #0
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b6:	e1ec      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087be:	e1e8      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c6:	e1e4      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ce:	e1e0      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087d0:	2320      	movs	r3, #32
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e1dc      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087d8:	2340      	movs	r3, #64	; 0x40
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e1d8      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087e0:	2380      	movs	r3, #128	; 0x80
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e1d4      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a4f      	ldr	r2, [pc, #316]	; (800892c <UART_SetConfig+0x340>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d130      	bne.n	8008854 <UART_SetConfig+0x268>
 80087f2:	4b4c      	ldr	r3, [pc, #304]	; (8008924 <UART_SetConfig+0x338>)
 80087f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	d826      	bhi.n	800884c <UART_SetConfig+0x260>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <UART_SetConfig+0x218>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	0800881d 	.word	0x0800881d
 8008808:	08008825 	.word	0x08008825
 800880c:	0800882d 	.word	0x0800882d
 8008810:	08008835 	.word	0x08008835
 8008814:	0800883d 	.word	0x0800883d
 8008818:	08008845 	.word	0x08008845
 800881c:	2300      	movs	r3, #0
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e1b6      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e1b2      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e1ae      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883a:	e1aa      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800883c:	2320      	movs	r3, #32
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e1a6      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008844:	2340      	movs	r3, #64	; 0x40
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e1a2      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e19e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a35      	ldr	r2, [pc, #212]	; (8008930 <UART_SetConfig+0x344>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d130      	bne.n	80088c0 <UART_SetConfig+0x2d4>
 800885e:	4b31      	ldr	r3, [pc, #196]	; (8008924 <UART_SetConfig+0x338>)
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b05      	cmp	r3, #5
 8008868:	d826      	bhi.n	80088b8 <UART_SetConfig+0x2cc>
 800886a:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x284>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008889 	.word	0x08008889
 8008874:	08008891 	.word	0x08008891
 8008878:	08008899 	.word	0x08008899
 800887c:	080088a1 	.word	0x080088a1
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088b1 	.word	0x080088b1
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e180      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e17c      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889e:	e178      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a6:	e174      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80088a8:	2320      	movs	r3, #32
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e170      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80088b0:	2340      	movs	r3, #64	; 0x40
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e16c      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80088b8:	2380      	movs	r3, #128	; 0x80
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e168      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <UART_SetConfig+0x348>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d142      	bne.n	8008950 <UART_SetConfig+0x364>
 80088ca:	4b16      	ldr	r3, [pc, #88]	; (8008924 <UART_SetConfig+0x338>)
 80088cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d838      	bhi.n	8008948 <UART_SetConfig+0x35c>
 80088d6:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <UART_SetConfig+0x2f0>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008905 	.word	0x08008905
 80088e8:	0800890d 	.word	0x0800890d
 80088ec:	08008939 	.word	0x08008939
 80088f0:	08008941 	.word	0x08008941
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fa:	e14a      	b.n	8008b92 <UART_SetConfig+0x5a6>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008902:	e146      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e142      	b.n	8008b92 <UART_SetConfig+0x5a6>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e13e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008914:	cfff69f3 	.word	0xcfff69f3
 8008918:	58000c00 	.word	0x58000c00
 800891c:	11fff4ff 	.word	0x11fff4ff
 8008920:	40011000 	.word	0x40011000
 8008924:	58024400 	.word	0x58024400
 8008928:	40004400 	.word	0x40004400
 800892c:	40004800 	.word	0x40004800
 8008930:	40004c00 	.word	0x40004c00
 8008934:	40005000 	.word	0x40005000
 8008938:	2320      	movs	r3, #32
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893e:	e128      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008946:	e124      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894e:	e120      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4acb      	ldr	r2, [pc, #812]	; (8008c84 <UART_SetConfig+0x698>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d176      	bne.n	8008a48 <UART_SetConfig+0x45c>
 800895a:	4bcb      	ldr	r3, [pc, #812]	; (8008c88 <UART_SetConfig+0x69c>)
 800895c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008962:	2b28      	cmp	r3, #40	; 0x28
 8008964:	d86c      	bhi.n	8008a40 <UART_SetConfig+0x454>
 8008966:	a201      	add	r2, pc, #4	; (adr r2, 800896c <UART_SetConfig+0x380>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	08008a11 	.word	0x08008a11
 8008970:	08008a41 	.word	0x08008a41
 8008974:	08008a41 	.word	0x08008a41
 8008978:	08008a41 	.word	0x08008a41
 800897c:	08008a41 	.word	0x08008a41
 8008980:	08008a41 	.word	0x08008a41
 8008984:	08008a41 	.word	0x08008a41
 8008988:	08008a41 	.word	0x08008a41
 800898c:	08008a19 	.word	0x08008a19
 8008990:	08008a41 	.word	0x08008a41
 8008994:	08008a41 	.word	0x08008a41
 8008998:	08008a41 	.word	0x08008a41
 800899c:	08008a41 	.word	0x08008a41
 80089a0:	08008a41 	.word	0x08008a41
 80089a4:	08008a41 	.word	0x08008a41
 80089a8:	08008a41 	.word	0x08008a41
 80089ac:	08008a21 	.word	0x08008a21
 80089b0:	08008a41 	.word	0x08008a41
 80089b4:	08008a41 	.word	0x08008a41
 80089b8:	08008a41 	.word	0x08008a41
 80089bc:	08008a41 	.word	0x08008a41
 80089c0:	08008a41 	.word	0x08008a41
 80089c4:	08008a41 	.word	0x08008a41
 80089c8:	08008a41 	.word	0x08008a41
 80089cc:	08008a29 	.word	0x08008a29
 80089d0:	08008a41 	.word	0x08008a41
 80089d4:	08008a41 	.word	0x08008a41
 80089d8:	08008a41 	.word	0x08008a41
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008a41 	.word	0x08008a41
 80089e4:	08008a41 	.word	0x08008a41
 80089e8:	08008a41 	.word	0x08008a41
 80089ec:	08008a31 	.word	0x08008a31
 80089f0:	08008a41 	.word	0x08008a41
 80089f4:	08008a41 	.word	0x08008a41
 80089f8:	08008a41 	.word	0x08008a41
 80089fc:	08008a41 	.word	0x08008a41
 8008a00:	08008a41 	.word	0x08008a41
 8008a04:	08008a41 	.word	0x08008a41
 8008a08:	08008a41 	.word	0x08008a41
 8008a0c:	08008a39 	.word	0x08008a39
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a16:	e0bc      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1e:	e0b8      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a20:	2308      	movs	r3, #8
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a26:	e0b4      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2e:	e0b0      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a30:	2320      	movs	r3, #32
 8008a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a36:	e0ac      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a38:	2340      	movs	r3, #64	; 0x40
 8008a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3e:	e0a8      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a46:	e0a4      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a8f      	ldr	r2, [pc, #572]	; (8008c8c <UART_SetConfig+0x6a0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d130      	bne.n	8008ab4 <UART_SetConfig+0x4c8>
 8008a52:	4b8d      	ldr	r3, [pc, #564]	; (8008c88 <UART_SetConfig+0x69c>)
 8008a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	d826      	bhi.n	8008aac <UART_SetConfig+0x4c0>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <UART_SetConfig+0x478>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a7d 	.word	0x08008a7d
 8008a68:	08008a85 	.word	0x08008a85
 8008a6c:	08008a8d 	.word	0x08008a8d
 8008a70:	08008a95 	.word	0x08008a95
 8008a74:	08008a9d 	.word	0x08008a9d
 8008a78:	08008aa5 	.word	0x08008aa5
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a82:	e086      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a84:	2304      	movs	r3, #4
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8a:	e082      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a92:	e07e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a94:	2310      	movs	r3, #16
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9a:	e07a      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa2:	e076      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008aa4:	2340      	movs	r3, #64	; 0x40
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aaa:	e072      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008aac:	2380      	movs	r3, #128	; 0x80
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab2:	e06e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a75      	ldr	r2, [pc, #468]	; (8008c90 <UART_SetConfig+0x6a4>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d130      	bne.n	8008b20 <UART_SetConfig+0x534>
 8008abe:	4b72      	ldr	r3, [pc, #456]	; (8008c88 <UART_SetConfig+0x69c>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	d826      	bhi.n	8008b18 <UART_SetConfig+0x52c>
 8008aca:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <UART_SetConfig+0x4e4>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008ae9 	.word	0x08008ae9
 8008ad4:	08008af1 	.word	0x08008af1
 8008ad8:	08008af9 	.word	0x08008af9
 8008adc:	08008b01 	.word	0x08008b01
 8008ae0:	08008b09 	.word	0x08008b09
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e050      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e04c      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afe:	e048      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b06:	e044      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b08:	2320      	movs	r3, #32
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0e:	e040      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b10:	2340      	movs	r3, #64	; 0x40
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b16:	e03c      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1e:	e038      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a5b      	ldr	r2, [pc, #364]	; (8008c94 <UART_SetConfig+0x6a8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d130      	bne.n	8008b8c <UART_SetConfig+0x5a0>
 8008b2a:	4b57      	ldr	r3, [pc, #348]	; (8008c88 <UART_SetConfig+0x69c>)
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d826      	bhi.n	8008b84 <UART_SetConfig+0x598>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <UART_SetConfig+0x550>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b55 	.word	0x08008b55
 8008b40:	08008b5d 	.word	0x08008b5d
 8008b44:	08008b65 	.word	0x08008b65
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	2302      	movs	r3, #2
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e01a      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e016      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b64:	2308      	movs	r3, #8
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6a:	e012      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e00e      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b74:	2320      	movs	r3, #32
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e00a      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b7c:	2340      	movs	r3, #64	; 0x40
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b82:	e006      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b84:	2380      	movs	r3, #128	; 0x80
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8a:	e002      	b.n	8008b92 <UART_SetConfig+0x5a6>
 8008b8c:	2380      	movs	r3, #128	; 0x80
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a3f      	ldr	r2, [pc, #252]	; (8008c94 <UART_SetConfig+0x6a8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	f040 80f8 	bne.w	8008d8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	dc46      	bgt.n	8008c34 <UART_SetConfig+0x648>
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	f2c0 8082 	blt.w	8008cb0 <UART_SetConfig+0x6c4>
 8008bac:	3b02      	subs	r3, #2
 8008bae:	2b1e      	cmp	r3, #30
 8008bb0:	d87e      	bhi.n	8008cb0 <UART_SetConfig+0x6c4>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <UART_SetConfig+0x5cc>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008c3b 	.word	0x08008c3b
 8008bbc:	08008cb1 	.word	0x08008cb1
 8008bc0:	08008c43 	.word	0x08008c43
 8008bc4:	08008cb1 	.word	0x08008cb1
 8008bc8:	08008cb1 	.word	0x08008cb1
 8008bcc:	08008cb1 	.word	0x08008cb1
 8008bd0:	08008c53 	.word	0x08008c53
 8008bd4:	08008cb1 	.word	0x08008cb1
 8008bd8:	08008cb1 	.word	0x08008cb1
 8008bdc:	08008cb1 	.word	0x08008cb1
 8008be0:	08008cb1 	.word	0x08008cb1
 8008be4:	08008cb1 	.word	0x08008cb1
 8008be8:	08008cb1 	.word	0x08008cb1
 8008bec:	08008cb1 	.word	0x08008cb1
 8008bf0:	08008c63 	.word	0x08008c63
 8008bf4:	08008cb1 	.word	0x08008cb1
 8008bf8:	08008cb1 	.word	0x08008cb1
 8008bfc:	08008cb1 	.word	0x08008cb1
 8008c00:	08008cb1 	.word	0x08008cb1
 8008c04:	08008cb1 	.word	0x08008cb1
 8008c08:	08008cb1 	.word	0x08008cb1
 8008c0c:	08008cb1 	.word	0x08008cb1
 8008c10:	08008cb1 	.word	0x08008cb1
 8008c14:	08008cb1 	.word	0x08008cb1
 8008c18:	08008cb1 	.word	0x08008cb1
 8008c1c:	08008cb1 	.word	0x08008cb1
 8008c20:	08008cb1 	.word	0x08008cb1
 8008c24:	08008cb1 	.word	0x08008cb1
 8008c28:	08008cb1 	.word	0x08008cb1
 8008c2c:	08008cb1 	.word	0x08008cb1
 8008c30:	08008ca3 	.word	0x08008ca3
 8008c34:	2b40      	cmp	r3, #64	; 0x40
 8008c36:	d037      	beq.n	8008ca8 <UART_SetConfig+0x6bc>
 8008c38:	e03a      	b.n	8008cb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c3a:	f7fd fde9 	bl	8006810 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c40:	e03c      	b.n	8008cbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fd fdf8 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c50:	e034      	b.n	8008cbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c52:	f107 0318 	add.w	r3, r7, #24
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fd ff44 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c60:	e02c      	b.n	8008cbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c62:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <UART_SetConfig+0x69c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d016      	beq.n	8008c9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c6e:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <UART_SetConfig+0x69c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	08db      	lsrs	r3, r3, #3
 8008c74:	f003 0303 	and.w	r3, r3, #3
 8008c78:	4a07      	ldr	r2, [pc, #28]	; (8008c98 <UART_SetConfig+0x6ac>)
 8008c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c80:	e01c      	b.n	8008cbc <UART_SetConfig+0x6d0>
 8008c82:	bf00      	nop
 8008c84:	40011400 	.word	0x40011400
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	40007800 	.word	0x40007800
 8008c90:	40007c00 	.word	0x40007c00
 8008c94:	58000c00 	.word	0x58000c00
 8008c98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c9c:	4b9d      	ldr	r3, [pc, #628]	; (8008f14 <UART_SetConfig+0x928>)
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca0:	e00c      	b.n	8008cbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ca2:	4b9d      	ldr	r3, [pc, #628]	; (8008f18 <UART_SetConfig+0x92c>)
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca6:	e009      	b.n	8008cbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cae:	e005      	b.n	8008cbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 81de 	beq.w	8009080 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	4a94      	ldr	r2, [pc, #592]	; (8008f1c <UART_SetConfig+0x930>)
 8008cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	4413      	add	r3, r2
 8008ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d305      	bcc.n	8008cf4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d903      	bls.n	8008cfc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cfa:	e1c1      	b.n	8009080 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	2200      	movs	r2, #0
 8008d00:	60bb      	str	r3, [r7, #8]
 8008d02:	60fa      	str	r2, [r7, #12]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	4a84      	ldr	r2, [pc, #528]	; (8008f1c <UART_SetConfig+0x930>)
 8008d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	2200      	movs	r2, #0
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d1e:	f7f7 fb37 	bl	8000390 <__aeabi_uldivmod>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4610      	mov	r0, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	020b      	lsls	r3, r1, #8
 8008d34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d38:	0202      	lsls	r2, r0, #8
 8008d3a:	6979      	ldr	r1, [r7, #20]
 8008d3c:	6849      	ldr	r1, [r1, #4]
 8008d3e:	0849      	lsrs	r1, r1, #1
 8008d40:	2000      	movs	r0, #0
 8008d42:	460c      	mov	r4, r1
 8008d44:	4605      	mov	r5, r0
 8008d46:	eb12 0804 	adds.w	r8, r2, r4
 8008d4a:	eb43 0905 	adc.w	r9, r3, r5
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	469a      	mov	sl, r3
 8008d56:	4693      	mov	fp, r2
 8008d58:	4652      	mov	r2, sl
 8008d5a:	465b      	mov	r3, fp
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4649      	mov	r1, r9
 8008d60:	f7f7 fb16 	bl	8000390 <__aeabi_uldivmod>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4613      	mov	r3, r2
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d72:	d308      	bcc.n	8008d86 <UART_SetConfig+0x79a>
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d7a:	d204      	bcs.n	8008d86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d82:	60da      	str	r2, [r3, #12]
 8008d84:	e17c      	b.n	8009080 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d8c:	e178      	b.n	8009080 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d96:	f040 80c5 	bne.w	8008f24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	dc48      	bgt.n	8008e34 <UART_SetConfig+0x848>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	db7b      	blt.n	8008e9e <UART_SetConfig+0x8b2>
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d879      	bhi.n	8008e9e <UART_SetConfig+0x8b2>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x7c4>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e3b 	.word	0x08008e3b
 8008db4:	08008e43 	.word	0x08008e43
 8008db8:	08008e9f 	.word	0x08008e9f
 8008dbc:	08008e9f 	.word	0x08008e9f
 8008dc0:	08008e4b 	.word	0x08008e4b
 8008dc4:	08008e9f 	.word	0x08008e9f
 8008dc8:	08008e9f 	.word	0x08008e9f
 8008dcc:	08008e9f 	.word	0x08008e9f
 8008dd0:	08008e5b 	.word	0x08008e5b
 8008dd4:	08008e9f 	.word	0x08008e9f
 8008dd8:	08008e9f 	.word	0x08008e9f
 8008ddc:	08008e9f 	.word	0x08008e9f
 8008de0:	08008e9f 	.word	0x08008e9f
 8008de4:	08008e9f 	.word	0x08008e9f
 8008de8:	08008e9f 	.word	0x08008e9f
 8008dec:	08008e9f 	.word	0x08008e9f
 8008df0:	08008e6b 	.word	0x08008e6b
 8008df4:	08008e9f 	.word	0x08008e9f
 8008df8:	08008e9f 	.word	0x08008e9f
 8008dfc:	08008e9f 	.word	0x08008e9f
 8008e00:	08008e9f 	.word	0x08008e9f
 8008e04:	08008e9f 	.word	0x08008e9f
 8008e08:	08008e9f 	.word	0x08008e9f
 8008e0c:	08008e9f 	.word	0x08008e9f
 8008e10:	08008e9f 	.word	0x08008e9f
 8008e14:	08008e9f 	.word	0x08008e9f
 8008e18:	08008e9f 	.word	0x08008e9f
 8008e1c:	08008e9f 	.word	0x08008e9f
 8008e20:	08008e9f 	.word	0x08008e9f
 8008e24:	08008e9f 	.word	0x08008e9f
 8008e28:	08008e9f 	.word	0x08008e9f
 8008e2c:	08008e9f 	.word	0x08008e9f
 8008e30:	08008e91 	.word	0x08008e91
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d02e      	beq.n	8008e96 <UART_SetConfig+0x8aa>
 8008e38:	e031      	b.n	8008e9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e3a:	f7fc f8a5 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8008e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e40:	e033      	b.n	8008eaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e42:	f7fc f8b7 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8008e46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e48:	e02f      	b.n	8008eaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd fcf4 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e58:	e027      	b.n	8008eaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5a:	f107 0318 	add.w	r3, r7, #24
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd fe40 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e68:	e01f      	b.n	8008eaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e6a:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <UART_SetConfig+0x934>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e76:	4b2a      	ldr	r3, [pc, #168]	; (8008f20 <UART_SetConfig+0x934>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	08db      	lsrs	r3, r3, #3
 8008e7c:	f003 0303 	and.w	r3, r3, #3
 8008e80:	4a24      	ldr	r2, [pc, #144]	; (8008f14 <UART_SetConfig+0x928>)
 8008e82:	fa22 f303 	lsr.w	r3, r2, r3
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e88:	e00f      	b.n	8008eaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e8a:	4b22      	ldr	r3, [pc, #136]	; (8008f14 <UART_SetConfig+0x928>)
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8e:	e00c      	b.n	8008eaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e90:	4b21      	ldr	r3, [pc, #132]	; (8008f18 <UART_SetConfig+0x92c>)
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e94:	e009      	b.n	8008eaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9c:	e005      	b.n	8008eaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80e7 	beq.w	8009080 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	4a19      	ldr	r2, [pc, #100]	; (8008f1c <UART_SetConfig+0x930>)
 8008eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec4:	005a      	lsls	r2, r3, #1
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	441a      	add	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	d916      	bls.n	8008f0c <UART_SetConfig+0x920>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee4:	d212      	bcs.n	8008f0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f023 030f 	bic.w	r3, r3, #15
 8008eee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	085b      	lsrs	r3, r3, #1
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008efe:	4313      	orrs	r3, r2
 8008f00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f08:	60da      	str	r2, [r3, #12]
 8008f0a:	e0b9      	b.n	8009080 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f12:	e0b5      	b.n	8009080 <UART_SetConfig+0xa94>
 8008f14:	03d09000 	.word	0x03d09000
 8008f18:	003d0900 	.word	0x003d0900
 8008f1c:	0800c0b0 	.word	0x0800c0b0
 8008f20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	dc49      	bgt.n	8008fc0 <UART_SetConfig+0x9d4>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db7c      	blt.n	800902a <UART_SetConfig+0xa3e>
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d87a      	bhi.n	800902a <UART_SetConfig+0xa3e>
 8008f34:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <UART_SetConfig+0x950>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008fc7 	.word	0x08008fc7
 8008f40:	08008fcf 	.word	0x08008fcf
 8008f44:	0800902b 	.word	0x0800902b
 8008f48:	0800902b 	.word	0x0800902b
 8008f4c:	08008fd7 	.word	0x08008fd7
 8008f50:	0800902b 	.word	0x0800902b
 8008f54:	0800902b 	.word	0x0800902b
 8008f58:	0800902b 	.word	0x0800902b
 8008f5c:	08008fe7 	.word	0x08008fe7
 8008f60:	0800902b 	.word	0x0800902b
 8008f64:	0800902b 	.word	0x0800902b
 8008f68:	0800902b 	.word	0x0800902b
 8008f6c:	0800902b 	.word	0x0800902b
 8008f70:	0800902b 	.word	0x0800902b
 8008f74:	0800902b 	.word	0x0800902b
 8008f78:	0800902b 	.word	0x0800902b
 8008f7c:	08008ff7 	.word	0x08008ff7
 8008f80:	0800902b 	.word	0x0800902b
 8008f84:	0800902b 	.word	0x0800902b
 8008f88:	0800902b 	.word	0x0800902b
 8008f8c:	0800902b 	.word	0x0800902b
 8008f90:	0800902b 	.word	0x0800902b
 8008f94:	0800902b 	.word	0x0800902b
 8008f98:	0800902b 	.word	0x0800902b
 8008f9c:	0800902b 	.word	0x0800902b
 8008fa0:	0800902b 	.word	0x0800902b
 8008fa4:	0800902b 	.word	0x0800902b
 8008fa8:	0800902b 	.word	0x0800902b
 8008fac:	0800902b 	.word	0x0800902b
 8008fb0:	0800902b 	.word	0x0800902b
 8008fb4:	0800902b 	.word	0x0800902b
 8008fb8:	0800902b 	.word	0x0800902b
 8008fbc:	0800901d 	.word	0x0800901d
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d02e      	beq.n	8009022 <UART_SetConfig+0xa36>
 8008fc4:	e031      	b.n	800902a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc6:	f7fb ffdf 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8008fca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fcc:	e033      	b.n	8009036 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fce:	f7fb fff1 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8008fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fd4:	e02f      	b.n	8009036 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fd fc2e 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe4:	e027      	b.n	8009036 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe6:	f107 0318 	add.w	r3, r7, #24
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fd fd7a 	bl	8006ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff4:	e01f      	b.n	8009036 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff6:	4b2d      	ldr	r3, [pc, #180]	; (80090ac <UART_SetConfig+0xac0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009002:	4b2a      	ldr	r3, [pc, #168]	; (80090ac <UART_SetConfig+0xac0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	f003 0303 	and.w	r3, r3, #3
 800900c:	4a28      	ldr	r2, [pc, #160]	; (80090b0 <UART_SetConfig+0xac4>)
 800900e:	fa22 f303 	lsr.w	r3, r2, r3
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009014:	e00f      	b.n	8009036 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009016:	4b26      	ldr	r3, [pc, #152]	; (80090b0 <UART_SetConfig+0xac4>)
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800901a:	e00c      	b.n	8009036 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800901c:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <UART_SetConfig+0xac8>)
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009020:	e009      	b.n	8009036 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009028:	e005      	b.n	8009036 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009034:	bf00      	nop
    }

    if (pclk != 0U)
 8009036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d021      	beq.n	8009080 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	4a1d      	ldr	r2, [pc, #116]	; (80090b8 <UART_SetConfig+0xacc>)
 8009042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009046:	461a      	mov	r2, r3
 8009048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904a:	fbb3 f2f2 	udiv	r2, r3, r2
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	441a      	add	r2, r3
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	fbb2 f3f3 	udiv	r3, r2, r3
 800905e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	2b0f      	cmp	r3, #15
 8009064:	d909      	bls.n	800907a <UART_SetConfig+0xa8e>
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906c:	d205      	bcs.n	800907a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	b29a      	uxth	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60da      	str	r2, [r3, #12]
 8009078:	e002      	b.n	8009080 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2201      	movs	r2, #1
 8009084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2201      	movs	r2, #1
 800908c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2200      	movs	r2, #0
 8009094:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2200      	movs	r2, #0
 800909a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800909c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3748      	adds	r7, #72	; 0x48
 80090a4:	46bd      	mov	sp, r7
 80090a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090aa:	bf00      	nop
 80090ac:	58024400 	.word	0x58024400
 80090b0:	03d09000 	.word	0x03d09000
 80090b4:	003d0900 	.word	0x003d0900
 80090b8:	0800c0b0 	.word	0x0800c0b0

080090bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00a      	beq.n	80090e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00a      	beq.n	800912a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01a      	beq.n	80091d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ba:	d10a      	bne.n	80091d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	605a      	str	r2, [r3, #4]
  }
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af02      	add	r7, sp, #8
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009210:	f7f8 faaa 	bl	8001768 <HAL_GetTick>
 8009214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0308 	and.w	r3, r3, #8
 8009220:	2b08      	cmp	r3, #8
 8009222:	d10e      	bne.n	8009242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f82f 	bl	8009296 <UART_WaitOnFlagUntilTimeout>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e025      	b.n	800928e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b04      	cmp	r3, #4
 800924e:	d10e      	bne.n	800926e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f819 	bl	8009296 <UART_WaitOnFlagUntilTimeout>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e00f      	b.n	800928e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b09c      	sub	sp, #112	; 0x70
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	603b      	str	r3, [r7, #0]
 80092a2:	4613      	mov	r3, r2
 80092a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a6:	e0a9      	b.n	80093fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ae:	f000 80a5 	beq.w	80093fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b2:	f7f8 fa59 	bl	8001768 <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092be:	429a      	cmp	r2, r3
 80092c0:	d302      	bcc.n	80092c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80092c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d140      	bne.n	800934a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092dc:	667b      	str	r3, [r7, #100]	; 0x64
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e6      	bne.n	80092c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3308      	adds	r3, #8
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	e853 3f00 	ldrex	r3, [r3]
 8009308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	f023 0301 	bic.w	r3, r3, #1
 8009310:	663b      	str	r3, [r7, #96]	; 0x60
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800931a:	64ba      	str	r2, [r7, #72]	; 0x48
 800931c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009322:	e841 2300 	strex	r3, r2, [r1]
 8009326:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e5      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2220      	movs	r2, #32
 8009332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e069      	b.n	800941e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 0304 	and.w	r3, r3, #4
 8009354:	2b00      	cmp	r3, #0
 8009356:	d051      	beq.n	80093fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009366:	d149      	bne.n	80093fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009370:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
 8009392:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800939e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e6      	bne.n	8009372 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3308      	adds	r3, #8
 80093aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	613b      	str	r3, [r7, #16]
   return(result);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3308      	adds	r3, #8
 80093c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093c4:	623a      	str	r2, [r7, #32]
 80093c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	69f9      	ldr	r1, [r7, #28]
 80093ca:	6a3a      	ldr	r2, [r7, #32]
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e5      	bne.n	80093a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2220      	movs	r2, #32
 80093dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e010      	b.n	800941e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	69da      	ldr	r2, [r3, #28]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4013      	ands	r3, r2
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	429a      	cmp	r2, r3
 800940a:	bf0c      	ite	eq
 800940c:	2301      	moveq	r3, #1
 800940e:	2300      	movne	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	429a      	cmp	r2, r3
 8009418:	f43f af46 	beq.w	80092a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3770      	adds	r7, #112	; 0x70
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_UARTEx_DisableFifoMode+0x16>
 8009438:	2302      	movs	r3, #2
 800943a:	e027      	b.n	800948c <HAL_UARTEx_DisableFifoMode+0x66>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2224      	movs	r2, #36	; 0x24
 8009448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800946a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e02d      	b.n	800950c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2224      	movs	r2, #36	; 0x24
 80094bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 0201 	bic.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f84f 	bl	8009590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009528:	2302      	movs	r3, #2
 800952a:	e02d      	b.n	8009588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2224      	movs	r2, #36	; 0x24
 8009538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f811 	bl	8009590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800959c:	2b00      	cmp	r3, #0
 800959e:	d108      	bne.n	80095b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095b0:	e031      	b.n	8009616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095b2:	2310      	movs	r3, #16
 80095b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095b6:	2310      	movs	r3, #16
 80095b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	0e5b      	lsrs	r3, r3, #25
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	0f5b      	lsrs	r3, r3, #29
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	7b3a      	ldrb	r2, [r7, #12]
 80095de:	4911      	ldr	r1, [pc, #68]	; (8009624 <UARTEx_SetNbDataToProcess+0x94>)
 80095e0:	5c8a      	ldrb	r2, [r1, r2]
 80095e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095e6:	7b3a      	ldrb	r2, [r7, #12]
 80095e8:	490f      	ldr	r1, [pc, #60]	; (8009628 <UARTEx_SetNbDataToProcess+0x98>)
 80095ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	7b7a      	ldrb	r2, [r7, #13]
 80095fc:	4909      	ldr	r1, [pc, #36]	; (8009624 <UARTEx_SetNbDataToProcess+0x94>)
 80095fe:	5c8a      	ldrb	r2, [r1, r2]
 8009600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009604:	7b7a      	ldrb	r2, [r7, #13]
 8009606:	4908      	ldr	r1, [pc, #32]	; (8009628 <UARTEx_SetNbDataToProcess+0x98>)
 8009608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800960a:	fb93 f3f2 	sdiv	r3, r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	0800c0c8 	.word	0x0800c0c8
 8009628:	0800c0d0 	.word	0x0800c0d0

0800962c <__errno>:
 800962c:	4b01      	ldr	r3, [pc, #4]	; (8009634 <__errno+0x8>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	24000010 	.word	0x24000010

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4d0d      	ldr	r5, [pc, #52]	; (8009670 <__libc_init_array+0x38>)
 800963c:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 800963e:	1b64      	subs	r4, r4, r5
 8009640:	10a4      	asrs	r4, r4, #2
 8009642:	2600      	movs	r6, #0
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	4d0b      	ldr	r5, [pc, #44]	; (8009678 <__libc_init_array+0x40>)
 800964a:	4c0c      	ldr	r4, [pc, #48]	; (800967c <__libc_init_array+0x44>)
 800964c:	f002 fcaa 	bl	800bfa4 <_init>
 8009650:	1b64      	subs	r4, r4, r5
 8009652:	10a4      	asrs	r4, r4, #2
 8009654:	2600      	movs	r6, #0
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800c4bc 	.word	0x0800c4bc
 8009674:	0800c4bc 	.word	0x0800c4bc
 8009678:	0800c4bc 	.word	0x0800c4bc
 800967c:	0800c4c0 	.word	0x0800c4c0

08009680 <memcpy>:
 8009680:	440a      	add	r2, r1
 8009682:	4291      	cmp	r1, r2
 8009684:	f100 33ff 	add.w	r3, r0, #4294967295
 8009688:	d100      	bne.n	800968c <memcpy+0xc>
 800968a:	4770      	bx	lr
 800968c:	b510      	push	{r4, lr}
 800968e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009696:	4291      	cmp	r1, r2
 8009698:	d1f9      	bne.n	800968e <memcpy+0xe>
 800969a:	bd10      	pop	{r4, pc}

0800969c <memset>:
 800969c:	4402      	add	r2, r0
 800969e:	4603      	mov	r3, r0
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d100      	bne.n	80096a6 <memset+0xa>
 80096a4:	4770      	bx	lr
 80096a6:	f803 1b01 	strb.w	r1, [r3], #1
 80096aa:	e7f9      	b.n	80096a0 <memset+0x4>

080096ac <__cvt>:
 80096ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ae:	ed2d 8b02 	vpush	{d8}
 80096b2:	eeb0 8b40 	vmov.f64	d8, d0
 80096b6:	b085      	sub	sp, #20
 80096b8:	4617      	mov	r7, r2
 80096ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80096bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80096be:	ee18 2a90 	vmov	r2, s17
 80096c2:	f025 0520 	bic.w	r5, r5, #32
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	bfb6      	itet	lt
 80096ca:	222d      	movlt	r2, #45	; 0x2d
 80096cc:	2200      	movge	r2, #0
 80096ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80096d2:	2d46      	cmp	r5, #70	; 0x46
 80096d4:	460c      	mov	r4, r1
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	d004      	beq.n	80096e4 <__cvt+0x38>
 80096da:	2d45      	cmp	r5, #69	; 0x45
 80096dc:	d100      	bne.n	80096e0 <__cvt+0x34>
 80096de:	3401      	adds	r4, #1
 80096e0:	2102      	movs	r1, #2
 80096e2:	e000      	b.n	80096e6 <__cvt+0x3a>
 80096e4:	2103      	movs	r1, #3
 80096e6:	ab03      	add	r3, sp, #12
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	ab02      	add	r3, sp, #8
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4622      	mov	r2, r4
 80096f0:	4633      	mov	r3, r6
 80096f2:	eeb0 0b48 	vmov.f64	d0, d8
 80096f6:	f000 fcc3 	bl	800a080 <_dtoa_r>
 80096fa:	2d47      	cmp	r5, #71	; 0x47
 80096fc:	d101      	bne.n	8009702 <__cvt+0x56>
 80096fe:	07fb      	lsls	r3, r7, #31
 8009700:	d51a      	bpl.n	8009738 <__cvt+0x8c>
 8009702:	2d46      	cmp	r5, #70	; 0x46
 8009704:	eb00 0204 	add.w	r2, r0, r4
 8009708:	d10c      	bne.n	8009724 <__cvt+0x78>
 800970a:	7803      	ldrb	r3, [r0, #0]
 800970c:	2b30      	cmp	r3, #48	; 0x30
 800970e:	d107      	bne.n	8009720 <__cvt+0x74>
 8009710:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009718:	bf1c      	itt	ne
 800971a:	f1c4 0401 	rsbne	r4, r4, #1
 800971e:	6034      	strne	r4, [r6, #0]
 8009720:	6833      	ldr	r3, [r6, #0]
 8009722:	441a      	add	r2, r3
 8009724:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972c:	bf08      	it	eq
 800972e:	9203      	streq	r2, [sp, #12]
 8009730:	2130      	movs	r1, #48	; 0x30
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	4293      	cmp	r3, r2
 8009736:	d307      	bcc.n	8009748 <__cvt+0x9c>
 8009738:	9b03      	ldr	r3, [sp, #12]
 800973a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800973c:	1a1b      	subs	r3, r3, r0
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	b005      	add	sp, #20
 8009742:	ecbd 8b02 	vpop	{d8}
 8009746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009748:	1c5c      	adds	r4, r3, #1
 800974a:	9403      	str	r4, [sp, #12]
 800974c:	7019      	strb	r1, [r3, #0]
 800974e:	e7f0      	b.n	8009732 <__cvt+0x86>

08009750 <__exponent>:
 8009750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009752:	4603      	mov	r3, r0
 8009754:	2900      	cmp	r1, #0
 8009756:	bfb8      	it	lt
 8009758:	4249      	neglt	r1, r1
 800975a:	f803 2b02 	strb.w	r2, [r3], #2
 800975e:	bfb4      	ite	lt
 8009760:	222d      	movlt	r2, #45	; 0x2d
 8009762:	222b      	movge	r2, #43	; 0x2b
 8009764:	2909      	cmp	r1, #9
 8009766:	7042      	strb	r2, [r0, #1]
 8009768:	dd2a      	ble.n	80097c0 <__exponent+0x70>
 800976a:	f10d 0407 	add.w	r4, sp, #7
 800976e:	46a4      	mov	ip, r4
 8009770:	270a      	movs	r7, #10
 8009772:	46a6      	mov	lr, r4
 8009774:	460a      	mov	r2, r1
 8009776:	fb91 f6f7 	sdiv	r6, r1, r7
 800977a:	fb07 1516 	mls	r5, r7, r6, r1
 800977e:	3530      	adds	r5, #48	; 0x30
 8009780:	2a63      	cmp	r2, #99	; 0x63
 8009782:	f104 34ff 	add.w	r4, r4, #4294967295
 8009786:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800978a:	4631      	mov	r1, r6
 800978c:	dcf1      	bgt.n	8009772 <__exponent+0x22>
 800978e:	3130      	adds	r1, #48	; 0x30
 8009790:	f1ae 0502 	sub.w	r5, lr, #2
 8009794:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009798:	1c44      	adds	r4, r0, #1
 800979a:	4629      	mov	r1, r5
 800979c:	4561      	cmp	r1, ip
 800979e:	d30a      	bcc.n	80097b6 <__exponent+0x66>
 80097a0:	f10d 0209 	add.w	r2, sp, #9
 80097a4:	eba2 020e 	sub.w	r2, r2, lr
 80097a8:	4565      	cmp	r5, ip
 80097aa:	bf88      	it	hi
 80097ac:	2200      	movhi	r2, #0
 80097ae:	4413      	add	r3, r2
 80097b0:	1a18      	subs	r0, r3, r0
 80097b2:	b003      	add	sp, #12
 80097b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097be:	e7ed      	b.n	800979c <__exponent+0x4c>
 80097c0:	2330      	movs	r3, #48	; 0x30
 80097c2:	3130      	adds	r1, #48	; 0x30
 80097c4:	7083      	strb	r3, [r0, #2]
 80097c6:	70c1      	strb	r1, [r0, #3]
 80097c8:	1d03      	adds	r3, r0, #4
 80097ca:	e7f1      	b.n	80097b0 <__exponent+0x60>
 80097cc:	0000      	movs	r0, r0
	...

080097d0 <_printf_float>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	b08b      	sub	sp, #44	; 0x2c
 80097d6:	460c      	mov	r4, r1
 80097d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80097dc:	4616      	mov	r6, r2
 80097de:	461f      	mov	r7, r3
 80097e0:	4605      	mov	r5, r0
 80097e2:	f001 fab1 	bl	800ad48 <_localeconv_r>
 80097e6:	f8d0 b000 	ldr.w	fp, [r0]
 80097ea:	4658      	mov	r0, fp
 80097ec:	f7f6 fd78 	bl	80002e0 <strlen>
 80097f0:	2300      	movs	r3, #0
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	f8d8 3000 	ldr.w	r3, [r8]
 80097f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80097fc:	6822      	ldr	r2, [r4, #0]
 80097fe:	3307      	adds	r3, #7
 8009800:	f023 0307 	bic.w	r3, r3, #7
 8009804:	f103 0108 	add.w	r1, r3, #8
 8009808:	f8c8 1000 	str.w	r1, [r8]
 800980c:	4682      	mov	sl, r0
 800980e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009812:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009816:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009a78 <_printf_float+0x2a8>
 800981a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800981e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009822:	eeb4 6b47 	vcmp.f64	d6, d7
 8009826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982a:	dd24      	ble.n	8009876 <_printf_float+0xa6>
 800982c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	d502      	bpl.n	800983c <_printf_float+0x6c>
 8009836:	232d      	movs	r3, #45	; 0x2d
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983c:	4b90      	ldr	r3, [pc, #576]	; (8009a80 <_printf_float+0x2b0>)
 800983e:	4891      	ldr	r0, [pc, #580]	; (8009a84 <_printf_float+0x2b4>)
 8009840:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009844:	bf94      	ite	ls
 8009846:	4698      	movls	r8, r3
 8009848:	4680      	movhi	r8, r0
 800984a:	2303      	movs	r3, #3
 800984c:	6123      	str	r3, [r4, #16]
 800984e:	f022 0204 	bic.w	r2, r2, #4
 8009852:	2300      	movs	r3, #0
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	9700      	str	r7, [sp, #0]
 800985a:	4633      	mov	r3, r6
 800985c:	aa09      	add	r2, sp, #36	; 0x24
 800985e:	4621      	mov	r1, r4
 8009860:	4628      	mov	r0, r5
 8009862:	f000 f9d3 	bl	8009c0c <_printf_common>
 8009866:	3001      	adds	r0, #1
 8009868:	f040 808a 	bne.w	8009980 <_printf_float+0x1b0>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b00b      	add	sp, #44	; 0x2c
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	eeb4 0b40 	vcmp.f64	d0, d0
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	d709      	bvc.n	8009894 <_printf_float+0xc4>
 8009880:	ee10 3a90 	vmov	r3, s1
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfbc      	itt	lt
 8009888:	232d      	movlt	r3, #45	; 0x2d
 800988a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800988e:	487e      	ldr	r0, [pc, #504]	; (8009a88 <_printf_float+0x2b8>)
 8009890:	4b7e      	ldr	r3, [pc, #504]	; (8009a8c <_printf_float+0x2bc>)
 8009892:	e7d5      	b.n	8009840 <_printf_float+0x70>
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800989a:	9104      	str	r1, [sp, #16]
 800989c:	1c59      	adds	r1, r3, #1
 800989e:	d13c      	bne.n	800991a <_printf_float+0x14a>
 80098a0:	2306      	movs	r3, #6
 80098a2:	6063      	str	r3, [r4, #4]
 80098a4:	2300      	movs	r3, #0
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	ab08      	add	r3, sp, #32
 80098aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80098ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098b2:	ab07      	add	r3, sp, #28
 80098b4:	6861      	ldr	r1, [r4, #4]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	f10d 031b 	add.w	r3, sp, #27
 80098be:	4628      	mov	r0, r5
 80098c0:	f7ff fef4 	bl	80096ac <__cvt>
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	9907      	ldr	r1, [sp, #28]
 80098c8:	2b47      	cmp	r3, #71	; 0x47
 80098ca:	4680      	mov	r8, r0
 80098cc:	d108      	bne.n	80098e0 <_printf_float+0x110>
 80098ce:	1cc8      	adds	r0, r1, #3
 80098d0:	db02      	blt.n	80098d8 <_printf_float+0x108>
 80098d2:	6863      	ldr	r3, [r4, #4]
 80098d4:	4299      	cmp	r1, r3
 80098d6:	dd41      	ble.n	800995c <_printf_float+0x18c>
 80098d8:	f1a9 0902 	sub.w	r9, r9, #2
 80098dc:	fa5f f989 	uxtb.w	r9, r9
 80098e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098e4:	d820      	bhi.n	8009928 <_printf_float+0x158>
 80098e6:	3901      	subs	r1, #1
 80098e8:	464a      	mov	r2, r9
 80098ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098ee:	9107      	str	r1, [sp, #28]
 80098f0:	f7ff ff2e 	bl	8009750 <__exponent>
 80098f4:	9a08      	ldr	r2, [sp, #32]
 80098f6:	9004      	str	r0, [sp, #16]
 80098f8:	1813      	adds	r3, r2, r0
 80098fa:	2a01      	cmp	r2, #1
 80098fc:	6123      	str	r3, [r4, #16]
 80098fe:	dc02      	bgt.n	8009906 <_printf_float+0x136>
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	07d2      	lsls	r2, r2, #31
 8009904:	d501      	bpl.n	800990a <_printf_float+0x13a>
 8009906:	3301      	adds	r3, #1
 8009908:	6123      	str	r3, [r4, #16]
 800990a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0a2      	beq.n	8009858 <_printf_float+0x88>
 8009912:	232d      	movs	r3, #45	; 0x2d
 8009914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009918:	e79e      	b.n	8009858 <_printf_float+0x88>
 800991a:	9904      	ldr	r1, [sp, #16]
 800991c:	2947      	cmp	r1, #71	; 0x47
 800991e:	d1c1      	bne.n	80098a4 <_printf_float+0xd4>
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1bf      	bne.n	80098a4 <_printf_float+0xd4>
 8009924:	2301      	movs	r3, #1
 8009926:	e7bc      	b.n	80098a2 <_printf_float+0xd2>
 8009928:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800992c:	d118      	bne.n	8009960 <_printf_float+0x190>
 800992e:	2900      	cmp	r1, #0
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	dd0b      	ble.n	800994c <_printf_float+0x17c>
 8009934:	6121      	str	r1, [r4, #16]
 8009936:	b913      	cbnz	r3, 800993e <_printf_float+0x16e>
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	07d0      	lsls	r0, r2, #31
 800993c:	d502      	bpl.n	8009944 <_printf_float+0x174>
 800993e:	3301      	adds	r3, #1
 8009940:	440b      	add	r3, r1
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	2300      	movs	r3, #0
 8009946:	65a1      	str	r1, [r4, #88]	; 0x58
 8009948:	9304      	str	r3, [sp, #16]
 800994a:	e7de      	b.n	800990a <_printf_float+0x13a>
 800994c:	b913      	cbnz	r3, 8009954 <_printf_float+0x184>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	07d2      	lsls	r2, r2, #31
 8009952:	d501      	bpl.n	8009958 <_printf_float+0x188>
 8009954:	3302      	adds	r3, #2
 8009956:	e7f4      	b.n	8009942 <_printf_float+0x172>
 8009958:	2301      	movs	r3, #1
 800995a:	e7f2      	b.n	8009942 <_printf_float+0x172>
 800995c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009960:	9b08      	ldr	r3, [sp, #32]
 8009962:	4299      	cmp	r1, r3
 8009964:	db05      	blt.n	8009972 <_printf_float+0x1a2>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	6121      	str	r1, [r4, #16]
 800996a:	07d8      	lsls	r0, r3, #31
 800996c:	d5ea      	bpl.n	8009944 <_printf_float+0x174>
 800996e:	1c4b      	adds	r3, r1, #1
 8009970:	e7e7      	b.n	8009942 <_printf_float+0x172>
 8009972:	2900      	cmp	r1, #0
 8009974:	bfd4      	ite	le
 8009976:	f1c1 0202 	rsble	r2, r1, #2
 800997a:	2201      	movgt	r2, #1
 800997c:	4413      	add	r3, r2
 800997e:	e7e0      	b.n	8009942 <_printf_float+0x172>
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	055a      	lsls	r2, r3, #21
 8009984:	d407      	bmi.n	8009996 <_printf_float+0x1c6>
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	4642      	mov	r2, r8
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	47b8      	blx	r7
 8009990:	3001      	adds	r0, #1
 8009992:	d12a      	bne.n	80099ea <_printf_float+0x21a>
 8009994:	e76a      	b.n	800986c <_printf_float+0x9c>
 8009996:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800999a:	f240 80e2 	bls.w	8009b62 <_printf_float+0x392>
 800999e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80099a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099aa:	d133      	bne.n	8009a14 <_printf_float+0x244>
 80099ac:	4a38      	ldr	r2, [pc, #224]	; (8009a90 <_printf_float+0x2c0>)
 80099ae:	2301      	movs	r3, #1
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b8      	blx	r7
 80099b6:	3001      	adds	r0, #1
 80099b8:	f43f af58 	beq.w	800986c <_printf_float+0x9c>
 80099bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	db02      	blt.n	80099ca <_printf_float+0x1fa>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	07d8      	lsls	r0, r3, #31
 80099c8:	d50f      	bpl.n	80099ea <_printf_float+0x21a>
 80099ca:	4653      	mov	r3, sl
 80099cc:	465a      	mov	r2, fp
 80099ce:	4631      	mov	r1, r6
 80099d0:	4628      	mov	r0, r5
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	f43f af49 	beq.w	800986c <_printf_float+0x9c>
 80099da:	f04f 0800 	mov.w	r8, #0
 80099de:	f104 091a 	add.w	r9, r4, #26
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	4543      	cmp	r3, r8
 80099e8:	dc09      	bgt.n	80099fe <_printf_float+0x22e>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	079b      	lsls	r3, r3, #30
 80099ee:	f100 8108 	bmi.w	8009c02 <_printf_float+0x432>
 80099f2:	68e0      	ldr	r0, [r4, #12]
 80099f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f6:	4298      	cmp	r0, r3
 80099f8:	bfb8      	it	lt
 80099fa:	4618      	movlt	r0, r3
 80099fc:	e738      	b.n	8009870 <_printf_float+0xa0>
 80099fe:	2301      	movs	r3, #1
 8009a00:	464a      	mov	r2, r9
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f43f af2f 	beq.w	800986c <_printf_float+0x9c>
 8009a0e:	f108 0801 	add.w	r8, r8, #1
 8009a12:	e7e6      	b.n	80099e2 <_printf_float+0x212>
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	dc3c      	bgt.n	8009a94 <_printf_float+0x2c4>
 8009a1a:	4a1d      	ldr	r2, [pc, #116]	; (8009a90 <_printf_float+0x2c0>)
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4628      	mov	r0, r5
 8009a22:	47b8      	blx	r7
 8009a24:	3001      	adds	r0, #1
 8009a26:	f43f af21 	beq.w	800986c <_printf_float+0x9c>
 8009a2a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	d102      	bne.n	8009a38 <_printf_float+0x268>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	07d9      	lsls	r1, r3, #31
 8009a36:	d5d8      	bpl.n	80099ea <_printf_float+0x21a>
 8009a38:	4653      	mov	r3, sl
 8009a3a:	465a      	mov	r2, fp
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f af12 	beq.w	800986c <_printf_float+0x9c>
 8009a48:	f04f 0900 	mov.w	r9, #0
 8009a4c:	f104 0a1a 	add.w	sl, r4, #26
 8009a50:	9b07      	ldr	r3, [sp, #28]
 8009a52:	425b      	negs	r3, r3
 8009a54:	454b      	cmp	r3, r9
 8009a56:	dc01      	bgt.n	8009a5c <_printf_float+0x28c>
 8009a58:	9b08      	ldr	r3, [sp, #32]
 8009a5a:	e795      	b.n	8009988 <_printf_float+0x1b8>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4652      	mov	r2, sl
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af00 	beq.w	800986c <_printf_float+0x9c>
 8009a6c:	f109 0901 	add.w	r9, r9, #1
 8009a70:	e7ee      	b.n	8009a50 <_printf_float+0x280>
 8009a72:	bf00      	nop
 8009a74:	f3af 8000 	nop.w
 8009a78:	ffffffff 	.word	0xffffffff
 8009a7c:	7fefffff 	.word	0x7fefffff
 8009a80:	0800c0dc 	.word	0x0800c0dc
 8009a84:	0800c0e0 	.word	0x0800c0e0
 8009a88:	0800c0e8 	.word	0x0800c0e8
 8009a8c:	0800c0e4 	.word	0x0800c0e4
 8009a90:	0800c0ec 	.word	0x0800c0ec
 8009a94:	9a08      	ldr	r2, [sp, #32]
 8009a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	bfa8      	it	ge
 8009a9c:	461a      	movge	r2, r3
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	4691      	mov	r9, r2
 8009aa2:	dc38      	bgt.n	8009b16 <_printf_float+0x346>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aac:	f104 021a 	add.w	r2, r4, #26
 8009ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ab2:	9905      	ldr	r1, [sp, #20]
 8009ab4:	9304      	str	r3, [sp, #16]
 8009ab6:	eba3 0309 	sub.w	r3, r3, r9
 8009aba:	428b      	cmp	r3, r1
 8009abc:	dc33      	bgt.n	8009b26 <_printf_float+0x356>
 8009abe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	db3c      	blt.n	8009b40 <_printf_float+0x370>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	07da      	lsls	r2, r3, #31
 8009aca:	d439      	bmi.n	8009b40 <_printf_float+0x370>
 8009acc:	9b08      	ldr	r3, [sp, #32]
 8009ace:	9a04      	ldr	r2, [sp, #16]
 8009ad0:	9907      	ldr	r1, [sp, #28]
 8009ad2:	1a9a      	subs	r2, r3, r2
 8009ad4:	eba3 0901 	sub.w	r9, r3, r1
 8009ad8:	4591      	cmp	r9, r2
 8009ada:	bfa8      	it	ge
 8009adc:	4691      	movge	r9, r2
 8009ade:	f1b9 0f00 	cmp.w	r9, #0
 8009ae2:	dc35      	bgt.n	8009b50 <_printf_float+0x380>
 8009ae4:	f04f 0800 	mov.w	r8, #0
 8009ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aec:	f104 0a1a 	add.w	sl, r4, #26
 8009af0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	eba3 0309 	sub.w	r3, r3, r9
 8009afa:	4543      	cmp	r3, r8
 8009afc:	f77f af75 	ble.w	80099ea <_printf_float+0x21a>
 8009b00:	2301      	movs	r3, #1
 8009b02:	4652      	mov	r2, sl
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f aeae 	beq.w	800986c <_printf_float+0x9c>
 8009b10:	f108 0801 	add.w	r8, r8, #1
 8009b14:	e7ec      	b.n	8009af0 <_printf_float+0x320>
 8009b16:	4613      	mov	r3, r2
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4642      	mov	r2, r8
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	47b8      	blx	r7
 8009b20:	3001      	adds	r0, #1
 8009b22:	d1bf      	bne.n	8009aa4 <_printf_float+0x2d4>
 8009b24:	e6a2      	b.n	800986c <_printf_float+0x9c>
 8009b26:	2301      	movs	r3, #1
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	9204      	str	r2, [sp, #16]
 8009b2e:	47b8      	blx	r7
 8009b30:	3001      	adds	r0, #1
 8009b32:	f43f ae9b 	beq.w	800986c <_printf_float+0x9c>
 8009b36:	9b05      	ldr	r3, [sp, #20]
 8009b38:	9a04      	ldr	r2, [sp, #16]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	9305      	str	r3, [sp, #20]
 8009b3e:	e7b7      	b.n	8009ab0 <_printf_float+0x2e0>
 8009b40:	4653      	mov	r3, sl
 8009b42:	465a      	mov	r2, fp
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d1be      	bne.n	8009acc <_printf_float+0x2fc>
 8009b4e:	e68d      	b.n	800986c <_printf_float+0x9c>
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	464b      	mov	r3, r9
 8009b54:	4442      	add	r2, r8
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d1c1      	bne.n	8009ae4 <_printf_float+0x314>
 8009b60:	e684      	b.n	800986c <_printf_float+0x9c>
 8009b62:	9a08      	ldr	r2, [sp, #32]
 8009b64:	2a01      	cmp	r2, #1
 8009b66:	dc01      	bgt.n	8009b6c <_printf_float+0x39c>
 8009b68:	07db      	lsls	r3, r3, #31
 8009b6a:	d537      	bpl.n	8009bdc <_printf_float+0x40c>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4642      	mov	r2, r8
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f ae78 	beq.w	800986c <_printf_float+0x9c>
 8009b7c:	4653      	mov	r3, sl
 8009b7e:	465a      	mov	r2, fp
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f ae70 	beq.w	800986c <_printf_float+0x9c>
 8009b8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b98:	d01b      	beq.n	8009bd2 <_printf_float+0x402>
 8009b9a:	9b08      	ldr	r3, [sp, #32]
 8009b9c:	f108 0201 	add.w	r2, r8, #1
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	47b8      	blx	r7
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d10e      	bne.n	8009bca <_printf_float+0x3fa>
 8009bac:	e65e      	b.n	800986c <_printf_float+0x9c>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	464a      	mov	r2, r9
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b8      	blx	r7
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f43f ae57 	beq.w	800986c <_printf_float+0x9c>
 8009bbe:	f108 0801 	add.w	r8, r8, #1
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	4543      	cmp	r3, r8
 8009bc8:	dcf1      	bgt.n	8009bae <_printf_float+0x3de>
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bd0:	e6db      	b.n	800998a <_printf_float+0x1ba>
 8009bd2:	f04f 0800 	mov.w	r8, #0
 8009bd6:	f104 091a 	add.w	r9, r4, #26
 8009bda:	e7f2      	b.n	8009bc2 <_printf_float+0x3f2>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	4642      	mov	r2, r8
 8009be0:	e7df      	b.n	8009ba2 <_printf_float+0x3d2>
 8009be2:	2301      	movs	r3, #1
 8009be4:	464a      	mov	r2, r9
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	47b8      	blx	r7
 8009bec:	3001      	adds	r0, #1
 8009bee:	f43f ae3d 	beq.w	800986c <_printf_float+0x9c>
 8009bf2:	f108 0801 	add.w	r8, r8, #1
 8009bf6:	68e3      	ldr	r3, [r4, #12]
 8009bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bfa:	1a5b      	subs	r3, r3, r1
 8009bfc:	4543      	cmp	r3, r8
 8009bfe:	dcf0      	bgt.n	8009be2 <_printf_float+0x412>
 8009c00:	e6f7      	b.n	80099f2 <_printf_float+0x222>
 8009c02:	f04f 0800 	mov.w	r8, #0
 8009c06:	f104 0919 	add.w	r9, r4, #25
 8009c0a:	e7f4      	b.n	8009bf6 <_printf_float+0x426>

08009c0c <_printf_common>:
 8009c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	4616      	mov	r6, r2
 8009c12:	4699      	mov	r9, r3
 8009c14:	688a      	ldr	r2, [r1, #8]
 8009c16:	690b      	ldr	r3, [r1, #16]
 8009c18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	bfb8      	it	lt
 8009c20:	4613      	movlt	r3, r2
 8009c22:	6033      	str	r3, [r6, #0]
 8009c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c28:	4607      	mov	r7, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	b10a      	cbz	r2, 8009c32 <_printf_common+0x26>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	6033      	str	r3, [r6, #0]
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	0699      	lsls	r1, r3, #26
 8009c36:	bf42      	ittt	mi
 8009c38:	6833      	ldrmi	r3, [r6, #0]
 8009c3a:	3302      	addmi	r3, #2
 8009c3c:	6033      	strmi	r3, [r6, #0]
 8009c3e:	6825      	ldr	r5, [r4, #0]
 8009c40:	f015 0506 	ands.w	r5, r5, #6
 8009c44:	d106      	bne.n	8009c54 <_printf_common+0x48>
 8009c46:	f104 0a19 	add.w	sl, r4, #25
 8009c4a:	68e3      	ldr	r3, [r4, #12]
 8009c4c:	6832      	ldr	r2, [r6, #0]
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	dc26      	bgt.n	8009ca2 <_printf_common+0x96>
 8009c54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c58:	1e13      	subs	r3, r2, #0
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	bf18      	it	ne
 8009c5e:	2301      	movne	r3, #1
 8009c60:	0692      	lsls	r2, r2, #26
 8009c62:	d42b      	bmi.n	8009cbc <_printf_common+0xb0>
 8009c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c68:	4649      	mov	r1, r9
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	47c0      	blx	r8
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d01e      	beq.n	8009cb0 <_printf_common+0xa4>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	68e5      	ldr	r5, [r4, #12]
 8009c76:	6832      	ldr	r2, [r6, #0]
 8009c78:	f003 0306 	and.w	r3, r3, #6
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	bf08      	it	eq
 8009c80:	1aad      	subeq	r5, r5, r2
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	6922      	ldr	r2, [r4, #16]
 8009c86:	bf0c      	ite	eq
 8009c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c8c:	2500      	movne	r5, #0
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	bfc4      	itt	gt
 8009c92:	1a9b      	subgt	r3, r3, r2
 8009c94:	18ed      	addgt	r5, r5, r3
 8009c96:	2600      	movs	r6, #0
 8009c98:	341a      	adds	r4, #26
 8009c9a:	42b5      	cmp	r5, r6
 8009c9c:	d11a      	bne.n	8009cd4 <_printf_common+0xc8>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	e008      	b.n	8009cb4 <_printf_common+0xa8>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	4638      	mov	r0, r7
 8009caa:	47c0      	blx	r8
 8009cac:	3001      	adds	r0, #1
 8009cae:	d103      	bne.n	8009cb8 <_printf_common+0xac>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb8:	3501      	adds	r5, #1
 8009cba:	e7c6      	b.n	8009c4a <_printf_common+0x3e>
 8009cbc:	18e1      	adds	r1, r4, r3
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	2030      	movs	r0, #48	; 0x30
 8009cc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cc6:	4422      	add	r2, r4
 8009cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	e7c7      	b.n	8009c64 <_printf_common+0x58>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4649      	mov	r1, r9
 8009cda:	4638      	mov	r0, r7
 8009cdc:	47c0      	blx	r8
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d0e6      	beq.n	8009cb0 <_printf_common+0xa4>
 8009ce2:	3601      	adds	r6, #1
 8009ce4:	e7d9      	b.n	8009c9a <_printf_common+0x8e>
	...

08009ce8 <_printf_i>:
 8009ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	7e0f      	ldrb	r7, [r1, #24]
 8009cee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cf0:	2f78      	cmp	r7, #120	; 0x78
 8009cf2:	4691      	mov	r9, r2
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	469a      	mov	sl, r3
 8009cfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cfe:	d807      	bhi.n	8009d10 <_printf_i+0x28>
 8009d00:	2f62      	cmp	r7, #98	; 0x62
 8009d02:	d80a      	bhi.n	8009d1a <_printf_i+0x32>
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	f000 80d8 	beq.w	8009eba <_printf_i+0x1d2>
 8009d0a:	2f58      	cmp	r7, #88	; 0x58
 8009d0c:	f000 80a3 	beq.w	8009e56 <_printf_i+0x16e>
 8009d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d18:	e03a      	b.n	8009d90 <_printf_i+0xa8>
 8009d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d1e:	2b15      	cmp	r3, #21
 8009d20:	d8f6      	bhi.n	8009d10 <_printf_i+0x28>
 8009d22:	a101      	add	r1, pc, #4	; (adr r1, 8009d28 <_printf_i+0x40>)
 8009d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d28:	08009d81 	.word	0x08009d81
 8009d2c:	08009d95 	.word	0x08009d95
 8009d30:	08009d11 	.word	0x08009d11
 8009d34:	08009d11 	.word	0x08009d11
 8009d38:	08009d11 	.word	0x08009d11
 8009d3c:	08009d11 	.word	0x08009d11
 8009d40:	08009d95 	.word	0x08009d95
 8009d44:	08009d11 	.word	0x08009d11
 8009d48:	08009d11 	.word	0x08009d11
 8009d4c:	08009d11 	.word	0x08009d11
 8009d50:	08009d11 	.word	0x08009d11
 8009d54:	08009ea1 	.word	0x08009ea1
 8009d58:	08009dc5 	.word	0x08009dc5
 8009d5c:	08009e83 	.word	0x08009e83
 8009d60:	08009d11 	.word	0x08009d11
 8009d64:	08009d11 	.word	0x08009d11
 8009d68:	08009ec3 	.word	0x08009ec3
 8009d6c:	08009d11 	.word	0x08009d11
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009d11 	.word	0x08009d11
 8009d78:	08009d11 	.word	0x08009d11
 8009d7c:	08009e8b 	.word	0x08009e8b
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	1d1a      	adds	r2, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	602a      	str	r2, [r5, #0]
 8009d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d90:	2301      	movs	r3, #1
 8009d92:	e0a3      	b.n	8009edc <_printf_i+0x1f4>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	6829      	ldr	r1, [r5, #0]
 8009d98:	0606      	lsls	r6, r0, #24
 8009d9a:	f101 0304 	add.w	r3, r1, #4
 8009d9e:	d50a      	bpl.n	8009db6 <_printf_i+0xce>
 8009da0:	680e      	ldr	r6, [r1, #0]
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	2e00      	cmp	r6, #0
 8009da6:	da03      	bge.n	8009db0 <_printf_i+0xc8>
 8009da8:	232d      	movs	r3, #45	; 0x2d
 8009daa:	4276      	negs	r6, r6
 8009dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db0:	485e      	ldr	r0, [pc, #376]	; (8009f2c <_printf_i+0x244>)
 8009db2:	230a      	movs	r3, #10
 8009db4:	e019      	b.n	8009dea <_printf_i+0x102>
 8009db6:	680e      	ldr	r6, [r1, #0]
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dbe:	bf18      	it	ne
 8009dc0:	b236      	sxthne	r6, r6
 8009dc2:	e7ef      	b.n	8009da4 <_printf_i+0xbc>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	1d19      	adds	r1, r3, #4
 8009dca:	6029      	str	r1, [r5, #0]
 8009dcc:	0601      	lsls	r1, r0, #24
 8009dce:	d501      	bpl.n	8009dd4 <_printf_i+0xec>
 8009dd0:	681e      	ldr	r6, [r3, #0]
 8009dd2:	e002      	b.n	8009dda <_printf_i+0xf2>
 8009dd4:	0646      	lsls	r6, r0, #25
 8009dd6:	d5fb      	bpl.n	8009dd0 <_printf_i+0xe8>
 8009dd8:	881e      	ldrh	r6, [r3, #0]
 8009dda:	4854      	ldr	r0, [pc, #336]	; (8009f2c <_printf_i+0x244>)
 8009ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8009dde:	bf0c      	ite	eq
 8009de0:	2308      	moveq	r3, #8
 8009de2:	230a      	movne	r3, #10
 8009de4:	2100      	movs	r1, #0
 8009de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dea:	6865      	ldr	r5, [r4, #4]
 8009dec:	60a5      	str	r5, [r4, #8]
 8009dee:	2d00      	cmp	r5, #0
 8009df0:	bfa2      	ittt	ge
 8009df2:	6821      	ldrge	r1, [r4, #0]
 8009df4:	f021 0104 	bicge.w	r1, r1, #4
 8009df8:	6021      	strge	r1, [r4, #0]
 8009dfa:	b90e      	cbnz	r6, 8009e00 <_printf_i+0x118>
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	d04d      	beq.n	8009e9c <_printf_i+0x1b4>
 8009e00:	4615      	mov	r5, r2
 8009e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e06:	fb03 6711 	mls	r7, r3, r1, r6
 8009e0a:	5dc7      	ldrb	r7, [r0, r7]
 8009e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e10:	4637      	mov	r7, r6
 8009e12:	42bb      	cmp	r3, r7
 8009e14:	460e      	mov	r6, r1
 8009e16:	d9f4      	bls.n	8009e02 <_printf_i+0x11a>
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d10b      	bne.n	8009e34 <_printf_i+0x14c>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	07de      	lsls	r6, r3, #31
 8009e20:	d508      	bpl.n	8009e34 <_printf_i+0x14c>
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	6861      	ldr	r1, [r4, #4]
 8009e26:	4299      	cmp	r1, r3
 8009e28:	bfde      	ittt	le
 8009e2a:	2330      	movle	r3, #48	; 0x30
 8009e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e34:	1b52      	subs	r2, r2, r5
 8009e36:	6122      	str	r2, [r4, #16]
 8009e38:	f8cd a000 	str.w	sl, [sp]
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	aa03      	add	r2, sp, #12
 8009e40:	4621      	mov	r1, r4
 8009e42:	4640      	mov	r0, r8
 8009e44:	f7ff fee2 	bl	8009c0c <_printf_common>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d14c      	bne.n	8009ee6 <_printf_i+0x1fe>
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e50:	b004      	add	sp, #16
 8009e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e56:	4835      	ldr	r0, [pc, #212]	; (8009f2c <_printf_i+0x244>)
 8009e58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e5c:	6829      	ldr	r1, [r5, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e64:	6029      	str	r1, [r5, #0]
 8009e66:	061d      	lsls	r5, r3, #24
 8009e68:	d514      	bpl.n	8009e94 <_printf_i+0x1ac>
 8009e6a:	07df      	lsls	r7, r3, #31
 8009e6c:	bf44      	itt	mi
 8009e6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009e72:	6023      	strmi	r3, [r4, #0]
 8009e74:	b91e      	cbnz	r6, 8009e7e <_printf_i+0x196>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	f023 0320 	bic.w	r3, r3, #32
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	2310      	movs	r3, #16
 8009e80:	e7b0      	b.n	8009de4 <_printf_i+0xfc>
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	f043 0320 	orr.w	r3, r3, #32
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	2378      	movs	r3, #120	; 0x78
 8009e8c:	4828      	ldr	r0, [pc, #160]	; (8009f30 <_printf_i+0x248>)
 8009e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e92:	e7e3      	b.n	8009e5c <_printf_i+0x174>
 8009e94:	0659      	lsls	r1, r3, #25
 8009e96:	bf48      	it	mi
 8009e98:	b2b6      	uxthmi	r6, r6
 8009e9a:	e7e6      	b.n	8009e6a <_printf_i+0x182>
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	e7bb      	b.n	8009e18 <_printf_i+0x130>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	6826      	ldr	r6, [r4, #0]
 8009ea4:	6961      	ldr	r1, [r4, #20]
 8009ea6:	1d18      	adds	r0, r3, #4
 8009ea8:	6028      	str	r0, [r5, #0]
 8009eaa:	0635      	lsls	r5, r6, #24
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	d501      	bpl.n	8009eb4 <_printf_i+0x1cc>
 8009eb0:	6019      	str	r1, [r3, #0]
 8009eb2:	e002      	b.n	8009eba <_printf_i+0x1d2>
 8009eb4:	0670      	lsls	r0, r6, #25
 8009eb6:	d5fb      	bpl.n	8009eb0 <_printf_i+0x1c8>
 8009eb8:	8019      	strh	r1, [r3, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	6123      	str	r3, [r4, #16]
 8009ebe:	4615      	mov	r5, r2
 8009ec0:	e7ba      	b.n	8009e38 <_printf_i+0x150>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	1d1a      	adds	r2, r3, #4
 8009ec6:	602a      	str	r2, [r5, #0]
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	6862      	ldr	r2, [r4, #4]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f7f6 fa0e 	bl	80002f0 <memchr>
 8009ed4:	b108      	cbz	r0, 8009eda <_printf_i+0x1f2>
 8009ed6:	1b40      	subs	r0, r0, r5
 8009ed8:	6060      	str	r0, [r4, #4]
 8009eda:	6863      	ldr	r3, [r4, #4]
 8009edc:	6123      	str	r3, [r4, #16]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee4:	e7a8      	b.n	8009e38 <_printf_i+0x150>
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4649      	mov	r1, r9
 8009eec:	4640      	mov	r0, r8
 8009eee:	47d0      	blx	sl
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d0ab      	beq.n	8009e4c <_printf_i+0x164>
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	079b      	lsls	r3, r3, #30
 8009ef8:	d413      	bmi.n	8009f22 <_printf_i+0x23a>
 8009efa:	68e0      	ldr	r0, [r4, #12]
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	4298      	cmp	r0, r3
 8009f00:	bfb8      	it	lt
 8009f02:	4618      	movlt	r0, r3
 8009f04:	e7a4      	b.n	8009e50 <_printf_i+0x168>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4632      	mov	r2, r6
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	4640      	mov	r0, r8
 8009f0e:	47d0      	blx	sl
 8009f10:	3001      	adds	r0, #1
 8009f12:	d09b      	beq.n	8009e4c <_printf_i+0x164>
 8009f14:	3501      	adds	r5, #1
 8009f16:	68e3      	ldr	r3, [r4, #12]
 8009f18:	9903      	ldr	r1, [sp, #12]
 8009f1a:	1a5b      	subs	r3, r3, r1
 8009f1c:	42ab      	cmp	r3, r5
 8009f1e:	dcf2      	bgt.n	8009f06 <_printf_i+0x21e>
 8009f20:	e7eb      	b.n	8009efa <_printf_i+0x212>
 8009f22:	2500      	movs	r5, #0
 8009f24:	f104 0619 	add.w	r6, r4, #25
 8009f28:	e7f5      	b.n	8009f16 <_printf_i+0x22e>
 8009f2a:	bf00      	nop
 8009f2c:	0800c0ee 	.word	0x0800c0ee
 8009f30:	0800c0ff 	.word	0x0800c0ff

08009f34 <iprintf>:
 8009f34:	b40f      	push	{r0, r1, r2, r3}
 8009f36:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <iprintf+0x2c>)
 8009f38:	b513      	push	{r0, r1, r4, lr}
 8009f3a:	681c      	ldr	r4, [r3, #0]
 8009f3c:	b124      	cbz	r4, 8009f48 <iprintf+0x14>
 8009f3e:	69a3      	ldr	r3, [r4, #24]
 8009f40:	b913      	cbnz	r3, 8009f48 <iprintf+0x14>
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fe62 	bl	800ac0c <__sinit>
 8009f48:	ab05      	add	r3, sp, #20
 8009f4a:	9a04      	ldr	r2, [sp, #16]
 8009f4c:	68a1      	ldr	r1, [r4, #8]
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	4620      	mov	r0, r4
 8009f52:	f001 fbad 	bl	800b6b0 <_vfiprintf_r>
 8009f56:	b002      	add	sp, #8
 8009f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f5c:	b004      	add	sp, #16
 8009f5e:	4770      	bx	lr
 8009f60:	24000010 	.word	0x24000010

08009f64 <quorem>:
 8009f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	6903      	ldr	r3, [r0, #16]
 8009f6a:	690c      	ldr	r4, [r1, #16]
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	4607      	mov	r7, r0
 8009f70:	f2c0 8081 	blt.w	800a076 <quorem+0x112>
 8009f74:	3c01      	subs	r4, #1
 8009f76:	f101 0814 	add.w	r8, r1, #20
 8009f7a:	f100 0514 	add.w	r5, r0, #20
 8009f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f82:	9301      	str	r3, [sp, #4]
 8009f84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f98:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f9c:	d331      	bcc.n	800a002 <quorem+0x9e>
 8009f9e:	f04f 0e00 	mov.w	lr, #0
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	46ac      	mov	ip, r5
 8009fa6:	46f2      	mov	sl, lr
 8009fa8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fac:	b293      	uxth	r3, r2
 8009fae:	fb06 e303 	mla	r3, r6, r3, lr
 8009fb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8009fbc:	f8dc a000 	ldr.w	sl, [ip]
 8009fc0:	0c12      	lsrs	r2, r2, #16
 8009fc2:	fa13 f38a 	uxtah	r3, r3, sl
 8009fc6:	fb06 e202 	mla	r2, r6, r2, lr
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	9b00      	ldr	r3, [sp, #0]
 8009fce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fd2:	b292      	uxth	r2, r2
 8009fd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fdc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fe0:	4581      	cmp	r9, r0
 8009fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fe6:	f84c 3b04 	str.w	r3, [ip], #4
 8009fea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fee:	d2db      	bcs.n	8009fa8 <quorem+0x44>
 8009ff0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ff4:	b92b      	cbnz	r3, 800a002 <quorem+0x9e>
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	429d      	cmp	r5, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	d32e      	bcc.n	800a05e <quorem+0xfa>
 800a000:	613c      	str	r4, [r7, #16]
 800a002:	4638      	mov	r0, r7
 800a004:	f001 f932 	bl	800b26c <__mcmp>
 800a008:	2800      	cmp	r0, #0
 800a00a:	db24      	blt.n	800a056 <quorem+0xf2>
 800a00c:	3601      	adds	r6, #1
 800a00e:	4628      	mov	r0, r5
 800a010:	f04f 0c00 	mov.w	ip, #0
 800a014:	f858 2b04 	ldr.w	r2, [r8], #4
 800a018:	f8d0 e000 	ldr.w	lr, [r0]
 800a01c:	b293      	uxth	r3, r2
 800a01e:	ebac 0303 	sub.w	r3, ip, r3
 800a022:	0c12      	lsrs	r2, r2, #16
 800a024:	fa13 f38e 	uxtah	r3, r3, lr
 800a028:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a02c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a030:	b29b      	uxth	r3, r3
 800a032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a036:	45c1      	cmp	r9, r8
 800a038:	f840 3b04 	str.w	r3, [r0], #4
 800a03c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a040:	d2e8      	bcs.n	800a014 <quorem+0xb0>
 800a042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a04a:	b922      	cbnz	r2, 800a056 <quorem+0xf2>
 800a04c:	3b04      	subs	r3, #4
 800a04e:	429d      	cmp	r5, r3
 800a050:	461a      	mov	r2, r3
 800a052:	d30a      	bcc.n	800a06a <quorem+0x106>
 800a054:	613c      	str	r4, [r7, #16]
 800a056:	4630      	mov	r0, r6
 800a058:	b003      	add	sp, #12
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	3b04      	subs	r3, #4
 800a062:	2a00      	cmp	r2, #0
 800a064:	d1cc      	bne.n	800a000 <quorem+0x9c>
 800a066:	3c01      	subs	r4, #1
 800a068:	e7c7      	b.n	8009ffa <quorem+0x96>
 800a06a:	6812      	ldr	r2, [r2, #0]
 800a06c:	3b04      	subs	r3, #4
 800a06e:	2a00      	cmp	r2, #0
 800a070:	d1f0      	bne.n	800a054 <quorem+0xf0>
 800a072:	3c01      	subs	r4, #1
 800a074:	e7eb      	b.n	800a04e <quorem+0xea>
 800a076:	2000      	movs	r0, #0
 800a078:	e7ee      	b.n	800a058 <quorem+0xf4>
 800a07a:	0000      	movs	r0, r0
 800a07c:	0000      	movs	r0, r0
	...

0800a080 <_dtoa_r>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	ed2d 8b02 	vpush	{d8}
 800a088:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a08a:	b091      	sub	sp, #68	; 0x44
 800a08c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a090:	ec59 8b10 	vmov	r8, r9, d0
 800a094:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a096:	9106      	str	r1, [sp, #24]
 800a098:	4606      	mov	r6, r0
 800a09a:	9208      	str	r2, [sp, #32]
 800a09c:	930c      	str	r3, [sp, #48]	; 0x30
 800a09e:	b975      	cbnz	r5, 800a0be <_dtoa_r+0x3e>
 800a0a0:	2010      	movs	r0, #16
 800a0a2:	f000 fe59 	bl	800ad58 <malloc>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a0aa:	b920      	cbnz	r0, 800a0b6 <_dtoa_r+0x36>
 800a0ac:	4baa      	ldr	r3, [pc, #680]	; (800a358 <_dtoa_r+0x2d8>)
 800a0ae:	21ea      	movs	r1, #234	; 0xea
 800a0b0:	48aa      	ldr	r0, [pc, #680]	; (800a35c <_dtoa_r+0x2dc>)
 800a0b2:	f001 fd53 	bl	800bb5c <__assert_func>
 800a0b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0ba:	6005      	str	r5, [r0, #0]
 800a0bc:	60c5      	str	r5, [r0, #12]
 800a0be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0c0:	6819      	ldr	r1, [r3, #0]
 800a0c2:	b151      	cbz	r1, 800a0da <_dtoa_r+0x5a>
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	604a      	str	r2, [r1, #4]
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4093      	lsls	r3, r2
 800a0cc:	608b      	str	r3, [r1, #8]
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f000 fe8a 	bl	800ade8 <_Bfree>
 800a0d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	f1b9 0300 	subs.w	r3, r9, #0
 800a0de:	bfbb      	ittet	lt
 800a0e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0e4:	9303      	strlt	r3, [sp, #12]
 800a0e6:	2300      	movge	r3, #0
 800a0e8:	2201      	movlt	r2, #1
 800a0ea:	bfac      	ite	ge
 800a0ec:	6023      	strge	r3, [r4, #0]
 800a0ee:	6022      	strlt	r2, [r4, #0]
 800a0f0:	4b9b      	ldr	r3, [pc, #620]	; (800a360 <_dtoa_r+0x2e0>)
 800a0f2:	9c03      	ldr	r4, [sp, #12]
 800a0f4:	43a3      	bics	r3, r4
 800a0f6:	d11c      	bne.n	800a132 <_dtoa_r+0xb2>
 800a0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a104:	ea53 0308 	orrs.w	r3, r3, r8
 800a108:	f000 84fd 	beq.w	800ab06 <_dtoa_r+0xa86>
 800a10c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a10e:	b963      	cbnz	r3, 800a12a <_dtoa_r+0xaa>
 800a110:	4b94      	ldr	r3, [pc, #592]	; (800a364 <_dtoa_r+0x2e4>)
 800a112:	e01f      	b.n	800a154 <_dtoa_r+0xd4>
 800a114:	4b94      	ldr	r3, [pc, #592]	; (800a368 <_dtoa_r+0x2e8>)
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	3308      	adds	r3, #8
 800a11a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	9801      	ldr	r0, [sp, #4]
 800a120:	b011      	add	sp, #68	; 0x44
 800a122:	ecbd 8b02 	vpop	{d8}
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	4b8e      	ldr	r3, [pc, #568]	; (800a364 <_dtoa_r+0x2e4>)
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	3303      	adds	r3, #3
 800a130:	e7f3      	b.n	800a11a <_dtoa_r+0x9a>
 800a132:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a136:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13e:	d10b      	bne.n	800a158 <_dtoa_r+0xd8>
 800a140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a142:	2301      	movs	r3, #1
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 84d9 	beq.w	800ab00 <_dtoa_r+0xa80>
 800a14e:	4887      	ldr	r0, [pc, #540]	; (800a36c <_dtoa_r+0x2ec>)
 800a150:	6018      	str	r0, [r3, #0]
 800a152:	1e43      	subs	r3, r0, #1
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	e7e2      	b.n	800a11e <_dtoa_r+0x9e>
 800a158:	a90f      	add	r1, sp, #60	; 0x3c
 800a15a:	aa0e      	add	r2, sp, #56	; 0x38
 800a15c:	4630      	mov	r0, r6
 800a15e:	eeb0 0b48 	vmov.f64	d0, d8
 800a162:	f001 f929 	bl	800b3b8 <__d2b>
 800a166:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a16a:	4605      	mov	r5, r0
 800a16c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a16e:	2900      	cmp	r1, #0
 800a170:	d046      	beq.n	800a200 <_dtoa_r+0x180>
 800a172:	ee18 4a90 	vmov	r4, s17
 800a176:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a17a:	ec53 2b18 	vmov	r2, r3, d8
 800a17e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a182:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a186:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a18a:	2400      	movs	r4, #0
 800a18c:	ec43 2b16 	vmov	d6, r2, r3
 800a190:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a194:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a340 <_dtoa_r+0x2c0>
 800a198:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a19c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a348 <_dtoa_r+0x2c8>
 800a1a0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a1a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a350 <_dtoa_r+0x2d0>
 800a1a8:	ee07 1a90 	vmov	s15, r1
 800a1ac:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a1b0:	eeb0 7b46 	vmov.f64	d7, d6
 800a1b4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a1b8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a1bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c4:	ee16 ba90 	vmov	fp, s13
 800a1c8:	940a      	str	r4, [sp, #40]	; 0x28
 800a1ca:	d508      	bpl.n	800a1de <_dtoa_r+0x15e>
 800a1cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a1d0:	eeb4 6b47 	vcmp.f64	d6, d7
 800a1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d8:	bf18      	it	ne
 800a1da:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a1de:	f1bb 0f16 	cmp.w	fp, #22
 800a1e2:	d82f      	bhi.n	800a244 <_dtoa_r+0x1c4>
 800a1e4:	4b62      	ldr	r3, [pc, #392]	; (800a370 <_dtoa_r+0x2f0>)
 800a1e6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1ea:	ed93 7b00 	vldr	d7, [r3]
 800a1ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f6:	d501      	bpl.n	800a1fc <_dtoa_r+0x17c>
 800a1f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	e022      	b.n	800a246 <_dtoa_r+0x1c6>
 800a200:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a202:	4401      	add	r1, r0
 800a204:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a208:	2b20      	cmp	r3, #32
 800a20a:	bfc1      	itttt	gt
 800a20c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a210:	fa04 f303 	lslgt.w	r3, r4, r3
 800a214:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a218:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a21c:	bfd6      	itet	le
 800a21e:	f1c3 0320 	rsble	r3, r3, #32
 800a222:	ea43 0808 	orrgt.w	r8, r3, r8
 800a226:	fa08 f803 	lslle.w	r8, r8, r3
 800a22a:	ee07 8a90 	vmov	s15, r8
 800a22e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a232:	3901      	subs	r1, #1
 800a234:	ee17 4a90 	vmov	r4, s15
 800a238:	ec53 2b17 	vmov	r2, r3, d7
 800a23c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a240:	2401      	movs	r4, #1
 800a242:	e7a3      	b.n	800a18c <_dtoa_r+0x10c>
 800a244:	2301      	movs	r3, #1
 800a246:	930b      	str	r3, [sp, #44]	; 0x2c
 800a248:	1a43      	subs	r3, r0, r1
 800a24a:	1e5a      	subs	r2, r3, #1
 800a24c:	bf45      	ittet	mi
 800a24e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a252:	9304      	strmi	r3, [sp, #16]
 800a254:	2300      	movpl	r3, #0
 800a256:	2300      	movmi	r3, #0
 800a258:	9205      	str	r2, [sp, #20]
 800a25a:	bf54      	ite	pl
 800a25c:	9304      	strpl	r3, [sp, #16]
 800a25e:	9305      	strmi	r3, [sp, #20]
 800a260:	f1bb 0f00 	cmp.w	fp, #0
 800a264:	db18      	blt.n	800a298 <_dtoa_r+0x218>
 800a266:	9b05      	ldr	r3, [sp, #20]
 800a268:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a26c:	445b      	add	r3, fp
 800a26e:	9305      	str	r3, [sp, #20]
 800a270:	2300      	movs	r3, #0
 800a272:	9a06      	ldr	r2, [sp, #24]
 800a274:	2a09      	cmp	r2, #9
 800a276:	d849      	bhi.n	800a30c <_dtoa_r+0x28c>
 800a278:	2a05      	cmp	r2, #5
 800a27a:	bfc4      	itt	gt
 800a27c:	3a04      	subgt	r2, #4
 800a27e:	9206      	strgt	r2, [sp, #24]
 800a280:	9a06      	ldr	r2, [sp, #24]
 800a282:	f1a2 0202 	sub.w	r2, r2, #2
 800a286:	bfcc      	ite	gt
 800a288:	2400      	movgt	r4, #0
 800a28a:	2401      	movle	r4, #1
 800a28c:	2a03      	cmp	r2, #3
 800a28e:	d848      	bhi.n	800a322 <_dtoa_r+0x2a2>
 800a290:	e8df f002 	tbb	[pc, r2]
 800a294:	3a2c2e0b 	.word	0x3a2c2e0b
 800a298:	9b04      	ldr	r3, [sp, #16]
 800a29a:	2200      	movs	r2, #0
 800a29c:	eba3 030b 	sub.w	r3, r3, fp
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a2a4:	f1cb 0300 	rsb	r3, fp, #0
 800a2a8:	e7e3      	b.n	800a272 <_dtoa_r+0x1f2>
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	9207      	str	r2, [sp, #28]
 800a2ae:	9a08      	ldr	r2, [sp, #32]
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	dc39      	bgt.n	800a328 <_dtoa_r+0x2a8>
 800a2b4:	f04f 0a01 	mov.w	sl, #1
 800a2b8:	46d1      	mov	r9, sl
 800a2ba:	4652      	mov	r2, sl
 800a2bc:	f8cd a020 	str.w	sl, [sp, #32]
 800a2c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6079      	str	r1, [r7, #4]
 800a2c6:	2004      	movs	r0, #4
 800a2c8:	f100 0c14 	add.w	ip, r0, #20
 800a2cc:	4594      	cmp	ip, r2
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	d92f      	bls.n	800a332 <_dtoa_r+0x2b2>
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	930d      	str	r3, [sp, #52]	; 0x34
 800a2d6:	f000 fd47 	bl	800ad68 <_Balloc>
 800a2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2dc:	9001      	str	r0, [sp, #4]
 800a2de:	4602      	mov	r2, r0
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d149      	bne.n	800a378 <_dtoa_r+0x2f8>
 800a2e4:	4b23      	ldr	r3, [pc, #140]	; (800a374 <_dtoa_r+0x2f4>)
 800a2e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2ea:	e6e1      	b.n	800a0b0 <_dtoa_r+0x30>
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	e7dd      	b.n	800a2ac <_dtoa_r+0x22c>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	9207      	str	r2, [sp, #28]
 800a2f4:	9a08      	ldr	r2, [sp, #32]
 800a2f6:	eb0b 0a02 	add.w	sl, fp, r2
 800a2fa:	f10a 0901 	add.w	r9, sl, #1
 800a2fe:	464a      	mov	r2, r9
 800a300:	2a01      	cmp	r2, #1
 800a302:	bfb8      	it	lt
 800a304:	2201      	movlt	r2, #1
 800a306:	e7db      	b.n	800a2c0 <_dtoa_r+0x240>
 800a308:	2201      	movs	r2, #1
 800a30a:	e7f2      	b.n	800a2f2 <_dtoa_r+0x272>
 800a30c:	2401      	movs	r4, #1
 800a30e:	2200      	movs	r2, #0
 800a310:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a314:	f04f 3aff 	mov.w	sl, #4294967295
 800a318:	2100      	movs	r1, #0
 800a31a:	46d1      	mov	r9, sl
 800a31c:	2212      	movs	r2, #18
 800a31e:	9108      	str	r1, [sp, #32]
 800a320:	e7ce      	b.n	800a2c0 <_dtoa_r+0x240>
 800a322:	2201      	movs	r2, #1
 800a324:	9207      	str	r2, [sp, #28]
 800a326:	e7f5      	b.n	800a314 <_dtoa_r+0x294>
 800a328:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a32c:	46d1      	mov	r9, sl
 800a32e:	4652      	mov	r2, sl
 800a330:	e7c6      	b.n	800a2c0 <_dtoa_r+0x240>
 800a332:	3101      	adds	r1, #1
 800a334:	6079      	str	r1, [r7, #4]
 800a336:	0040      	lsls	r0, r0, #1
 800a338:	e7c6      	b.n	800a2c8 <_dtoa_r+0x248>
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w
 800a340:	636f4361 	.word	0x636f4361
 800a344:	3fd287a7 	.word	0x3fd287a7
 800a348:	8b60c8b3 	.word	0x8b60c8b3
 800a34c:	3fc68a28 	.word	0x3fc68a28
 800a350:	509f79fb 	.word	0x509f79fb
 800a354:	3fd34413 	.word	0x3fd34413
 800a358:	0800c11d 	.word	0x0800c11d
 800a35c:	0800c134 	.word	0x0800c134
 800a360:	7ff00000 	.word	0x7ff00000
 800a364:	0800c119 	.word	0x0800c119
 800a368:	0800c110 	.word	0x0800c110
 800a36c:	0800c0ed 	.word	0x0800c0ed
 800a370:	0800c288 	.word	0x0800c288
 800a374:	0800c18f 	.word	0x0800c18f
 800a378:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a37a:	9901      	ldr	r1, [sp, #4]
 800a37c:	6011      	str	r1, [r2, #0]
 800a37e:	f1b9 0f0e 	cmp.w	r9, #14
 800a382:	d86c      	bhi.n	800a45e <_dtoa_r+0x3de>
 800a384:	2c00      	cmp	r4, #0
 800a386:	d06a      	beq.n	800a45e <_dtoa_r+0x3de>
 800a388:	f1bb 0f00 	cmp.w	fp, #0
 800a38c:	f340 80a0 	ble.w	800a4d0 <_dtoa_r+0x450>
 800a390:	49c1      	ldr	r1, [pc, #772]	; (800a698 <_dtoa_r+0x618>)
 800a392:	f00b 020f 	and.w	r2, fp, #15
 800a396:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a39a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a39e:	ed92 7b00 	vldr	d7, [r2]
 800a3a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a3a6:	f000 8087 	beq.w	800a4b8 <_dtoa_r+0x438>
 800a3aa:	4abc      	ldr	r2, [pc, #752]	; (800a69c <_dtoa_r+0x61c>)
 800a3ac:	ed92 6b08 	vldr	d6, [r2, #32]
 800a3b0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a3b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a3b8:	f001 010f 	and.w	r1, r1, #15
 800a3bc:	2203      	movs	r2, #3
 800a3be:	48b7      	ldr	r0, [pc, #732]	; (800a69c <_dtoa_r+0x61c>)
 800a3c0:	2900      	cmp	r1, #0
 800a3c2:	d17b      	bne.n	800a4bc <_dtoa_r+0x43c>
 800a3c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a3c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a3cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	f000 80a2 	beq.w	800a51c <_dtoa_r+0x49c>
 800a3d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a3dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e8:	f140 8098 	bpl.w	800a51c <_dtoa_r+0x49c>
 800a3ec:	f1b9 0f00 	cmp.w	r9, #0
 800a3f0:	f000 8094 	beq.w	800a51c <_dtoa_r+0x49c>
 800a3f4:	f1ba 0f00 	cmp.w	sl, #0
 800a3f8:	dd2f      	ble.n	800a45a <_dtoa_r+0x3da>
 800a3fa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a3fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a402:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a406:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a40a:	3201      	adds	r2, #1
 800a40c:	4650      	mov	r0, sl
 800a40e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a412:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a416:	ee07 2a90 	vmov	s15, r2
 800a41a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a41e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a422:	ee15 4a90 	vmov	r4, s11
 800a426:	ec52 1b15 	vmov	r1, r2, d5
 800a42a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a42e:	2800      	cmp	r0, #0
 800a430:	d177      	bne.n	800a522 <_dtoa_r+0x4a2>
 800a432:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a436:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a43a:	ec42 1b17 	vmov	d7, r1, r2
 800a43e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a446:	f300 8263 	bgt.w	800a910 <_dtoa_r+0x890>
 800a44a:	eeb1 7b47 	vneg.f64	d7, d7
 800a44e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a456:	f100 8258 	bmi.w	800a90a <_dtoa_r+0x88a>
 800a45a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a45e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a460:	2a00      	cmp	r2, #0
 800a462:	f2c0 811d 	blt.w	800a6a0 <_dtoa_r+0x620>
 800a466:	f1bb 0f0e 	cmp.w	fp, #14
 800a46a:	f300 8119 	bgt.w	800a6a0 <_dtoa_r+0x620>
 800a46e:	4b8a      	ldr	r3, [pc, #552]	; (800a698 <_dtoa_r+0x618>)
 800a470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a474:	ed93 6b00 	vldr	d6, [r3]
 800a478:	9b08      	ldr	r3, [sp, #32]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f280 80b7 	bge.w	800a5ee <_dtoa_r+0x56e>
 800a480:	f1b9 0f00 	cmp.w	r9, #0
 800a484:	f300 80b3 	bgt.w	800a5ee <_dtoa_r+0x56e>
 800a488:	f040 823f 	bne.w	800a90a <_dtoa_r+0x88a>
 800a48c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a490:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a494:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a498:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a0:	464c      	mov	r4, r9
 800a4a2:	464f      	mov	r7, r9
 800a4a4:	f280 8215 	bge.w	800a8d2 <_dtoa_r+0x852>
 800a4a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a4ac:	2331      	movs	r3, #49	; 0x31
 800a4ae:	f808 3b01 	strb.w	r3, [r8], #1
 800a4b2:	f10b 0b01 	add.w	fp, fp, #1
 800a4b6:	e211      	b.n	800a8dc <_dtoa_r+0x85c>
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	e780      	b.n	800a3be <_dtoa_r+0x33e>
 800a4bc:	07cc      	lsls	r4, r1, #31
 800a4be:	d504      	bpl.n	800a4ca <_dtoa_r+0x44a>
 800a4c0:	ed90 6b00 	vldr	d6, [r0]
 800a4c4:	3201      	adds	r2, #1
 800a4c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4ca:	1049      	asrs	r1, r1, #1
 800a4cc:	3008      	adds	r0, #8
 800a4ce:	e777      	b.n	800a3c0 <_dtoa_r+0x340>
 800a4d0:	d022      	beq.n	800a518 <_dtoa_r+0x498>
 800a4d2:	f1cb 0100 	rsb	r1, fp, #0
 800a4d6:	4a70      	ldr	r2, [pc, #448]	; (800a698 <_dtoa_r+0x618>)
 800a4d8:	f001 000f 	and.w	r0, r1, #15
 800a4dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a4e0:	ed92 7b00 	vldr	d7, [r2]
 800a4e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a4e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4ec:	486b      	ldr	r0, [pc, #428]	; (800a69c <_dtoa_r+0x61c>)
 800a4ee:	1109      	asrs	r1, r1, #4
 800a4f0:	2400      	movs	r4, #0
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	b929      	cbnz	r1, 800a502 <_dtoa_r+0x482>
 800a4f6:	2c00      	cmp	r4, #0
 800a4f8:	f43f af6a 	beq.w	800a3d0 <_dtoa_r+0x350>
 800a4fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a500:	e766      	b.n	800a3d0 <_dtoa_r+0x350>
 800a502:	07cf      	lsls	r7, r1, #31
 800a504:	d505      	bpl.n	800a512 <_dtoa_r+0x492>
 800a506:	ed90 6b00 	vldr	d6, [r0]
 800a50a:	3201      	adds	r2, #1
 800a50c:	2401      	movs	r4, #1
 800a50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a512:	1049      	asrs	r1, r1, #1
 800a514:	3008      	adds	r0, #8
 800a516:	e7ed      	b.n	800a4f4 <_dtoa_r+0x474>
 800a518:	2202      	movs	r2, #2
 800a51a:	e759      	b.n	800a3d0 <_dtoa_r+0x350>
 800a51c:	465f      	mov	r7, fp
 800a51e:	4648      	mov	r0, r9
 800a520:	e775      	b.n	800a40e <_dtoa_r+0x38e>
 800a522:	ec42 1b17 	vmov	d7, r1, r2
 800a526:	4a5c      	ldr	r2, [pc, #368]	; (800a698 <_dtoa_r+0x618>)
 800a528:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a52c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a530:	9a01      	ldr	r2, [sp, #4]
 800a532:	1814      	adds	r4, r2, r0
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	b352      	cbz	r2, 800a58e <_dtoa_r+0x50e>
 800a538:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a53c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a540:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a544:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a548:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a54c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a550:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a554:	ee14 2a90 	vmov	r2, s9
 800a558:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a55c:	3230      	adds	r2, #48	; 0x30
 800a55e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a562:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56a:	f808 2b01 	strb.w	r2, [r8], #1
 800a56e:	d439      	bmi.n	800a5e4 <_dtoa_r+0x564>
 800a570:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a574:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57c:	d472      	bmi.n	800a664 <_dtoa_r+0x5e4>
 800a57e:	45a0      	cmp	r8, r4
 800a580:	f43f af6b 	beq.w	800a45a <_dtoa_r+0x3da>
 800a584:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a588:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a58c:	e7e0      	b.n	800a550 <_dtoa_r+0x4d0>
 800a58e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a592:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a596:	4621      	mov	r1, r4
 800a598:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a59c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5a0:	ee14 2a90 	vmov	r2, s9
 800a5a4:	3230      	adds	r2, #48	; 0x30
 800a5a6:	f808 2b01 	strb.w	r2, [r8], #1
 800a5aa:	45a0      	cmp	r8, r4
 800a5ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5b4:	d118      	bne.n	800a5e8 <_dtoa_r+0x568>
 800a5b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a5ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a5be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c6:	dc4d      	bgt.n	800a664 <_dtoa_r+0x5e4>
 800a5c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d4:	f57f af41 	bpl.w	800a45a <_dtoa_r+0x3da>
 800a5d8:	4688      	mov	r8, r1
 800a5da:	3901      	subs	r1, #1
 800a5dc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a5e0:	2b30      	cmp	r3, #48	; 0x30
 800a5e2:	d0f9      	beq.n	800a5d8 <_dtoa_r+0x558>
 800a5e4:	46bb      	mov	fp, r7
 800a5e6:	e02a      	b.n	800a63e <_dtoa_r+0x5be>
 800a5e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a5ec:	e7d6      	b.n	800a59c <_dtoa_r+0x51c>
 800a5ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a5f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a5fa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a5fe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a602:	ee15 3a10 	vmov	r3, s10
 800a606:	3330      	adds	r3, #48	; 0x30
 800a608:	f808 3b01 	strb.w	r3, [r8], #1
 800a60c:	9b01      	ldr	r3, [sp, #4]
 800a60e:	eba8 0303 	sub.w	r3, r8, r3
 800a612:	4599      	cmp	r9, r3
 800a614:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a618:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a61c:	d133      	bne.n	800a686 <_dtoa_r+0x606>
 800a61e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a622:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62a:	dc1a      	bgt.n	800a662 <_dtoa_r+0x5e2>
 800a62c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a634:	d103      	bne.n	800a63e <_dtoa_r+0x5be>
 800a636:	ee15 3a10 	vmov	r3, s10
 800a63a:	07d9      	lsls	r1, r3, #31
 800a63c:	d411      	bmi.n	800a662 <_dtoa_r+0x5e2>
 800a63e:	4629      	mov	r1, r5
 800a640:	4630      	mov	r0, r6
 800a642:	f000 fbd1 	bl	800ade8 <_Bfree>
 800a646:	2300      	movs	r3, #0
 800a648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a64a:	f888 3000 	strb.w	r3, [r8]
 800a64e:	f10b 0301 	add.w	r3, fp, #1
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a656:	2b00      	cmp	r3, #0
 800a658:	f43f ad61 	beq.w	800a11e <_dtoa_r+0x9e>
 800a65c:	f8c3 8000 	str.w	r8, [r3]
 800a660:	e55d      	b.n	800a11e <_dtoa_r+0x9e>
 800a662:	465f      	mov	r7, fp
 800a664:	4643      	mov	r3, r8
 800a666:	4698      	mov	r8, r3
 800a668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a66c:	2a39      	cmp	r2, #57	; 0x39
 800a66e:	d106      	bne.n	800a67e <_dtoa_r+0x5fe>
 800a670:	9a01      	ldr	r2, [sp, #4]
 800a672:	429a      	cmp	r2, r3
 800a674:	d1f7      	bne.n	800a666 <_dtoa_r+0x5e6>
 800a676:	9901      	ldr	r1, [sp, #4]
 800a678:	2230      	movs	r2, #48	; 0x30
 800a67a:	3701      	adds	r7, #1
 800a67c:	700a      	strb	r2, [r1, #0]
 800a67e:	781a      	ldrb	r2, [r3, #0]
 800a680:	3201      	adds	r2, #1
 800a682:	701a      	strb	r2, [r3, #0]
 800a684:	e7ae      	b.n	800a5e4 <_dtoa_r+0x564>
 800a686:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a68a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a692:	d1b2      	bne.n	800a5fa <_dtoa_r+0x57a>
 800a694:	e7d3      	b.n	800a63e <_dtoa_r+0x5be>
 800a696:	bf00      	nop
 800a698:	0800c288 	.word	0x0800c288
 800a69c:	0800c260 	.word	0x0800c260
 800a6a0:	9907      	ldr	r1, [sp, #28]
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	f000 80d0 	beq.w	800a848 <_dtoa_r+0x7c8>
 800a6a8:	9906      	ldr	r1, [sp, #24]
 800a6aa:	2901      	cmp	r1, #1
 800a6ac:	f300 80b4 	bgt.w	800a818 <_dtoa_r+0x798>
 800a6b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	f000 80ac 	beq.w	800a810 <_dtoa_r+0x790>
 800a6b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6bc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a6c0:	461c      	mov	r4, r3
 800a6c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	9b05      	ldr	r3, [sp, #20]
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	4413      	add	r3, r2
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	f000 fc40 	bl	800af58 <__i2b>
 800a6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6da:	4607      	mov	r7, r0
 800a6dc:	f1b8 0f00 	cmp.w	r8, #0
 800a6e0:	dd0d      	ble.n	800a6fe <_dtoa_r+0x67e>
 800a6e2:	9a05      	ldr	r2, [sp, #20]
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	dd0a      	ble.n	800a6fe <_dtoa_r+0x67e>
 800a6e8:	4542      	cmp	r2, r8
 800a6ea:	9904      	ldr	r1, [sp, #16]
 800a6ec:	bfa8      	it	ge
 800a6ee:	4642      	movge	r2, r8
 800a6f0:	1a89      	subs	r1, r1, r2
 800a6f2:	9104      	str	r1, [sp, #16]
 800a6f4:	9905      	ldr	r1, [sp, #20]
 800a6f6:	eba8 0802 	sub.w	r8, r8, r2
 800a6fa:	1a8a      	subs	r2, r1, r2
 800a6fc:	9205      	str	r2, [sp, #20]
 800a6fe:	b303      	cbz	r3, 800a742 <_dtoa_r+0x6c2>
 800a700:	9a07      	ldr	r2, [sp, #28]
 800a702:	2a00      	cmp	r2, #0
 800a704:	f000 80a5 	beq.w	800a852 <_dtoa_r+0x7d2>
 800a708:	2c00      	cmp	r4, #0
 800a70a:	dd13      	ble.n	800a734 <_dtoa_r+0x6b4>
 800a70c:	4639      	mov	r1, r7
 800a70e:	4622      	mov	r2, r4
 800a710:	4630      	mov	r0, r6
 800a712:	930d      	str	r3, [sp, #52]	; 0x34
 800a714:	f000 fce0 	bl	800b0d8 <__pow5mult>
 800a718:	462a      	mov	r2, r5
 800a71a:	4601      	mov	r1, r0
 800a71c:	4607      	mov	r7, r0
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 fc30 	bl	800af84 <__multiply>
 800a724:	4629      	mov	r1, r5
 800a726:	900a      	str	r0, [sp, #40]	; 0x28
 800a728:	4630      	mov	r0, r6
 800a72a:	f000 fb5d 	bl	800ade8 <_Bfree>
 800a72e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a732:	4615      	mov	r5, r2
 800a734:	1b1a      	subs	r2, r3, r4
 800a736:	d004      	beq.n	800a742 <_dtoa_r+0x6c2>
 800a738:	4629      	mov	r1, r5
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 fccc 	bl	800b0d8 <__pow5mult>
 800a740:	4605      	mov	r5, r0
 800a742:	2101      	movs	r1, #1
 800a744:	4630      	mov	r0, r6
 800a746:	f000 fc07 	bl	800af58 <__i2b>
 800a74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	f340 8081 	ble.w	800a856 <_dtoa_r+0x7d6>
 800a754:	461a      	mov	r2, r3
 800a756:	4601      	mov	r1, r0
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 fcbd 	bl	800b0d8 <__pow5mult>
 800a75e:	9b06      	ldr	r3, [sp, #24]
 800a760:	2b01      	cmp	r3, #1
 800a762:	4604      	mov	r4, r0
 800a764:	dd7a      	ble.n	800a85c <_dtoa_r+0x7dc>
 800a766:	2300      	movs	r3, #0
 800a768:	930a      	str	r3, [sp, #40]	; 0x28
 800a76a:	6922      	ldr	r2, [r4, #16]
 800a76c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a770:	6910      	ldr	r0, [r2, #16]
 800a772:	f000 fba1 	bl	800aeb8 <__hi0bits>
 800a776:	f1c0 0020 	rsb	r0, r0, #32
 800a77a:	9b05      	ldr	r3, [sp, #20]
 800a77c:	4418      	add	r0, r3
 800a77e:	f010 001f 	ands.w	r0, r0, #31
 800a782:	f000 808c 	beq.w	800a89e <_dtoa_r+0x81e>
 800a786:	f1c0 0220 	rsb	r2, r0, #32
 800a78a:	2a04      	cmp	r2, #4
 800a78c:	f340 8085 	ble.w	800a89a <_dtoa_r+0x81a>
 800a790:	f1c0 001c 	rsb	r0, r0, #28
 800a794:	9b04      	ldr	r3, [sp, #16]
 800a796:	4403      	add	r3, r0
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	4403      	add	r3, r0
 800a79e:	4480      	add	r8, r0
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	9b04      	ldr	r3, [sp, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd05      	ble.n	800a7b4 <_dtoa_r+0x734>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f000 fced 	bl	800b18c <__lshift>
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dd05      	ble.n	800a7c6 <_dtoa_r+0x746>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f000 fce4 	bl	800b18c <__lshift>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d06a      	beq.n	800a8a2 <_dtoa_r+0x822>
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f000 fd4c 	bl	800b26c <__mcmp>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	da64      	bge.n	800a8a2 <_dtoa_r+0x822>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4629      	mov	r1, r5
 800a7dc:	220a      	movs	r2, #10
 800a7de:	4630      	mov	r0, r6
 800a7e0:	f000 fb24 	bl	800ae2c <__multadd>
 800a7e4:	9b07      	ldr	r3, [sp, #28]
 800a7e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8191 	beq.w	800ab14 <_dtoa_r+0xa94>
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	220a      	movs	r2, #10
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f000 fb17 	bl	800ae2c <__multadd>
 800a7fe:	f1ba 0f00 	cmp.w	sl, #0
 800a802:	4607      	mov	r7, r0
 800a804:	f300 808d 	bgt.w	800a922 <_dtoa_r+0x8a2>
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	dc50      	bgt.n	800a8b0 <_dtoa_r+0x830>
 800a80e:	e088      	b.n	800a922 <_dtoa_r+0x8a2>
 800a810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a812:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a816:	e751      	b.n	800a6bc <_dtoa_r+0x63c>
 800a818:	f109 34ff 	add.w	r4, r9, #4294967295
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	bfbf      	itttt	lt
 800a820:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a822:	1ae3      	sublt	r3, r4, r3
 800a824:	18d2      	addlt	r2, r2, r3
 800a826:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a828:	bfb6      	itet	lt
 800a82a:	4623      	movlt	r3, r4
 800a82c:	1b1c      	subge	r4, r3, r4
 800a82e:	2400      	movlt	r4, #0
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	bfb5      	itete	lt
 800a836:	9a04      	ldrlt	r2, [sp, #16]
 800a838:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a83c:	eba2 0809 	sublt.w	r8, r2, r9
 800a840:	464a      	movge	r2, r9
 800a842:	bfb8      	it	lt
 800a844:	2200      	movlt	r2, #0
 800a846:	e73c      	b.n	800a6c2 <_dtoa_r+0x642>
 800a848:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a84c:	9f07      	ldr	r7, [sp, #28]
 800a84e:	461c      	mov	r4, r3
 800a850:	e744      	b.n	800a6dc <_dtoa_r+0x65c>
 800a852:	461a      	mov	r2, r3
 800a854:	e770      	b.n	800a738 <_dtoa_r+0x6b8>
 800a856:	9b06      	ldr	r3, [sp, #24]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	dc18      	bgt.n	800a88e <_dtoa_r+0x80e>
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	b9b3      	cbnz	r3, 800a88e <_dtoa_r+0x80e>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a866:	b9a2      	cbnz	r2, 800a892 <_dtoa_r+0x812>
 800a868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a86c:	0d12      	lsrs	r2, r2, #20
 800a86e:	0512      	lsls	r2, r2, #20
 800a870:	b18a      	cbz	r2, 800a896 <_dtoa_r+0x816>
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	3301      	adds	r3, #1
 800a876:	9304      	str	r3, [sp, #16]
 800a878:	9b05      	ldr	r3, [sp, #20]
 800a87a:	3301      	adds	r3, #1
 800a87c:	9305      	str	r3, [sp, #20]
 800a87e:	2301      	movs	r3, #1
 800a880:	930a      	str	r3, [sp, #40]	; 0x28
 800a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	f47f af70 	bne.w	800a76a <_dtoa_r+0x6ea>
 800a88a:	2001      	movs	r0, #1
 800a88c:	e775      	b.n	800a77a <_dtoa_r+0x6fa>
 800a88e:	2300      	movs	r3, #0
 800a890:	e7f6      	b.n	800a880 <_dtoa_r+0x800>
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	e7f4      	b.n	800a880 <_dtoa_r+0x800>
 800a896:	920a      	str	r2, [sp, #40]	; 0x28
 800a898:	e7f3      	b.n	800a882 <_dtoa_r+0x802>
 800a89a:	d082      	beq.n	800a7a2 <_dtoa_r+0x722>
 800a89c:	4610      	mov	r0, r2
 800a89e:	301c      	adds	r0, #28
 800a8a0:	e778      	b.n	800a794 <_dtoa_r+0x714>
 800a8a2:	f1b9 0f00 	cmp.w	r9, #0
 800a8a6:	dc37      	bgt.n	800a918 <_dtoa_r+0x898>
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	dd34      	ble.n	800a918 <_dtoa_r+0x898>
 800a8ae:	46ca      	mov	sl, r9
 800a8b0:	f1ba 0f00 	cmp.w	sl, #0
 800a8b4:	d10d      	bne.n	800a8d2 <_dtoa_r+0x852>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4653      	mov	r3, sl
 800a8ba:	2205      	movs	r2, #5
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f000 fab5 	bl	800ae2c <__multadd>
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 fcd0 	bl	800b26c <__mcmp>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f73f adeb 	bgt.w	800a4a8 <_dtoa_r+0x428>
 800a8d2:	9b08      	ldr	r3, [sp, #32]
 800a8d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8d8:	ea6f 0b03 	mvn.w	fp, r3
 800a8dc:	f04f 0900 	mov.w	r9, #0
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f000 fa80 	bl	800ade8 <_Bfree>
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	f43f aea8 	beq.w	800a63e <_dtoa_r+0x5be>
 800a8ee:	f1b9 0f00 	cmp.w	r9, #0
 800a8f2:	d005      	beq.n	800a900 <_dtoa_r+0x880>
 800a8f4:	45b9      	cmp	r9, r7
 800a8f6:	d003      	beq.n	800a900 <_dtoa_r+0x880>
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f000 fa74 	bl	800ade8 <_Bfree>
 800a900:	4639      	mov	r1, r7
 800a902:	4630      	mov	r0, r6
 800a904:	f000 fa70 	bl	800ade8 <_Bfree>
 800a908:	e699      	b.n	800a63e <_dtoa_r+0x5be>
 800a90a:	2400      	movs	r4, #0
 800a90c:	4627      	mov	r7, r4
 800a90e:	e7e0      	b.n	800a8d2 <_dtoa_r+0x852>
 800a910:	46bb      	mov	fp, r7
 800a912:	4604      	mov	r4, r0
 800a914:	4607      	mov	r7, r0
 800a916:	e5c7      	b.n	800a4a8 <_dtoa_r+0x428>
 800a918:	9b07      	ldr	r3, [sp, #28]
 800a91a:	46ca      	mov	sl, r9
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8100 	beq.w	800ab22 <_dtoa_r+0xaa2>
 800a922:	f1b8 0f00 	cmp.w	r8, #0
 800a926:	dd05      	ble.n	800a934 <_dtoa_r+0x8b4>
 800a928:	4639      	mov	r1, r7
 800a92a:	4642      	mov	r2, r8
 800a92c:	4630      	mov	r0, r6
 800a92e:	f000 fc2d 	bl	800b18c <__lshift>
 800a932:	4607      	mov	r7, r0
 800a934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d05d      	beq.n	800a9f6 <_dtoa_r+0x976>
 800a93a:	6879      	ldr	r1, [r7, #4]
 800a93c:	4630      	mov	r0, r6
 800a93e:	f000 fa13 	bl	800ad68 <_Balloc>
 800a942:	4680      	mov	r8, r0
 800a944:	b928      	cbnz	r0, 800a952 <_dtoa_r+0x8d2>
 800a946:	4b82      	ldr	r3, [pc, #520]	; (800ab50 <_dtoa_r+0xad0>)
 800a948:	4602      	mov	r2, r0
 800a94a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a94e:	f7ff bbaf 	b.w	800a0b0 <_dtoa_r+0x30>
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	3202      	adds	r2, #2
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	f107 010c 	add.w	r1, r7, #12
 800a95c:	300c      	adds	r0, #12
 800a95e:	f7fe fe8f 	bl	8009680 <memcpy>
 800a962:	2201      	movs	r2, #1
 800a964:	4641      	mov	r1, r8
 800a966:	4630      	mov	r0, r6
 800a968:	f000 fc10 	bl	800b18c <__lshift>
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	3301      	adds	r3, #1
 800a970:	9304      	str	r3, [sp, #16]
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	4453      	add	r3, sl
 800a976:	9308      	str	r3, [sp, #32]
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	46b9      	mov	r9, r7
 800a980:	9307      	str	r3, [sp, #28]
 800a982:	4607      	mov	r7, r0
 800a984:	9b04      	ldr	r3, [sp, #16]
 800a986:	4621      	mov	r1, r4
 800a988:	3b01      	subs	r3, #1
 800a98a:	4628      	mov	r0, r5
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	f7ff fae9 	bl	8009f64 <quorem>
 800a992:	4603      	mov	r3, r0
 800a994:	3330      	adds	r3, #48	; 0x30
 800a996:	9005      	str	r0, [sp, #20]
 800a998:	4649      	mov	r1, r9
 800a99a:	4628      	mov	r0, r5
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
 800a99e:	f000 fc65 	bl	800b26c <__mcmp>
 800a9a2:	463a      	mov	r2, r7
 800a9a4:	4682      	mov	sl, r0
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f000 fc7b 	bl	800b2a4 <__mdiff>
 800a9ae:	68c2      	ldr	r2, [r0, #12]
 800a9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b2:	4680      	mov	r8, r0
 800a9b4:	bb0a      	cbnz	r2, 800a9fa <_dtoa_r+0x97a>
 800a9b6:	4601      	mov	r1, r0
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 fc57 	bl	800b26c <__mcmp>
 800a9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a9ca:	f000 fa0d 	bl	800ade8 <_Bfree>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a9d6:	ea43 0102 	orr.w	r1, r3, r2
 800a9da:	9b07      	ldr	r3, [sp, #28]
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e0:	d10d      	bne.n	800a9fe <_dtoa_r+0x97e>
 800a9e2:	2b39      	cmp	r3, #57	; 0x39
 800a9e4:	d029      	beq.n	800aa3a <_dtoa_r+0x9ba>
 800a9e6:	f1ba 0f00 	cmp.w	sl, #0
 800a9ea:	dd01      	ble.n	800a9f0 <_dtoa_r+0x970>
 800a9ec:	9b05      	ldr	r3, [sp, #20]
 800a9ee:	3331      	adds	r3, #49	; 0x31
 800a9f0:	9a02      	ldr	r2, [sp, #8]
 800a9f2:	7013      	strb	r3, [r2, #0]
 800a9f4:	e774      	b.n	800a8e0 <_dtoa_r+0x860>
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	e7b8      	b.n	800a96c <_dtoa_r+0x8ec>
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	e7e1      	b.n	800a9c2 <_dtoa_r+0x942>
 800a9fe:	f1ba 0f00 	cmp.w	sl, #0
 800aa02:	db06      	blt.n	800aa12 <_dtoa_r+0x992>
 800aa04:	9906      	ldr	r1, [sp, #24]
 800aa06:	ea41 0a0a 	orr.w	sl, r1, sl
 800aa0a:	9907      	ldr	r1, [sp, #28]
 800aa0c:	ea5a 0101 	orrs.w	r1, sl, r1
 800aa10:	d120      	bne.n	800aa54 <_dtoa_r+0x9d4>
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	ddec      	ble.n	800a9f0 <_dtoa_r+0x970>
 800aa16:	4629      	mov	r1, r5
 800aa18:	2201      	movs	r2, #1
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	9304      	str	r3, [sp, #16]
 800aa1e:	f000 fbb5 	bl	800b18c <__lshift>
 800aa22:	4621      	mov	r1, r4
 800aa24:	4605      	mov	r5, r0
 800aa26:	f000 fc21 	bl	800b26c <__mcmp>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	dc02      	bgt.n	800aa36 <_dtoa_r+0x9b6>
 800aa30:	d1de      	bne.n	800a9f0 <_dtoa_r+0x970>
 800aa32:	07da      	lsls	r2, r3, #31
 800aa34:	d5dc      	bpl.n	800a9f0 <_dtoa_r+0x970>
 800aa36:	2b39      	cmp	r3, #57	; 0x39
 800aa38:	d1d8      	bne.n	800a9ec <_dtoa_r+0x96c>
 800aa3a:	9a02      	ldr	r2, [sp, #8]
 800aa3c:	2339      	movs	r3, #57	; 0x39
 800aa3e:	7013      	strb	r3, [r2, #0]
 800aa40:	4643      	mov	r3, r8
 800aa42:	4698      	mov	r8, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aa4a:	2a39      	cmp	r2, #57	; 0x39
 800aa4c:	d051      	beq.n	800aaf2 <_dtoa_r+0xa72>
 800aa4e:	3201      	adds	r2, #1
 800aa50:	701a      	strb	r2, [r3, #0]
 800aa52:	e745      	b.n	800a8e0 <_dtoa_r+0x860>
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	dd03      	ble.n	800aa60 <_dtoa_r+0x9e0>
 800aa58:	2b39      	cmp	r3, #57	; 0x39
 800aa5a:	d0ee      	beq.n	800aa3a <_dtoa_r+0x9ba>
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	e7c7      	b.n	800a9f0 <_dtoa_r+0x970>
 800aa60:	9a04      	ldr	r2, [sp, #16]
 800aa62:	9908      	ldr	r1, [sp, #32]
 800aa64:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa68:	428a      	cmp	r2, r1
 800aa6a:	d02b      	beq.n	800aac4 <_dtoa_r+0xa44>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	2300      	movs	r3, #0
 800aa70:	220a      	movs	r2, #10
 800aa72:	4630      	mov	r0, r6
 800aa74:	f000 f9da 	bl	800ae2c <__multadd>
 800aa78:	45b9      	cmp	r9, r7
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	f04f 020a 	mov.w	r2, #10
 800aa84:	4649      	mov	r1, r9
 800aa86:	4630      	mov	r0, r6
 800aa88:	d107      	bne.n	800aa9a <_dtoa_r+0xa1a>
 800aa8a:	f000 f9cf 	bl	800ae2c <__multadd>
 800aa8e:	4681      	mov	r9, r0
 800aa90:	4607      	mov	r7, r0
 800aa92:	9b04      	ldr	r3, [sp, #16]
 800aa94:	3301      	adds	r3, #1
 800aa96:	9304      	str	r3, [sp, #16]
 800aa98:	e774      	b.n	800a984 <_dtoa_r+0x904>
 800aa9a:	f000 f9c7 	bl	800ae2c <__multadd>
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	4681      	mov	r9, r0
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f000 f9c0 	bl	800ae2c <__multadd>
 800aaac:	4607      	mov	r7, r0
 800aaae:	e7f0      	b.n	800aa92 <_dtoa_r+0xa12>
 800aab0:	f1ba 0f00 	cmp.w	sl, #0
 800aab4:	9a01      	ldr	r2, [sp, #4]
 800aab6:	bfcc      	ite	gt
 800aab8:	46d0      	movgt	r8, sl
 800aaba:	f04f 0801 	movle.w	r8, #1
 800aabe:	4490      	add	r8, r2
 800aac0:	f04f 0900 	mov.w	r9, #0
 800aac4:	4629      	mov	r1, r5
 800aac6:	2201      	movs	r2, #1
 800aac8:	4630      	mov	r0, r6
 800aaca:	9302      	str	r3, [sp, #8]
 800aacc:	f000 fb5e 	bl	800b18c <__lshift>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4605      	mov	r5, r0
 800aad4:	f000 fbca 	bl	800b26c <__mcmp>
 800aad8:	2800      	cmp	r0, #0
 800aada:	dcb1      	bgt.n	800aa40 <_dtoa_r+0x9c0>
 800aadc:	d102      	bne.n	800aae4 <_dtoa_r+0xa64>
 800aade:	9b02      	ldr	r3, [sp, #8]
 800aae0:	07db      	lsls	r3, r3, #31
 800aae2:	d4ad      	bmi.n	800aa40 <_dtoa_r+0x9c0>
 800aae4:	4643      	mov	r3, r8
 800aae6:	4698      	mov	r8, r3
 800aae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaec:	2a30      	cmp	r2, #48	; 0x30
 800aaee:	d0fa      	beq.n	800aae6 <_dtoa_r+0xa66>
 800aaf0:	e6f6      	b.n	800a8e0 <_dtoa_r+0x860>
 800aaf2:	9a01      	ldr	r2, [sp, #4]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d1a4      	bne.n	800aa42 <_dtoa_r+0x9c2>
 800aaf8:	f10b 0b01 	add.w	fp, fp, #1
 800aafc:	2331      	movs	r3, #49	; 0x31
 800aafe:	e778      	b.n	800a9f2 <_dtoa_r+0x972>
 800ab00:	4b14      	ldr	r3, [pc, #80]	; (800ab54 <_dtoa_r+0xad4>)
 800ab02:	f7ff bb27 	b.w	800a154 <_dtoa_r+0xd4>
 800ab06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f47f ab03 	bne.w	800a114 <_dtoa_r+0x94>
 800ab0e:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <_dtoa_r+0xad8>)
 800ab10:	f7ff bb20 	b.w	800a154 <_dtoa_r+0xd4>
 800ab14:	f1ba 0f00 	cmp.w	sl, #0
 800ab18:	dc03      	bgt.n	800ab22 <_dtoa_r+0xaa2>
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	f73f aec7 	bgt.w	800a8b0 <_dtoa_r+0x830>
 800ab22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab26:	4621      	mov	r1, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f7ff fa1b 	bl	8009f64 <quorem>
 800ab2e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab32:	f808 3b01 	strb.w	r3, [r8], #1
 800ab36:	9a01      	ldr	r2, [sp, #4]
 800ab38:	eba8 0202 	sub.w	r2, r8, r2
 800ab3c:	4592      	cmp	sl, r2
 800ab3e:	ddb7      	ble.n	800aab0 <_dtoa_r+0xa30>
 800ab40:	4629      	mov	r1, r5
 800ab42:	2300      	movs	r3, #0
 800ab44:	220a      	movs	r2, #10
 800ab46:	4630      	mov	r0, r6
 800ab48:	f000 f970 	bl	800ae2c <__multadd>
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	e7ea      	b.n	800ab26 <_dtoa_r+0xaa6>
 800ab50:	0800c18f 	.word	0x0800c18f
 800ab54:	0800c0ec 	.word	0x0800c0ec
 800ab58:	0800c110 	.word	0x0800c110

0800ab5c <std>:
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	4604      	mov	r4, r0
 800ab62:	e9c0 3300 	strd	r3, r3, [r0]
 800ab66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab6a:	6083      	str	r3, [r0, #8]
 800ab6c:	8181      	strh	r1, [r0, #12]
 800ab6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab70:	81c2      	strh	r2, [r0, #14]
 800ab72:	6183      	str	r3, [r0, #24]
 800ab74:	4619      	mov	r1, r3
 800ab76:	2208      	movs	r2, #8
 800ab78:	305c      	adds	r0, #92	; 0x5c
 800ab7a:	f7fe fd8f 	bl	800969c <memset>
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <std+0x38>)
 800ab80:	6263      	str	r3, [r4, #36]	; 0x24
 800ab82:	4b05      	ldr	r3, [pc, #20]	; (800ab98 <std+0x3c>)
 800ab84:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab86:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <std+0x40>)
 800ab88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <std+0x44>)
 800ab8c:	6224      	str	r4, [r4, #32]
 800ab8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop
 800ab94:	0800b931 	.word	0x0800b931
 800ab98:	0800b953 	.word	0x0800b953
 800ab9c:	0800b98b 	.word	0x0800b98b
 800aba0:	0800b9af 	.word	0x0800b9af

0800aba4 <_cleanup_r>:
 800aba4:	4901      	ldr	r1, [pc, #4]	; (800abac <_cleanup_r+0x8>)
 800aba6:	f000 b8af 	b.w	800ad08 <_fwalk_reent>
 800abaa:	bf00      	nop
 800abac:	0800bcc5 	.word	0x0800bcc5

0800abb0 <__sfmoreglue>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	2268      	movs	r2, #104	; 0x68
 800abb4:	1e4d      	subs	r5, r1, #1
 800abb6:	4355      	muls	r5, r2
 800abb8:	460e      	mov	r6, r1
 800abba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abbe:	f000 fcd9 	bl	800b574 <_malloc_r>
 800abc2:	4604      	mov	r4, r0
 800abc4:	b140      	cbz	r0, 800abd8 <__sfmoreglue+0x28>
 800abc6:	2100      	movs	r1, #0
 800abc8:	e9c0 1600 	strd	r1, r6, [r0]
 800abcc:	300c      	adds	r0, #12
 800abce:	60a0      	str	r0, [r4, #8]
 800abd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abd4:	f7fe fd62 	bl	800969c <memset>
 800abd8:	4620      	mov	r0, r4
 800abda:	bd70      	pop	{r4, r5, r6, pc}

0800abdc <__sfp_lock_acquire>:
 800abdc:	4801      	ldr	r0, [pc, #4]	; (800abe4 <__sfp_lock_acquire+0x8>)
 800abde:	f000 b8b8 	b.w	800ad52 <__retarget_lock_acquire_recursive>
 800abe2:	bf00      	nop
 800abe4:	24000459 	.word	0x24000459

0800abe8 <__sfp_lock_release>:
 800abe8:	4801      	ldr	r0, [pc, #4]	; (800abf0 <__sfp_lock_release+0x8>)
 800abea:	f000 b8b3 	b.w	800ad54 <__retarget_lock_release_recursive>
 800abee:	bf00      	nop
 800abf0:	24000459 	.word	0x24000459

0800abf4 <__sinit_lock_acquire>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__sinit_lock_acquire+0x8>)
 800abf6:	f000 b8ac 	b.w	800ad52 <__retarget_lock_acquire_recursive>
 800abfa:	bf00      	nop
 800abfc:	2400045a 	.word	0x2400045a

0800ac00 <__sinit_lock_release>:
 800ac00:	4801      	ldr	r0, [pc, #4]	; (800ac08 <__sinit_lock_release+0x8>)
 800ac02:	f000 b8a7 	b.w	800ad54 <__retarget_lock_release_recursive>
 800ac06:	bf00      	nop
 800ac08:	2400045a 	.word	0x2400045a

0800ac0c <__sinit>:
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	4604      	mov	r4, r0
 800ac10:	f7ff fff0 	bl	800abf4 <__sinit_lock_acquire>
 800ac14:	69a3      	ldr	r3, [r4, #24]
 800ac16:	b11b      	cbz	r3, 800ac20 <__sinit+0x14>
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f7ff bff0 	b.w	800ac00 <__sinit_lock_release>
 800ac20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac24:	6523      	str	r3, [r4, #80]	; 0x50
 800ac26:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <__sinit+0x68>)
 800ac28:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <__sinit+0x6c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	bf04      	itt	eq
 800ac32:	2301      	moveq	r3, #1
 800ac34:	61a3      	streq	r3, [r4, #24]
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 f820 	bl	800ac7c <__sfp>
 800ac3c:	6060      	str	r0, [r4, #4]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 f81c 	bl	800ac7c <__sfp>
 800ac44:	60a0      	str	r0, [r4, #8]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f818 	bl	800ac7c <__sfp>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	60e0      	str	r0, [r4, #12]
 800ac50:	2104      	movs	r1, #4
 800ac52:	6860      	ldr	r0, [r4, #4]
 800ac54:	f7ff ff82 	bl	800ab5c <std>
 800ac58:	68a0      	ldr	r0, [r4, #8]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2109      	movs	r1, #9
 800ac5e:	f7ff ff7d 	bl	800ab5c <std>
 800ac62:	68e0      	ldr	r0, [r4, #12]
 800ac64:	2202      	movs	r2, #2
 800ac66:	2112      	movs	r1, #18
 800ac68:	f7ff ff78 	bl	800ab5c <std>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	61a3      	str	r3, [r4, #24]
 800ac70:	e7d2      	b.n	800ac18 <__sinit+0xc>
 800ac72:	bf00      	nop
 800ac74:	0800c0d8 	.word	0x0800c0d8
 800ac78:	0800aba5 	.word	0x0800aba5

0800ac7c <__sfp>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	4607      	mov	r7, r0
 800ac80:	f7ff ffac 	bl	800abdc <__sfp_lock_acquire>
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <__sfp+0x84>)
 800ac86:	681e      	ldr	r6, [r3, #0]
 800ac88:	69b3      	ldr	r3, [r6, #24]
 800ac8a:	b913      	cbnz	r3, 800ac92 <__sfp+0x16>
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff ffbd 	bl	800ac0c <__sinit>
 800ac92:	3648      	adds	r6, #72	; 0x48
 800ac94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	d503      	bpl.n	800aca4 <__sfp+0x28>
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	b30b      	cbz	r3, 800ace4 <__sfp+0x68>
 800aca0:	6836      	ldr	r6, [r6, #0]
 800aca2:	e7f7      	b.n	800ac94 <__sfp+0x18>
 800aca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aca8:	b9d5      	cbnz	r5, 800ace0 <__sfp+0x64>
 800acaa:	4b16      	ldr	r3, [pc, #88]	; (800ad04 <__sfp+0x88>)
 800acac:	60e3      	str	r3, [r4, #12]
 800acae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acb2:	6665      	str	r5, [r4, #100]	; 0x64
 800acb4:	f000 f84c 	bl	800ad50 <__retarget_lock_init_recursive>
 800acb8:	f7ff ff96 	bl	800abe8 <__sfp_lock_release>
 800acbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acc4:	6025      	str	r5, [r4, #0]
 800acc6:	61a5      	str	r5, [r4, #24]
 800acc8:	2208      	movs	r2, #8
 800acca:	4629      	mov	r1, r5
 800accc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acd0:	f7fe fce4 	bl	800969c <memset>
 800acd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acdc:	4620      	mov	r0, r4
 800acde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace0:	3468      	adds	r4, #104	; 0x68
 800ace2:	e7d9      	b.n	800ac98 <__sfp+0x1c>
 800ace4:	2104      	movs	r1, #4
 800ace6:	4638      	mov	r0, r7
 800ace8:	f7ff ff62 	bl	800abb0 <__sfmoreglue>
 800acec:	4604      	mov	r4, r0
 800acee:	6030      	str	r0, [r6, #0]
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1d5      	bne.n	800aca0 <__sfp+0x24>
 800acf4:	f7ff ff78 	bl	800abe8 <__sfp_lock_release>
 800acf8:	230c      	movs	r3, #12
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	e7ee      	b.n	800acdc <__sfp+0x60>
 800acfe:	bf00      	nop
 800ad00:	0800c0d8 	.word	0x0800c0d8
 800ad04:	ffff0001 	.word	0xffff0001

0800ad08 <_fwalk_reent>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	4688      	mov	r8, r1
 800ad10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad14:	2700      	movs	r7, #0
 800ad16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad1e:	d505      	bpl.n	800ad2c <_fwalk_reent+0x24>
 800ad20:	6824      	ldr	r4, [r4, #0]
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	d1f7      	bne.n	800ad16 <_fwalk_reent+0xe>
 800ad26:	4638      	mov	r0, r7
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	89ab      	ldrh	r3, [r5, #12]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d907      	bls.n	800ad42 <_fwalk_reent+0x3a>
 800ad32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad36:	3301      	adds	r3, #1
 800ad38:	d003      	beq.n	800ad42 <_fwalk_reent+0x3a>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	47c0      	blx	r8
 800ad40:	4307      	orrs	r7, r0
 800ad42:	3568      	adds	r5, #104	; 0x68
 800ad44:	e7e9      	b.n	800ad1a <_fwalk_reent+0x12>
	...

0800ad48 <_localeconv_r>:
 800ad48:	4800      	ldr	r0, [pc, #0]	; (800ad4c <_localeconv_r+0x4>)
 800ad4a:	4770      	bx	lr
 800ad4c:	24000164 	.word	0x24000164

0800ad50 <__retarget_lock_init_recursive>:
 800ad50:	4770      	bx	lr

0800ad52 <__retarget_lock_acquire_recursive>:
 800ad52:	4770      	bx	lr

0800ad54 <__retarget_lock_release_recursive>:
 800ad54:	4770      	bx	lr
	...

0800ad58 <malloc>:
 800ad58:	4b02      	ldr	r3, [pc, #8]	; (800ad64 <malloc+0xc>)
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	6818      	ldr	r0, [r3, #0]
 800ad5e:	f000 bc09 	b.w	800b574 <_malloc_r>
 800ad62:	bf00      	nop
 800ad64:	24000010 	.word	0x24000010

0800ad68 <_Balloc>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	b976      	cbnz	r6, 800ad90 <_Balloc+0x28>
 800ad72:	2010      	movs	r0, #16
 800ad74:	f7ff fff0 	bl	800ad58 <malloc>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad7c:	b920      	cbnz	r0, 800ad88 <_Balloc+0x20>
 800ad7e:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <_Balloc+0x78>)
 800ad80:	4818      	ldr	r0, [pc, #96]	; (800ade4 <_Balloc+0x7c>)
 800ad82:	2166      	movs	r1, #102	; 0x66
 800ad84:	f000 feea 	bl	800bb5c <__assert_func>
 800ad88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad8c:	6006      	str	r6, [r0, #0]
 800ad8e:	60c6      	str	r6, [r0, #12]
 800ad90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad92:	68f3      	ldr	r3, [r6, #12]
 800ad94:	b183      	cbz	r3, 800adb8 <_Balloc+0x50>
 800ad96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad9e:	b9b8      	cbnz	r0, 800add0 <_Balloc+0x68>
 800ada0:	2101      	movs	r1, #1
 800ada2:	fa01 f605 	lsl.w	r6, r1, r5
 800ada6:	1d72      	adds	r2, r6, #5
 800ada8:	0092      	lsls	r2, r2, #2
 800adaa:	4620      	mov	r0, r4
 800adac:	f000 fb60 	bl	800b470 <_calloc_r>
 800adb0:	b160      	cbz	r0, 800adcc <_Balloc+0x64>
 800adb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adb6:	e00e      	b.n	800add6 <_Balloc+0x6e>
 800adb8:	2221      	movs	r2, #33	; 0x21
 800adba:	2104      	movs	r1, #4
 800adbc:	4620      	mov	r0, r4
 800adbe:	f000 fb57 	bl	800b470 <_calloc_r>
 800adc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc4:	60f0      	str	r0, [r6, #12]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e4      	bne.n	800ad96 <_Balloc+0x2e>
 800adcc:	2000      	movs	r0, #0
 800adce:	bd70      	pop	{r4, r5, r6, pc}
 800add0:	6802      	ldr	r2, [r0, #0]
 800add2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800add6:	2300      	movs	r3, #0
 800add8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800addc:	e7f7      	b.n	800adce <_Balloc+0x66>
 800adde:	bf00      	nop
 800ade0:	0800c11d 	.word	0x0800c11d
 800ade4:	0800c200 	.word	0x0800c200

0800ade8 <_Bfree>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800adec:	4605      	mov	r5, r0
 800adee:	460c      	mov	r4, r1
 800adf0:	b976      	cbnz	r6, 800ae10 <_Bfree+0x28>
 800adf2:	2010      	movs	r0, #16
 800adf4:	f7ff ffb0 	bl	800ad58 <malloc>
 800adf8:	4602      	mov	r2, r0
 800adfa:	6268      	str	r0, [r5, #36]	; 0x24
 800adfc:	b920      	cbnz	r0, 800ae08 <_Bfree+0x20>
 800adfe:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <_Bfree+0x3c>)
 800ae00:	4809      	ldr	r0, [pc, #36]	; (800ae28 <_Bfree+0x40>)
 800ae02:	218a      	movs	r1, #138	; 0x8a
 800ae04:	f000 feaa 	bl	800bb5c <__assert_func>
 800ae08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae0c:	6006      	str	r6, [r0, #0]
 800ae0e:	60c6      	str	r6, [r0, #12]
 800ae10:	b13c      	cbz	r4, 800ae22 <_Bfree+0x3a>
 800ae12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae14:	6862      	ldr	r2, [r4, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae1c:	6021      	str	r1, [r4, #0]
 800ae1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
 800ae24:	0800c11d 	.word	0x0800c11d
 800ae28:	0800c200 	.word	0x0800c200

0800ae2c <__multadd>:
 800ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	690d      	ldr	r5, [r1, #16]
 800ae32:	4607      	mov	r7, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	461e      	mov	r6, r3
 800ae38:	f101 0c14 	add.w	ip, r1, #20
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae42:	b299      	uxth	r1, r3
 800ae44:	fb02 6101 	mla	r1, r2, r1, r6
 800ae48:	0c1e      	lsrs	r6, r3, #16
 800ae4a:	0c0b      	lsrs	r3, r1, #16
 800ae4c:	fb02 3306 	mla	r3, r2, r6, r3
 800ae50:	b289      	uxth	r1, r1
 800ae52:	3001      	adds	r0, #1
 800ae54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae58:	4285      	cmp	r5, r0
 800ae5a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae62:	dcec      	bgt.n	800ae3e <__multadd+0x12>
 800ae64:	b30e      	cbz	r6, 800aeaa <__multadd+0x7e>
 800ae66:	68a3      	ldr	r3, [r4, #8]
 800ae68:	42ab      	cmp	r3, r5
 800ae6a:	dc19      	bgt.n	800aea0 <__multadd+0x74>
 800ae6c:	6861      	ldr	r1, [r4, #4]
 800ae6e:	4638      	mov	r0, r7
 800ae70:	3101      	adds	r1, #1
 800ae72:	f7ff ff79 	bl	800ad68 <_Balloc>
 800ae76:	4680      	mov	r8, r0
 800ae78:	b928      	cbnz	r0, 800ae86 <__multadd+0x5a>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <__multadd+0x84>)
 800ae7e:	480d      	ldr	r0, [pc, #52]	; (800aeb4 <__multadd+0x88>)
 800ae80:	21b5      	movs	r1, #181	; 0xb5
 800ae82:	f000 fe6b 	bl	800bb5c <__assert_func>
 800ae86:	6922      	ldr	r2, [r4, #16]
 800ae88:	3202      	adds	r2, #2
 800ae8a:	f104 010c 	add.w	r1, r4, #12
 800ae8e:	0092      	lsls	r2, r2, #2
 800ae90:	300c      	adds	r0, #12
 800ae92:	f7fe fbf5 	bl	8009680 <memcpy>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f7ff ffa5 	bl	800ade8 <_Bfree>
 800ae9e:	4644      	mov	r4, r8
 800aea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aea4:	3501      	adds	r5, #1
 800aea6:	615e      	str	r6, [r3, #20]
 800aea8:	6125      	str	r5, [r4, #16]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb0:	0800c18f 	.word	0x0800c18f
 800aeb4:	0800c200 	.word	0x0800c200

0800aeb8 <__hi0bits>:
 800aeb8:	0c03      	lsrs	r3, r0, #16
 800aeba:	041b      	lsls	r3, r3, #16
 800aebc:	b9d3      	cbnz	r3, 800aef4 <__hi0bits+0x3c>
 800aebe:	0400      	lsls	r0, r0, #16
 800aec0:	2310      	movs	r3, #16
 800aec2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aec6:	bf04      	itt	eq
 800aec8:	0200      	lsleq	r0, r0, #8
 800aeca:	3308      	addeq	r3, #8
 800aecc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aed0:	bf04      	itt	eq
 800aed2:	0100      	lsleq	r0, r0, #4
 800aed4:	3304      	addeq	r3, #4
 800aed6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aeda:	bf04      	itt	eq
 800aedc:	0080      	lsleq	r0, r0, #2
 800aede:	3302      	addeq	r3, #2
 800aee0:	2800      	cmp	r0, #0
 800aee2:	db05      	blt.n	800aef0 <__hi0bits+0x38>
 800aee4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aee8:	f103 0301 	add.w	r3, r3, #1
 800aeec:	bf08      	it	eq
 800aeee:	2320      	moveq	r3, #32
 800aef0:	4618      	mov	r0, r3
 800aef2:	4770      	bx	lr
 800aef4:	2300      	movs	r3, #0
 800aef6:	e7e4      	b.n	800aec2 <__hi0bits+0xa>

0800aef8 <__lo0bits>:
 800aef8:	6803      	ldr	r3, [r0, #0]
 800aefa:	f013 0207 	ands.w	r2, r3, #7
 800aefe:	4601      	mov	r1, r0
 800af00:	d00b      	beq.n	800af1a <__lo0bits+0x22>
 800af02:	07da      	lsls	r2, r3, #31
 800af04:	d423      	bmi.n	800af4e <__lo0bits+0x56>
 800af06:	0798      	lsls	r0, r3, #30
 800af08:	bf49      	itett	mi
 800af0a:	085b      	lsrmi	r3, r3, #1
 800af0c:	089b      	lsrpl	r3, r3, #2
 800af0e:	2001      	movmi	r0, #1
 800af10:	600b      	strmi	r3, [r1, #0]
 800af12:	bf5c      	itt	pl
 800af14:	600b      	strpl	r3, [r1, #0]
 800af16:	2002      	movpl	r0, #2
 800af18:	4770      	bx	lr
 800af1a:	b298      	uxth	r0, r3
 800af1c:	b9a8      	cbnz	r0, 800af4a <__lo0bits+0x52>
 800af1e:	0c1b      	lsrs	r3, r3, #16
 800af20:	2010      	movs	r0, #16
 800af22:	b2da      	uxtb	r2, r3
 800af24:	b90a      	cbnz	r2, 800af2a <__lo0bits+0x32>
 800af26:	3008      	adds	r0, #8
 800af28:	0a1b      	lsrs	r3, r3, #8
 800af2a:	071a      	lsls	r2, r3, #28
 800af2c:	bf04      	itt	eq
 800af2e:	091b      	lsreq	r3, r3, #4
 800af30:	3004      	addeq	r0, #4
 800af32:	079a      	lsls	r2, r3, #30
 800af34:	bf04      	itt	eq
 800af36:	089b      	lsreq	r3, r3, #2
 800af38:	3002      	addeq	r0, #2
 800af3a:	07da      	lsls	r2, r3, #31
 800af3c:	d403      	bmi.n	800af46 <__lo0bits+0x4e>
 800af3e:	085b      	lsrs	r3, r3, #1
 800af40:	f100 0001 	add.w	r0, r0, #1
 800af44:	d005      	beq.n	800af52 <__lo0bits+0x5a>
 800af46:	600b      	str	r3, [r1, #0]
 800af48:	4770      	bx	lr
 800af4a:	4610      	mov	r0, r2
 800af4c:	e7e9      	b.n	800af22 <__lo0bits+0x2a>
 800af4e:	2000      	movs	r0, #0
 800af50:	4770      	bx	lr
 800af52:	2020      	movs	r0, #32
 800af54:	4770      	bx	lr
	...

0800af58 <__i2b>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	460c      	mov	r4, r1
 800af5c:	2101      	movs	r1, #1
 800af5e:	f7ff ff03 	bl	800ad68 <_Balloc>
 800af62:	4602      	mov	r2, r0
 800af64:	b928      	cbnz	r0, 800af72 <__i2b+0x1a>
 800af66:	4b05      	ldr	r3, [pc, #20]	; (800af7c <__i2b+0x24>)
 800af68:	4805      	ldr	r0, [pc, #20]	; (800af80 <__i2b+0x28>)
 800af6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af6e:	f000 fdf5 	bl	800bb5c <__assert_func>
 800af72:	2301      	movs	r3, #1
 800af74:	6144      	str	r4, [r0, #20]
 800af76:	6103      	str	r3, [r0, #16]
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	bf00      	nop
 800af7c:	0800c18f 	.word	0x0800c18f
 800af80:	0800c200 	.word	0x0800c200

0800af84 <__multiply>:
 800af84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af88:	4691      	mov	r9, r2
 800af8a:	690a      	ldr	r2, [r1, #16]
 800af8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af90:	429a      	cmp	r2, r3
 800af92:	bfb8      	it	lt
 800af94:	460b      	movlt	r3, r1
 800af96:	460c      	mov	r4, r1
 800af98:	bfbc      	itt	lt
 800af9a:	464c      	movlt	r4, r9
 800af9c:	4699      	movlt	r9, r3
 800af9e:	6927      	ldr	r7, [r4, #16]
 800afa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	6861      	ldr	r1, [r4, #4]
 800afa8:	eb07 060a 	add.w	r6, r7, sl
 800afac:	42b3      	cmp	r3, r6
 800afae:	b085      	sub	sp, #20
 800afb0:	bfb8      	it	lt
 800afb2:	3101      	addlt	r1, #1
 800afb4:	f7ff fed8 	bl	800ad68 <_Balloc>
 800afb8:	b930      	cbnz	r0, 800afc8 <__multiply+0x44>
 800afba:	4602      	mov	r2, r0
 800afbc:	4b44      	ldr	r3, [pc, #272]	; (800b0d0 <__multiply+0x14c>)
 800afbe:	4845      	ldr	r0, [pc, #276]	; (800b0d4 <__multiply+0x150>)
 800afc0:	f240 115d 	movw	r1, #349	; 0x15d
 800afc4:	f000 fdca 	bl	800bb5c <__assert_func>
 800afc8:	f100 0514 	add.w	r5, r0, #20
 800afcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800afd0:	462b      	mov	r3, r5
 800afd2:	2200      	movs	r2, #0
 800afd4:	4543      	cmp	r3, r8
 800afd6:	d321      	bcc.n	800b01c <__multiply+0x98>
 800afd8:	f104 0314 	add.w	r3, r4, #20
 800afdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800afe0:	f109 0314 	add.w	r3, r9, #20
 800afe4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afe8:	9202      	str	r2, [sp, #8]
 800afea:	1b3a      	subs	r2, r7, r4
 800afec:	3a15      	subs	r2, #21
 800afee:	f022 0203 	bic.w	r2, r2, #3
 800aff2:	3204      	adds	r2, #4
 800aff4:	f104 0115 	add.w	r1, r4, #21
 800aff8:	428f      	cmp	r7, r1
 800affa:	bf38      	it	cc
 800affc:	2204      	movcc	r2, #4
 800affe:	9201      	str	r2, [sp, #4]
 800b000:	9a02      	ldr	r2, [sp, #8]
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	429a      	cmp	r2, r3
 800b006:	d80c      	bhi.n	800b022 <__multiply+0x9e>
 800b008:	2e00      	cmp	r6, #0
 800b00a:	dd03      	ble.n	800b014 <__multiply+0x90>
 800b00c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b010:	2b00      	cmp	r3, #0
 800b012:	d05a      	beq.n	800b0ca <__multiply+0x146>
 800b014:	6106      	str	r6, [r0, #16]
 800b016:	b005      	add	sp, #20
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	f843 2b04 	str.w	r2, [r3], #4
 800b020:	e7d8      	b.n	800afd4 <__multiply+0x50>
 800b022:	f8b3 a000 	ldrh.w	sl, [r3]
 800b026:	f1ba 0f00 	cmp.w	sl, #0
 800b02a:	d024      	beq.n	800b076 <__multiply+0xf2>
 800b02c:	f104 0e14 	add.w	lr, r4, #20
 800b030:	46a9      	mov	r9, r5
 800b032:	f04f 0c00 	mov.w	ip, #0
 800b036:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b03a:	f8d9 1000 	ldr.w	r1, [r9]
 800b03e:	fa1f fb82 	uxth.w	fp, r2
 800b042:	b289      	uxth	r1, r1
 800b044:	fb0a 110b 	mla	r1, sl, fp, r1
 800b048:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b04c:	f8d9 2000 	ldr.w	r2, [r9]
 800b050:	4461      	add	r1, ip
 800b052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b056:	fb0a c20b 	mla	r2, sl, fp, ip
 800b05a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b05e:	b289      	uxth	r1, r1
 800b060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b064:	4577      	cmp	r7, lr
 800b066:	f849 1b04 	str.w	r1, [r9], #4
 800b06a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b06e:	d8e2      	bhi.n	800b036 <__multiply+0xb2>
 800b070:	9a01      	ldr	r2, [sp, #4]
 800b072:	f845 c002 	str.w	ip, [r5, r2]
 800b076:	9a03      	ldr	r2, [sp, #12]
 800b078:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b07c:	3304      	adds	r3, #4
 800b07e:	f1b9 0f00 	cmp.w	r9, #0
 800b082:	d020      	beq.n	800b0c6 <__multiply+0x142>
 800b084:	6829      	ldr	r1, [r5, #0]
 800b086:	f104 0c14 	add.w	ip, r4, #20
 800b08a:	46ae      	mov	lr, r5
 800b08c:	f04f 0a00 	mov.w	sl, #0
 800b090:	f8bc b000 	ldrh.w	fp, [ip]
 800b094:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b098:	fb09 220b 	mla	r2, r9, fp, r2
 800b09c:	4492      	add	sl, r2
 800b09e:	b289      	uxth	r1, r1
 800b0a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b0a4:	f84e 1b04 	str.w	r1, [lr], #4
 800b0a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0ac:	f8be 1000 	ldrh.w	r1, [lr]
 800b0b0:	0c12      	lsrs	r2, r2, #16
 800b0b2:	fb09 1102 	mla	r1, r9, r2, r1
 800b0b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b0ba:	4567      	cmp	r7, ip
 800b0bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0c0:	d8e6      	bhi.n	800b090 <__multiply+0x10c>
 800b0c2:	9a01      	ldr	r2, [sp, #4]
 800b0c4:	50a9      	str	r1, [r5, r2]
 800b0c6:	3504      	adds	r5, #4
 800b0c8:	e79a      	b.n	800b000 <__multiply+0x7c>
 800b0ca:	3e01      	subs	r6, #1
 800b0cc:	e79c      	b.n	800b008 <__multiply+0x84>
 800b0ce:	bf00      	nop
 800b0d0:	0800c18f 	.word	0x0800c18f
 800b0d4:	0800c200 	.word	0x0800c200

0800b0d8 <__pow5mult>:
 800b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	4615      	mov	r5, r2
 800b0de:	f012 0203 	ands.w	r2, r2, #3
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	460f      	mov	r7, r1
 800b0e6:	d007      	beq.n	800b0f8 <__pow5mult+0x20>
 800b0e8:	4c25      	ldr	r4, [pc, #148]	; (800b180 <__pow5mult+0xa8>)
 800b0ea:	3a01      	subs	r2, #1
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0f2:	f7ff fe9b 	bl	800ae2c <__multadd>
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	10ad      	asrs	r5, r5, #2
 800b0fa:	d03d      	beq.n	800b178 <__pow5mult+0xa0>
 800b0fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0fe:	b97c      	cbnz	r4, 800b120 <__pow5mult+0x48>
 800b100:	2010      	movs	r0, #16
 800b102:	f7ff fe29 	bl	800ad58 <malloc>
 800b106:	4602      	mov	r2, r0
 800b108:	6270      	str	r0, [r6, #36]	; 0x24
 800b10a:	b928      	cbnz	r0, 800b118 <__pow5mult+0x40>
 800b10c:	4b1d      	ldr	r3, [pc, #116]	; (800b184 <__pow5mult+0xac>)
 800b10e:	481e      	ldr	r0, [pc, #120]	; (800b188 <__pow5mult+0xb0>)
 800b110:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b114:	f000 fd22 	bl	800bb5c <__assert_func>
 800b118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b11c:	6004      	str	r4, [r0, #0]
 800b11e:	60c4      	str	r4, [r0, #12]
 800b120:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b128:	b94c      	cbnz	r4, 800b13e <__pow5mult+0x66>
 800b12a:	f240 2171 	movw	r1, #625	; 0x271
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff ff12 	bl	800af58 <__i2b>
 800b134:	2300      	movs	r3, #0
 800b136:	f8c8 0008 	str.w	r0, [r8, #8]
 800b13a:	4604      	mov	r4, r0
 800b13c:	6003      	str	r3, [r0, #0]
 800b13e:	f04f 0900 	mov.w	r9, #0
 800b142:	07eb      	lsls	r3, r5, #31
 800b144:	d50a      	bpl.n	800b15c <__pow5mult+0x84>
 800b146:	4639      	mov	r1, r7
 800b148:	4622      	mov	r2, r4
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7ff ff1a 	bl	800af84 <__multiply>
 800b150:	4639      	mov	r1, r7
 800b152:	4680      	mov	r8, r0
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff fe47 	bl	800ade8 <_Bfree>
 800b15a:	4647      	mov	r7, r8
 800b15c:	106d      	asrs	r5, r5, #1
 800b15e:	d00b      	beq.n	800b178 <__pow5mult+0xa0>
 800b160:	6820      	ldr	r0, [r4, #0]
 800b162:	b938      	cbnz	r0, 800b174 <__pow5mult+0x9c>
 800b164:	4622      	mov	r2, r4
 800b166:	4621      	mov	r1, r4
 800b168:	4630      	mov	r0, r6
 800b16a:	f7ff ff0b 	bl	800af84 <__multiply>
 800b16e:	6020      	str	r0, [r4, #0]
 800b170:	f8c0 9000 	str.w	r9, [r0]
 800b174:	4604      	mov	r4, r0
 800b176:	e7e4      	b.n	800b142 <__pow5mult+0x6a>
 800b178:	4638      	mov	r0, r7
 800b17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b17e:	bf00      	nop
 800b180:	0800c350 	.word	0x0800c350
 800b184:	0800c11d 	.word	0x0800c11d
 800b188:	0800c200 	.word	0x0800c200

0800b18c <__lshift>:
 800b18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	460c      	mov	r4, r1
 800b192:	6849      	ldr	r1, [r1, #4]
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b19a:	68a3      	ldr	r3, [r4, #8]
 800b19c:	4607      	mov	r7, r0
 800b19e:	4691      	mov	r9, r2
 800b1a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1a4:	f108 0601 	add.w	r6, r8, #1
 800b1a8:	42b3      	cmp	r3, r6
 800b1aa:	db0b      	blt.n	800b1c4 <__lshift+0x38>
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f7ff fddb 	bl	800ad68 <_Balloc>
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	b948      	cbnz	r0, 800b1ca <__lshift+0x3e>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	4b2a      	ldr	r3, [pc, #168]	; (800b264 <__lshift+0xd8>)
 800b1ba:	482b      	ldr	r0, [pc, #172]	; (800b268 <__lshift+0xdc>)
 800b1bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b1c0:	f000 fccc 	bl	800bb5c <__assert_func>
 800b1c4:	3101      	adds	r1, #1
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	e7ee      	b.n	800b1a8 <__lshift+0x1c>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f100 0114 	add.w	r1, r0, #20
 800b1d0:	f100 0210 	add.w	r2, r0, #16
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	4553      	cmp	r3, sl
 800b1d8:	db37      	blt.n	800b24a <__lshift+0xbe>
 800b1da:	6920      	ldr	r0, [r4, #16]
 800b1dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1e0:	f104 0314 	add.w	r3, r4, #20
 800b1e4:	f019 091f 	ands.w	r9, r9, #31
 800b1e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1f0:	d02f      	beq.n	800b252 <__lshift+0xc6>
 800b1f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1f6:	468a      	mov	sl, r1
 800b1f8:	f04f 0c00 	mov.w	ip, #0
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	fa02 f209 	lsl.w	r2, r2, r9
 800b202:	ea42 020c 	orr.w	r2, r2, ip
 800b206:	f84a 2b04 	str.w	r2, [sl], #4
 800b20a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b20e:	4298      	cmp	r0, r3
 800b210:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b214:	d8f2      	bhi.n	800b1fc <__lshift+0x70>
 800b216:	1b03      	subs	r3, r0, r4
 800b218:	3b15      	subs	r3, #21
 800b21a:	f023 0303 	bic.w	r3, r3, #3
 800b21e:	3304      	adds	r3, #4
 800b220:	f104 0215 	add.w	r2, r4, #21
 800b224:	4290      	cmp	r0, r2
 800b226:	bf38      	it	cc
 800b228:	2304      	movcc	r3, #4
 800b22a:	f841 c003 	str.w	ip, [r1, r3]
 800b22e:	f1bc 0f00 	cmp.w	ip, #0
 800b232:	d001      	beq.n	800b238 <__lshift+0xac>
 800b234:	f108 0602 	add.w	r6, r8, #2
 800b238:	3e01      	subs	r6, #1
 800b23a:	4638      	mov	r0, r7
 800b23c:	612e      	str	r6, [r5, #16]
 800b23e:	4621      	mov	r1, r4
 800b240:	f7ff fdd2 	bl	800ade8 <_Bfree>
 800b244:	4628      	mov	r0, r5
 800b246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b24e:	3301      	adds	r3, #1
 800b250:	e7c1      	b.n	800b1d6 <__lshift+0x4a>
 800b252:	3904      	subs	r1, #4
 800b254:	f853 2b04 	ldr.w	r2, [r3], #4
 800b258:	f841 2f04 	str.w	r2, [r1, #4]!
 800b25c:	4298      	cmp	r0, r3
 800b25e:	d8f9      	bhi.n	800b254 <__lshift+0xc8>
 800b260:	e7ea      	b.n	800b238 <__lshift+0xac>
 800b262:	bf00      	nop
 800b264:	0800c18f 	.word	0x0800c18f
 800b268:	0800c200 	.word	0x0800c200

0800b26c <__mcmp>:
 800b26c:	b530      	push	{r4, r5, lr}
 800b26e:	6902      	ldr	r2, [r0, #16]
 800b270:	690c      	ldr	r4, [r1, #16]
 800b272:	1b12      	subs	r2, r2, r4
 800b274:	d10e      	bne.n	800b294 <__mcmp+0x28>
 800b276:	f100 0314 	add.w	r3, r0, #20
 800b27a:	3114      	adds	r1, #20
 800b27c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b28c:	42a5      	cmp	r5, r4
 800b28e:	d003      	beq.n	800b298 <__mcmp+0x2c>
 800b290:	d305      	bcc.n	800b29e <__mcmp+0x32>
 800b292:	2201      	movs	r2, #1
 800b294:	4610      	mov	r0, r2
 800b296:	bd30      	pop	{r4, r5, pc}
 800b298:	4283      	cmp	r3, r0
 800b29a:	d3f3      	bcc.n	800b284 <__mcmp+0x18>
 800b29c:	e7fa      	b.n	800b294 <__mcmp+0x28>
 800b29e:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a2:	e7f7      	b.n	800b294 <__mcmp+0x28>

0800b2a4 <__mdiff>:
 800b2a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4690      	mov	r8, r2
 800b2b2:	f7ff ffdb 	bl	800b26c <__mcmp>
 800b2b6:	1e05      	subs	r5, r0, #0
 800b2b8:	d110      	bne.n	800b2dc <__mdiff+0x38>
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7ff fd53 	bl	800ad68 <_Balloc>
 800b2c2:	b930      	cbnz	r0, 800b2d2 <__mdiff+0x2e>
 800b2c4:	4b3a      	ldr	r3, [pc, #232]	; (800b3b0 <__mdiff+0x10c>)
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	f240 2132 	movw	r1, #562	; 0x232
 800b2cc:	4839      	ldr	r0, [pc, #228]	; (800b3b4 <__mdiff+0x110>)
 800b2ce:	f000 fc45 	bl	800bb5c <__assert_func>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2dc:	bfa4      	itt	ge
 800b2de:	4643      	movge	r3, r8
 800b2e0:	46a0      	movge	r8, r4
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2e8:	bfa6      	itte	ge
 800b2ea:	461c      	movge	r4, r3
 800b2ec:	2500      	movge	r5, #0
 800b2ee:	2501      	movlt	r5, #1
 800b2f0:	f7ff fd3a 	bl	800ad68 <_Balloc>
 800b2f4:	b920      	cbnz	r0, 800b300 <__mdiff+0x5c>
 800b2f6:	4b2e      	ldr	r3, [pc, #184]	; (800b3b0 <__mdiff+0x10c>)
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2fe:	e7e5      	b.n	800b2cc <__mdiff+0x28>
 800b300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b304:	6926      	ldr	r6, [r4, #16]
 800b306:	60c5      	str	r5, [r0, #12]
 800b308:	f104 0914 	add.w	r9, r4, #20
 800b30c:	f108 0514 	add.w	r5, r8, #20
 800b310:	f100 0e14 	add.w	lr, r0, #20
 800b314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b31c:	f108 0210 	add.w	r2, r8, #16
 800b320:	46f2      	mov	sl, lr
 800b322:	2100      	movs	r1, #0
 800b324:	f859 3b04 	ldr.w	r3, [r9], #4
 800b328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b32c:	fa1f f883 	uxth.w	r8, r3
 800b330:	fa11 f18b 	uxtah	r1, r1, fp
 800b334:	0c1b      	lsrs	r3, r3, #16
 800b336:	eba1 0808 	sub.w	r8, r1, r8
 800b33a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b33e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b342:	fa1f f888 	uxth.w	r8, r8
 800b346:	1419      	asrs	r1, r3, #16
 800b348:	454e      	cmp	r6, r9
 800b34a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b34e:	f84a 3b04 	str.w	r3, [sl], #4
 800b352:	d8e7      	bhi.n	800b324 <__mdiff+0x80>
 800b354:	1b33      	subs	r3, r6, r4
 800b356:	3b15      	subs	r3, #21
 800b358:	f023 0303 	bic.w	r3, r3, #3
 800b35c:	3304      	adds	r3, #4
 800b35e:	3415      	adds	r4, #21
 800b360:	42a6      	cmp	r6, r4
 800b362:	bf38      	it	cc
 800b364:	2304      	movcc	r3, #4
 800b366:	441d      	add	r5, r3
 800b368:	4473      	add	r3, lr
 800b36a:	469e      	mov	lr, r3
 800b36c:	462e      	mov	r6, r5
 800b36e:	4566      	cmp	r6, ip
 800b370:	d30e      	bcc.n	800b390 <__mdiff+0xec>
 800b372:	f10c 0203 	add.w	r2, ip, #3
 800b376:	1b52      	subs	r2, r2, r5
 800b378:	f022 0203 	bic.w	r2, r2, #3
 800b37c:	3d03      	subs	r5, #3
 800b37e:	45ac      	cmp	ip, r5
 800b380:	bf38      	it	cc
 800b382:	2200      	movcc	r2, #0
 800b384:	441a      	add	r2, r3
 800b386:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b38a:	b17b      	cbz	r3, 800b3ac <__mdiff+0x108>
 800b38c:	6107      	str	r7, [r0, #16]
 800b38e:	e7a3      	b.n	800b2d8 <__mdiff+0x34>
 800b390:	f856 8b04 	ldr.w	r8, [r6], #4
 800b394:	fa11 f288 	uxtah	r2, r1, r8
 800b398:	1414      	asrs	r4, r2, #16
 800b39a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b39e:	b292      	uxth	r2, r2
 800b3a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3a4:	f84e 2b04 	str.w	r2, [lr], #4
 800b3a8:	1421      	asrs	r1, r4, #16
 800b3aa:	e7e0      	b.n	800b36e <__mdiff+0xca>
 800b3ac:	3f01      	subs	r7, #1
 800b3ae:	e7ea      	b.n	800b386 <__mdiff+0xe2>
 800b3b0:	0800c18f 	.word	0x0800c18f
 800b3b4:	0800c200 	.word	0x0800c200

0800b3b8 <__d2b>:
 800b3b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3bc:	4689      	mov	r9, r1
 800b3be:	2101      	movs	r1, #1
 800b3c0:	ec57 6b10 	vmov	r6, r7, d0
 800b3c4:	4690      	mov	r8, r2
 800b3c6:	f7ff fccf 	bl	800ad68 <_Balloc>
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	b930      	cbnz	r0, 800b3dc <__d2b+0x24>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	4b25      	ldr	r3, [pc, #148]	; (800b468 <__d2b+0xb0>)
 800b3d2:	4826      	ldr	r0, [pc, #152]	; (800b46c <__d2b+0xb4>)
 800b3d4:	f240 310a 	movw	r1, #778	; 0x30a
 800b3d8:	f000 fbc0 	bl	800bb5c <__assert_func>
 800b3dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b3e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3e4:	bb35      	cbnz	r5, 800b434 <__d2b+0x7c>
 800b3e6:	2e00      	cmp	r6, #0
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	d028      	beq.n	800b43e <__d2b+0x86>
 800b3ec:	4668      	mov	r0, sp
 800b3ee:	9600      	str	r6, [sp, #0]
 800b3f0:	f7ff fd82 	bl	800aef8 <__lo0bits>
 800b3f4:	9900      	ldr	r1, [sp, #0]
 800b3f6:	b300      	cbz	r0, 800b43a <__d2b+0x82>
 800b3f8:	9a01      	ldr	r2, [sp, #4]
 800b3fa:	f1c0 0320 	rsb	r3, r0, #32
 800b3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b402:	430b      	orrs	r3, r1
 800b404:	40c2      	lsrs	r2, r0
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	9201      	str	r2, [sp, #4]
 800b40a:	9b01      	ldr	r3, [sp, #4]
 800b40c:	61a3      	str	r3, [r4, #24]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bf14      	ite	ne
 800b412:	2202      	movne	r2, #2
 800b414:	2201      	moveq	r2, #1
 800b416:	6122      	str	r2, [r4, #16]
 800b418:	b1d5      	cbz	r5, 800b450 <__d2b+0x98>
 800b41a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b41e:	4405      	add	r5, r0
 800b420:	f8c9 5000 	str.w	r5, [r9]
 800b424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b428:	f8c8 0000 	str.w	r0, [r8]
 800b42c:	4620      	mov	r0, r4
 800b42e:	b003      	add	sp, #12
 800b430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b438:	e7d5      	b.n	800b3e6 <__d2b+0x2e>
 800b43a:	6161      	str	r1, [r4, #20]
 800b43c:	e7e5      	b.n	800b40a <__d2b+0x52>
 800b43e:	a801      	add	r0, sp, #4
 800b440:	f7ff fd5a 	bl	800aef8 <__lo0bits>
 800b444:	9b01      	ldr	r3, [sp, #4]
 800b446:	6163      	str	r3, [r4, #20]
 800b448:	2201      	movs	r2, #1
 800b44a:	6122      	str	r2, [r4, #16]
 800b44c:	3020      	adds	r0, #32
 800b44e:	e7e3      	b.n	800b418 <__d2b+0x60>
 800b450:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b458:	f8c9 0000 	str.w	r0, [r9]
 800b45c:	6918      	ldr	r0, [r3, #16]
 800b45e:	f7ff fd2b 	bl	800aeb8 <__hi0bits>
 800b462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b466:	e7df      	b.n	800b428 <__d2b+0x70>
 800b468:	0800c18f 	.word	0x0800c18f
 800b46c:	0800c200 	.word	0x0800c200

0800b470 <_calloc_r>:
 800b470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b472:	fba1 2402 	umull	r2, r4, r1, r2
 800b476:	b94c      	cbnz	r4, 800b48c <_calloc_r+0x1c>
 800b478:	4611      	mov	r1, r2
 800b47a:	9201      	str	r2, [sp, #4]
 800b47c:	f000 f87a 	bl	800b574 <_malloc_r>
 800b480:	9a01      	ldr	r2, [sp, #4]
 800b482:	4605      	mov	r5, r0
 800b484:	b930      	cbnz	r0, 800b494 <_calloc_r+0x24>
 800b486:	4628      	mov	r0, r5
 800b488:	b003      	add	sp, #12
 800b48a:	bd30      	pop	{r4, r5, pc}
 800b48c:	220c      	movs	r2, #12
 800b48e:	6002      	str	r2, [r0, #0]
 800b490:	2500      	movs	r5, #0
 800b492:	e7f8      	b.n	800b486 <_calloc_r+0x16>
 800b494:	4621      	mov	r1, r4
 800b496:	f7fe f901 	bl	800969c <memset>
 800b49a:	e7f4      	b.n	800b486 <_calloc_r+0x16>

0800b49c <_free_r>:
 800b49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d044      	beq.n	800b52c <_free_r+0x90>
 800b4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a6:	9001      	str	r0, [sp, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b4ae:	bfb8      	it	lt
 800b4b0:	18e4      	addlt	r4, r4, r3
 800b4b2:	f000 fcdf 	bl	800be74 <__malloc_lock>
 800b4b6:	4a1e      	ldr	r2, [pc, #120]	; (800b530 <_free_r+0x94>)
 800b4b8:	9801      	ldr	r0, [sp, #4]
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b933      	cbnz	r3, 800b4cc <_free_r+0x30>
 800b4be:	6063      	str	r3, [r4, #4]
 800b4c0:	6014      	str	r4, [r2, #0]
 800b4c2:	b003      	add	sp, #12
 800b4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c8:	f000 bcda 	b.w	800be80 <__malloc_unlock>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d908      	bls.n	800b4e2 <_free_r+0x46>
 800b4d0:	6825      	ldr	r5, [r4, #0]
 800b4d2:	1961      	adds	r1, r4, r5
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	bf01      	itttt	eq
 800b4d8:	6819      	ldreq	r1, [r3, #0]
 800b4da:	685b      	ldreq	r3, [r3, #4]
 800b4dc:	1949      	addeq	r1, r1, r5
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	e7ed      	b.n	800b4be <_free_r+0x22>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	b10b      	cbz	r3, 800b4ec <_free_r+0x50>
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	d9fa      	bls.n	800b4e2 <_free_r+0x46>
 800b4ec:	6811      	ldr	r1, [r2, #0]
 800b4ee:	1855      	adds	r5, r2, r1
 800b4f0:	42a5      	cmp	r5, r4
 800b4f2:	d10b      	bne.n	800b50c <_free_r+0x70>
 800b4f4:	6824      	ldr	r4, [r4, #0]
 800b4f6:	4421      	add	r1, r4
 800b4f8:	1854      	adds	r4, r2, r1
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	6011      	str	r1, [r2, #0]
 800b4fe:	d1e0      	bne.n	800b4c2 <_free_r+0x26>
 800b500:	681c      	ldr	r4, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	6053      	str	r3, [r2, #4]
 800b506:	4421      	add	r1, r4
 800b508:	6011      	str	r1, [r2, #0]
 800b50a:	e7da      	b.n	800b4c2 <_free_r+0x26>
 800b50c:	d902      	bls.n	800b514 <_free_r+0x78>
 800b50e:	230c      	movs	r3, #12
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	e7d6      	b.n	800b4c2 <_free_r+0x26>
 800b514:	6825      	ldr	r5, [r4, #0]
 800b516:	1961      	adds	r1, r4, r5
 800b518:	428b      	cmp	r3, r1
 800b51a:	bf04      	itt	eq
 800b51c:	6819      	ldreq	r1, [r3, #0]
 800b51e:	685b      	ldreq	r3, [r3, #4]
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	bf04      	itt	eq
 800b524:	1949      	addeq	r1, r1, r5
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	6054      	str	r4, [r2, #4]
 800b52a:	e7ca      	b.n	800b4c2 <_free_r+0x26>
 800b52c:	b003      	add	sp, #12
 800b52e:	bd30      	pop	{r4, r5, pc}
 800b530:	2400045c 	.word	0x2400045c

0800b534 <sbrk_aligned>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	4e0e      	ldr	r6, [pc, #56]	; (800b570 <sbrk_aligned+0x3c>)
 800b538:	460c      	mov	r4, r1
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	4605      	mov	r5, r0
 800b53e:	b911      	cbnz	r1, 800b546 <sbrk_aligned+0x12>
 800b540:	f000 f9e6 	bl	800b910 <_sbrk_r>
 800b544:	6030      	str	r0, [r6, #0]
 800b546:	4621      	mov	r1, r4
 800b548:	4628      	mov	r0, r5
 800b54a:	f000 f9e1 	bl	800b910 <_sbrk_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d00a      	beq.n	800b568 <sbrk_aligned+0x34>
 800b552:	1cc4      	adds	r4, r0, #3
 800b554:	f024 0403 	bic.w	r4, r4, #3
 800b558:	42a0      	cmp	r0, r4
 800b55a:	d007      	beq.n	800b56c <sbrk_aligned+0x38>
 800b55c:	1a21      	subs	r1, r4, r0
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 f9d6 	bl	800b910 <_sbrk_r>
 800b564:	3001      	adds	r0, #1
 800b566:	d101      	bne.n	800b56c <sbrk_aligned+0x38>
 800b568:	f04f 34ff 	mov.w	r4, #4294967295
 800b56c:	4620      	mov	r0, r4
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	24000460 	.word	0x24000460

0800b574 <_malloc_r>:
 800b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b578:	1ccd      	adds	r5, r1, #3
 800b57a:	f025 0503 	bic.w	r5, r5, #3
 800b57e:	3508      	adds	r5, #8
 800b580:	2d0c      	cmp	r5, #12
 800b582:	bf38      	it	cc
 800b584:	250c      	movcc	r5, #12
 800b586:	2d00      	cmp	r5, #0
 800b588:	4607      	mov	r7, r0
 800b58a:	db01      	blt.n	800b590 <_malloc_r+0x1c>
 800b58c:	42a9      	cmp	r1, r5
 800b58e:	d905      	bls.n	800b59c <_malloc_r+0x28>
 800b590:	230c      	movs	r3, #12
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	2600      	movs	r6, #0
 800b596:	4630      	mov	r0, r6
 800b598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59c:	4e2e      	ldr	r6, [pc, #184]	; (800b658 <_malloc_r+0xe4>)
 800b59e:	f000 fc69 	bl	800be74 <__malloc_lock>
 800b5a2:	6833      	ldr	r3, [r6, #0]
 800b5a4:	461c      	mov	r4, r3
 800b5a6:	bb34      	cbnz	r4, 800b5f6 <_malloc_r+0x82>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	f7ff ffc2 	bl	800b534 <sbrk_aligned>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	d14d      	bne.n	800b652 <_malloc_r+0xde>
 800b5b6:	6834      	ldr	r4, [r6, #0]
 800b5b8:	4626      	mov	r6, r4
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d140      	bne.n	800b640 <_malloc_r+0xcc>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	eb04 0803 	add.w	r8, r4, r3
 800b5c8:	f000 f9a2 	bl	800b910 <_sbrk_r>
 800b5cc:	4580      	cmp	r8, r0
 800b5ce:	d13a      	bne.n	800b646 <_malloc_r+0xd2>
 800b5d0:	6821      	ldr	r1, [r4, #0]
 800b5d2:	3503      	adds	r5, #3
 800b5d4:	1a6d      	subs	r5, r5, r1
 800b5d6:	f025 0503 	bic.w	r5, r5, #3
 800b5da:	3508      	adds	r5, #8
 800b5dc:	2d0c      	cmp	r5, #12
 800b5de:	bf38      	it	cc
 800b5e0:	250c      	movcc	r5, #12
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f7ff ffa5 	bl	800b534 <sbrk_aligned>
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d02b      	beq.n	800b646 <_malloc_r+0xd2>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	442b      	add	r3, r5
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	e00e      	b.n	800b614 <_malloc_r+0xa0>
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	1b52      	subs	r2, r2, r5
 800b5fa:	d41e      	bmi.n	800b63a <_malloc_r+0xc6>
 800b5fc:	2a0b      	cmp	r2, #11
 800b5fe:	d916      	bls.n	800b62e <_malloc_r+0xba>
 800b600:	1961      	adds	r1, r4, r5
 800b602:	42a3      	cmp	r3, r4
 800b604:	6025      	str	r5, [r4, #0]
 800b606:	bf18      	it	ne
 800b608:	6059      	strne	r1, [r3, #4]
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	bf08      	it	eq
 800b60e:	6031      	streq	r1, [r6, #0]
 800b610:	5162      	str	r2, [r4, r5]
 800b612:	604b      	str	r3, [r1, #4]
 800b614:	4638      	mov	r0, r7
 800b616:	f104 060b 	add.w	r6, r4, #11
 800b61a:	f000 fc31 	bl	800be80 <__malloc_unlock>
 800b61e:	f026 0607 	bic.w	r6, r6, #7
 800b622:	1d23      	adds	r3, r4, #4
 800b624:	1af2      	subs	r2, r6, r3
 800b626:	d0b6      	beq.n	800b596 <_malloc_r+0x22>
 800b628:	1b9b      	subs	r3, r3, r6
 800b62a:	50a3      	str	r3, [r4, r2]
 800b62c:	e7b3      	b.n	800b596 <_malloc_r+0x22>
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	42a3      	cmp	r3, r4
 800b632:	bf0c      	ite	eq
 800b634:	6032      	streq	r2, [r6, #0]
 800b636:	605a      	strne	r2, [r3, #4]
 800b638:	e7ec      	b.n	800b614 <_malloc_r+0xa0>
 800b63a:	4623      	mov	r3, r4
 800b63c:	6864      	ldr	r4, [r4, #4]
 800b63e:	e7b2      	b.n	800b5a6 <_malloc_r+0x32>
 800b640:	4634      	mov	r4, r6
 800b642:	6876      	ldr	r6, [r6, #4]
 800b644:	e7b9      	b.n	800b5ba <_malloc_r+0x46>
 800b646:	230c      	movs	r3, #12
 800b648:	603b      	str	r3, [r7, #0]
 800b64a:	4638      	mov	r0, r7
 800b64c:	f000 fc18 	bl	800be80 <__malloc_unlock>
 800b650:	e7a1      	b.n	800b596 <_malloc_r+0x22>
 800b652:	6025      	str	r5, [r4, #0]
 800b654:	e7de      	b.n	800b614 <_malloc_r+0xa0>
 800b656:	bf00      	nop
 800b658:	2400045c 	.word	0x2400045c

0800b65c <__sfputc_r>:
 800b65c:	6893      	ldr	r3, [r2, #8]
 800b65e:	3b01      	subs	r3, #1
 800b660:	2b00      	cmp	r3, #0
 800b662:	b410      	push	{r4}
 800b664:	6093      	str	r3, [r2, #8]
 800b666:	da08      	bge.n	800b67a <__sfputc_r+0x1e>
 800b668:	6994      	ldr	r4, [r2, #24]
 800b66a:	42a3      	cmp	r3, r4
 800b66c:	db01      	blt.n	800b672 <__sfputc_r+0x16>
 800b66e:	290a      	cmp	r1, #10
 800b670:	d103      	bne.n	800b67a <__sfputc_r+0x1e>
 800b672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b676:	f000 b99f 	b.w	800b9b8 <__swbuf_r>
 800b67a:	6813      	ldr	r3, [r2, #0]
 800b67c:	1c58      	adds	r0, r3, #1
 800b67e:	6010      	str	r0, [r2, #0]
 800b680:	7019      	strb	r1, [r3, #0]
 800b682:	4608      	mov	r0, r1
 800b684:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <__sfputs_r>:
 800b68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68c:	4606      	mov	r6, r0
 800b68e:	460f      	mov	r7, r1
 800b690:	4614      	mov	r4, r2
 800b692:	18d5      	adds	r5, r2, r3
 800b694:	42ac      	cmp	r4, r5
 800b696:	d101      	bne.n	800b69c <__sfputs_r+0x12>
 800b698:	2000      	movs	r0, #0
 800b69a:	e007      	b.n	800b6ac <__sfputs_r+0x22>
 800b69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a0:	463a      	mov	r2, r7
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f7ff ffda 	bl	800b65c <__sfputc_r>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d1f3      	bne.n	800b694 <__sfputs_r+0xa>
 800b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6b0 <_vfiprintf_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	b09d      	sub	sp, #116	; 0x74
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	4698      	mov	r8, r3
 800b6bc:	4606      	mov	r6, r0
 800b6be:	b118      	cbz	r0, 800b6c8 <_vfiprintf_r+0x18>
 800b6c0:	6983      	ldr	r3, [r0, #24]
 800b6c2:	b90b      	cbnz	r3, 800b6c8 <_vfiprintf_r+0x18>
 800b6c4:	f7ff faa2 	bl	800ac0c <__sinit>
 800b6c8:	4b89      	ldr	r3, [pc, #548]	; (800b8f0 <_vfiprintf_r+0x240>)
 800b6ca:	429d      	cmp	r5, r3
 800b6cc:	d11b      	bne.n	800b706 <_vfiprintf_r+0x56>
 800b6ce:	6875      	ldr	r5, [r6, #4]
 800b6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	d405      	bmi.n	800b6e2 <_vfiprintf_r+0x32>
 800b6d6:	89ab      	ldrh	r3, [r5, #12]
 800b6d8:	059a      	lsls	r2, r3, #22
 800b6da:	d402      	bmi.n	800b6e2 <_vfiprintf_r+0x32>
 800b6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6de:	f7ff fb38 	bl	800ad52 <__retarget_lock_acquire_recursive>
 800b6e2:	89ab      	ldrh	r3, [r5, #12]
 800b6e4:	071b      	lsls	r3, r3, #28
 800b6e6:	d501      	bpl.n	800b6ec <_vfiprintf_r+0x3c>
 800b6e8:	692b      	ldr	r3, [r5, #16]
 800b6ea:	b9eb      	cbnz	r3, 800b728 <_vfiprintf_r+0x78>
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f000 f9c6 	bl	800ba80 <__swsetup_r>
 800b6f4:	b1c0      	cbz	r0, 800b728 <_vfiprintf_r+0x78>
 800b6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6f8:	07dc      	lsls	r4, r3, #31
 800b6fa:	d50e      	bpl.n	800b71a <_vfiprintf_r+0x6a>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	b01d      	add	sp, #116	; 0x74
 800b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b706:	4b7b      	ldr	r3, [pc, #492]	; (800b8f4 <_vfiprintf_r+0x244>)
 800b708:	429d      	cmp	r5, r3
 800b70a:	d101      	bne.n	800b710 <_vfiprintf_r+0x60>
 800b70c:	68b5      	ldr	r5, [r6, #8]
 800b70e:	e7df      	b.n	800b6d0 <_vfiprintf_r+0x20>
 800b710:	4b79      	ldr	r3, [pc, #484]	; (800b8f8 <_vfiprintf_r+0x248>)
 800b712:	429d      	cmp	r5, r3
 800b714:	bf08      	it	eq
 800b716:	68f5      	ldreq	r5, [r6, #12]
 800b718:	e7da      	b.n	800b6d0 <_vfiprintf_r+0x20>
 800b71a:	89ab      	ldrh	r3, [r5, #12]
 800b71c:	0598      	lsls	r0, r3, #22
 800b71e:	d4ed      	bmi.n	800b6fc <_vfiprintf_r+0x4c>
 800b720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b722:	f7ff fb17 	bl	800ad54 <__retarget_lock_release_recursive>
 800b726:	e7e9      	b.n	800b6fc <_vfiprintf_r+0x4c>
 800b728:	2300      	movs	r3, #0
 800b72a:	9309      	str	r3, [sp, #36]	; 0x24
 800b72c:	2320      	movs	r3, #32
 800b72e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b732:	f8cd 800c 	str.w	r8, [sp, #12]
 800b736:	2330      	movs	r3, #48	; 0x30
 800b738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8fc <_vfiprintf_r+0x24c>
 800b73c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b740:	f04f 0901 	mov.w	r9, #1
 800b744:	4623      	mov	r3, r4
 800b746:	469a      	mov	sl, r3
 800b748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b74c:	b10a      	cbz	r2, 800b752 <_vfiprintf_r+0xa2>
 800b74e:	2a25      	cmp	r2, #37	; 0x25
 800b750:	d1f9      	bne.n	800b746 <_vfiprintf_r+0x96>
 800b752:	ebba 0b04 	subs.w	fp, sl, r4
 800b756:	d00b      	beq.n	800b770 <_vfiprintf_r+0xc0>
 800b758:	465b      	mov	r3, fp
 800b75a:	4622      	mov	r2, r4
 800b75c:	4629      	mov	r1, r5
 800b75e:	4630      	mov	r0, r6
 800b760:	f7ff ff93 	bl	800b68a <__sfputs_r>
 800b764:	3001      	adds	r0, #1
 800b766:	f000 80aa 	beq.w	800b8be <_vfiprintf_r+0x20e>
 800b76a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b76c:	445a      	add	r2, fp
 800b76e:	9209      	str	r2, [sp, #36]	; 0x24
 800b770:	f89a 3000 	ldrb.w	r3, [sl]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 80a2 	beq.w	800b8be <_vfiprintf_r+0x20e>
 800b77a:	2300      	movs	r3, #0
 800b77c:	f04f 32ff 	mov.w	r2, #4294967295
 800b780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b784:	f10a 0a01 	add.w	sl, sl, #1
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	9307      	str	r3, [sp, #28]
 800b78c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b790:	931a      	str	r3, [sp, #104]	; 0x68
 800b792:	4654      	mov	r4, sl
 800b794:	2205      	movs	r2, #5
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	4858      	ldr	r0, [pc, #352]	; (800b8fc <_vfiprintf_r+0x24c>)
 800b79c:	f7f4 fda8 	bl	80002f0 <memchr>
 800b7a0:	9a04      	ldr	r2, [sp, #16]
 800b7a2:	b9d8      	cbnz	r0, 800b7dc <_vfiprintf_r+0x12c>
 800b7a4:	06d1      	lsls	r1, r2, #27
 800b7a6:	bf44      	itt	mi
 800b7a8:	2320      	movmi	r3, #32
 800b7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ae:	0713      	lsls	r3, r2, #28
 800b7b0:	bf44      	itt	mi
 800b7b2:	232b      	movmi	r3, #43	; 0x2b
 800b7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b7be:	d015      	beq.n	800b7ec <_vfiprintf_r+0x13c>
 800b7c0:	9a07      	ldr	r2, [sp, #28]
 800b7c2:	4654      	mov	r4, sl
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f04f 0c0a 	mov.w	ip, #10
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7d0:	3b30      	subs	r3, #48	; 0x30
 800b7d2:	2b09      	cmp	r3, #9
 800b7d4:	d94e      	bls.n	800b874 <_vfiprintf_r+0x1c4>
 800b7d6:	b1b0      	cbz	r0, 800b806 <_vfiprintf_r+0x156>
 800b7d8:	9207      	str	r2, [sp, #28]
 800b7da:	e014      	b.n	800b806 <_vfiprintf_r+0x156>
 800b7dc:	eba0 0308 	sub.w	r3, r0, r8
 800b7e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	9304      	str	r3, [sp, #16]
 800b7e8:	46a2      	mov	sl, r4
 800b7ea:	e7d2      	b.n	800b792 <_vfiprintf_r+0xe2>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	1d19      	adds	r1, r3, #4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	9103      	str	r1, [sp, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bfbb      	ittet	lt
 800b7f8:	425b      	neglt	r3, r3
 800b7fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b7fe:	9307      	strge	r3, [sp, #28]
 800b800:	9307      	strlt	r3, [sp, #28]
 800b802:	bfb8      	it	lt
 800b804:	9204      	strlt	r2, [sp, #16]
 800b806:	7823      	ldrb	r3, [r4, #0]
 800b808:	2b2e      	cmp	r3, #46	; 0x2e
 800b80a:	d10c      	bne.n	800b826 <_vfiprintf_r+0x176>
 800b80c:	7863      	ldrb	r3, [r4, #1]
 800b80e:	2b2a      	cmp	r3, #42	; 0x2a
 800b810:	d135      	bne.n	800b87e <_vfiprintf_r+0x1ce>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	1d1a      	adds	r2, r3, #4
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	9203      	str	r2, [sp, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bfb8      	it	lt
 800b81e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b822:	3402      	adds	r4, #2
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b90c <_vfiprintf_r+0x25c>
 800b82a:	7821      	ldrb	r1, [r4, #0]
 800b82c:	2203      	movs	r2, #3
 800b82e:	4650      	mov	r0, sl
 800b830:	f7f4 fd5e 	bl	80002f0 <memchr>
 800b834:	b140      	cbz	r0, 800b848 <_vfiprintf_r+0x198>
 800b836:	2340      	movs	r3, #64	; 0x40
 800b838:	eba0 000a 	sub.w	r0, r0, sl
 800b83c:	fa03 f000 	lsl.w	r0, r3, r0
 800b840:	9b04      	ldr	r3, [sp, #16]
 800b842:	4303      	orrs	r3, r0
 800b844:	3401      	adds	r4, #1
 800b846:	9304      	str	r3, [sp, #16]
 800b848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84c:	482c      	ldr	r0, [pc, #176]	; (800b900 <_vfiprintf_r+0x250>)
 800b84e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b852:	2206      	movs	r2, #6
 800b854:	f7f4 fd4c 	bl	80002f0 <memchr>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d03f      	beq.n	800b8dc <_vfiprintf_r+0x22c>
 800b85c:	4b29      	ldr	r3, [pc, #164]	; (800b904 <_vfiprintf_r+0x254>)
 800b85e:	bb1b      	cbnz	r3, 800b8a8 <_vfiprintf_r+0x1f8>
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	3307      	adds	r3, #7
 800b864:	f023 0307 	bic.w	r3, r3, #7
 800b868:	3308      	adds	r3, #8
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b86e:	443b      	add	r3, r7
 800b870:	9309      	str	r3, [sp, #36]	; 0x24
 800b872:	e767      	b.n	800b744 <_vfiprintf_r+0x94>
 800b874:	fb0c 3202 	mla	r2, ip, r2, r3
 800b878:	460c      	mov	r4, r1
 800b87a:	2001      	movs	r0, #1
 800b87c:	e7a5      	b.n	800b7ca <_vfiprintf_r+0x11a>
 800b87e:	2300      	movs	r3, #0
 800b880:	3401      	adds	r4, #1
 800b882:	9305      	str	r3, [sp, #20]
 800b884:	4619      	mov	r1, r3
 800b886:	f04f 0c0a 	mov.w	ip, #10
 800b88a:	4620      	mov	r0, r4
 800b88c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b890:	3a30      	subs	r2, #48	; 0x30
 800b892:	2a09      	cmp	r2, #9
 800b894:	d903      	bls.n	800b89e <_vfiprintf_r+0x1ee>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0c5      	beq.n	800b826 <_vfiprintf_r+0x176>
 800b89a:	9105      	str	r1, [sp, #20]
 800b89c:	e7c3      	b.n	800b826 <_vfiprintf_r+0x176>
 800b89e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e7f0      	b.n	800b88a <_vfiprintf_r+0x1da>
 800b8a8:	ab03      	add	r3, sp, #12
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	462a      	mov	r2, r5
 800b8ae:	4b16      	ldr	r3, [pc, #88]	; (800b908 <_vfiprintf_r+0x258>)
 800b8b0:	a904      	add	r1, sp, #16
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7fd ff8c 	bl	80097d0 <_printf_float>
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	1c78      	adds	r0, r7, #1
 800b8bc:	d1d6      	bne.n	800b86c <_vfiprintf_r+0x1bc>
 800b8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c0:	07d9      	lsls	r1, r3, #31
 800b8c2:	d405      	bmi.n	800b8d0 <_vfiprintf_r+0x220>
 800b8c4:	89ab      	ldrh	r3, [r5, #12]
 800b8c6:	059a      	lsls	r2, r3, #22
 800b8c8:	d402      	bmi.n	800b8d0 <_vfiprintf_r+0x220>
 800b8ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8cc:	f7ff fa42 	bl	800ad54 <__retarget_lock_release_recursive>
 800b8d0:	89ab      	ldrh	r3, [r5, #12]
 800b8d2:	065b      	lsls	r3, r3, #25
 800b8d4:	f53f af12 	bmi.w	800b6fc <_vfiprintf_r+0x4c>
 800b8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8da:	e711      	b.n	800b700 <_vfiprintf_r+0x50>
 800b8dc:	ab03      	add	r3, sp, #12
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	462a      	mov	r2, r5
 800b8e2:	4b09      	ldr	r3, [pc, #36]	; (800b908 <_vfiprintf_r+0x258>)
 800b8e4:	a904      	add	r1, sp, #16
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7fe f9fe 	bl	8009ce8 <_printf_i>
 800b8ec:	e7e4      	b.n	800b8b8 <_vfiprintf_r+0x208>
 800b8ee:	bf00      	nop
 800b8f0:	0800c1c0 	.word	0x0800c1c0
 800b8f4:	0800c1e0 	.word	0x0800c1e0
 800b8f8:	0800c1a0 	.word	0x0800c1a0
 800b8fc:	0800c35c 	.word	0x0800c35c
 800b900:	0800c366 	.word	0x0800c366
 800b904:	080097d1 	.word	0x080097d1
 800b908:	0800b68b 	.word	0x0800b68b
 800b90c:	0800c362 	.word	0x0800c362

0800b910 <_sbrk_r>:
 800b910:	b538      	push	{r3, r4, r5, lr}
 800b912:	4d06      	ldr	r5, [pc, #24]	; (800b92c <_sbrk_r+0x1c>)
 800b914:	2300      	movs	r3, #0
 800b916:	4604      	mov	r4, r0
 800b918:	4608      	mov	r0, r1
 800b91a:	602b      	str	r3, [r5, #0]
 800b91c:	f7f5 fe3e 	bl	800159c <_sbrk>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d102      	bne.n	800b92a <_sbrk_r+0x1a>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	b103      	cbz	r3, 800b92a <_sbrk_r+0x1a>
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	24000464 	.word	0x24000464

0800b930 <__sread>:
 800b930:	b510      	push	{r4, lr}
 800b932:	460c      	mov	r4, r1
 800b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b938:	f000 faa8 	bl	800be8c <_read_r>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	bfab      	itete	ge
 800b940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b942:	89a3      	ldrhlt	r3, [r4, #12]
 800b944:	181b      	addge	r3, r3, r0
 800b946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b94a:	bfac      	ite	ge
 800b94c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b94e:	81a3      	strhlt	r3, [r4, #12]
 800b950:	bd10      	pop	{r4, pc}

0800b952 <__swrite>:
 800b952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b956:	461f      	mov	r7, r3
 800b958:	898b      	ldrh	r3, [r1, #12]
 800b95a:	05db      	lsls	r3, r3, #23
 800b95c:	4605      	mov	r5, r0
 800b95e:	460c      	mov	r4, r1
 800b960:	4616      	mov	r6, r2
 800b962:	d505      	bpl.n	800b970 <__swrite+0x1e>
 800b964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b968:	2302      	movs	r3, #2
 800b96a:	2200      	movs	r2, #0
 800b96c:	f000 f9f8 	bl	800bd60 <_lseek_r>
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b97a:	81a3      	strh	r3, [r4, #12]
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	4628      	mov	r0, r5
 800b982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b986:	f000 b869 	b.w	800ba5c <_write_r>

0800b98a <__sseek>:
 800b98a:	b510      	push	{r4, lr}
 800b98c:	460c      	mov	r4, r1
 800b98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b992:	f000 f9e5 	bl	800bd60 <_lseek_r>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	bf15      	itete	ne
 800b99c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b99e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9a6:	81a3      	strheq	r3, [r4, #12]
 800b9a8:	bf18      	it	ne
 800b9aa:	81a3      	strhne	r3, [r4, #12]
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <__sclose>:
 800b9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b2:	f000 b8f1 	b.w	800bb98 <_close_r>
	...

0800b9b8 <__swbuf_r>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	4614      	mov	r4, r2
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b118      	cbz	r0, 800b9ca <__swbuf_r+0x12>
 800b9c2:	6983      	ldr	r3, [r0, #24]
 800b9c4:	b90b      	cbnz	r3, 800b9ca <__swbuf_r+0x12>
 800b9c6:	f7ff f921 	bl	800ac0c <__sinit>
 800b9ca:	4b21      	ldr	r3, [pc, #132]	; (800ba50 <__swbuf_r+0x98>)
 800b9cc:	429c      	cmp	r4, r3
 800b9ce:	d12b      	bne.n	800ba28 <__swbuf_r+0x70>
 800b9d0:	686c      	ldr	r4, [r5, #4]
 800b9d2:	69a3      	ldr	r3, [r4, #24]
 800b9d4:	60a3      	str	r3, [r4, #8]
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	071a      	lsls	r2, r3, #28
 800b9da:	d52f      	bpl.n	800ba3c <__swbuf_r+0x84>
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	b36b      	cbz	r3, 800ba3c <__swbuf_r+0x84>
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	6820      	ldr	r0, [r4, #0]
 800b9e4:	1ac0      	subs	r0, r0, r3
 800b9e6:	6963      	ldr	r3, [r4, #20]
 800b9e8:	b2f6      	uxtb	r6, r6
 800b9ea:	4283      	cmp	r3, r0
 800b9ec:	4637      	mov	r7, r6
 800b9ee:	dc04      	bgt.n	800b9fa <__swbuf_r+0x42>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f000 f966 	bl	800bcc4 <_fflush_r>
 800b9f8:	bb30      	cbnz	r0, 800ba48 <__swbuf_r+0x90>
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60a3      	str	r3, [r4, #8]
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	6022      	str	r2, [r4, #0]
 800ba06:	701e      	strb	r6, [r3, #0]
 800ba08:	6963      	ldr	r3, [r4, #20]
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	4283      	cmp	r3, r0
 800ba0e:	d004      	beq.n	800ba1a <__swbuf_r+0x62>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	07db      	lsls	r3, r3, #31
 800ba14:	d506      	bpl.n	800ba24 <__swbuf_r+0x6c>
 800ba16:	2e0a      	cmp	r6, #10
 800ba18:	d104      	bne.n	800ba24 <__swbuf_r+0x6c>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f951 	bl	800bcc4 <_fflush_r>
 800ba22:	b988      	cbnz	r0, 800ba48 <__swbuf_r+0x90>
 800ba24:	4638      	mov	r0, r7
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <__swbuf_r+0x9c>)
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d101      	bne.n	800ba32 <__swbuf_r+0x7a>
 800ba2e:	68ac      	ldr	r4, [r5, #8]
 800ba30:	e7cf      	b.n	800b9d2 <__swbuf_r+0x1a>
 800ba32:	4b09      	ldr	r3, [pc, #36]	; (800ba58 <__swbuf_r+0xa0>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	bf08      	it	eq
 800ba38:	68ec      	ldreq	r4, [r5, #12]
 800ba3a:	e7ca      	b.n	800b9d2 <__swbuf_r+0x1a>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 f81e 	bl	800ba80 <__swsetup_r>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d0cb      	beq.n	800b9e0 <__swbuf_r+0x28>
 800ba48:	f04f 37ff 	mov.w	r7, #4294967295
 800ba4c:	e7ea      	b.n	800ba24 <__swbuf_r+0x6c>
 800ba4e:	bf00      	nop
 800ba50:	0800c1c0 	.word	0x0800c1c0
 800ba54:	0800c1e0 	.word	0x0800c1e0
 800ba58:	0800c1a0 	.word	0x0800c1a0

0800ba5c <_write_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d07      	ldr	r5, [pc, #28]	; (800ba7c <_write_r+0x20>)
 800ba60:	4604      	mov	r4, r0
 800ba62:	4608      	mov	r0, r1
 800ba64:	4611      	mov	r1, r2
 800ba66:	2200      	movs	r2, #0
 800ba68:	602a      	str	r2, [r5, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f7f4 fea8 	bl	80007c0 <_write>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_write_r+0x1e>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_write_r+0x1e>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	24000464 	.word	0x24000464

0800ba80 <__swsetup_r>:
 800ba80:	4b32      	ldr	r3, [pc, #200]	; (800bb4c <__swsetup_r+0xcc>)
 800ba82:	b570      	push	{r4, r5, r6, lr}
 800ba84:	681d      	ldr	r5, [r3, #0]
 800ba86:	4606      	mov	r6, r0
 800ba88:	460c      	mov	r4, r1
 800ba8a:	b125      	cbz	r5, 800ba96 <__swsetup_r+0x16>
 800ba8c:	69ab      	ldr	r3, [r5, #24]
 800ba8e:	b913      	cbnz	r3, 800ba96 <__swsetup_r+0x16>
 800ba90:	4628      	mov	r0, r5
 800ba92:	f7ff f8bb 	bl	800ac0c <__sinit>
 800ba96:	4b2e      	ldr	r3, [pc, #184]	; (800bb50 <__swsetup_r+0xd0>)
 800ba98:	429c      	cmp	r4, r3
 800ba9a:	d10f      	bne.n	800babc <__swsetup_r+0x3c>
 800ba9c:	686c      	ldr	r4, [r5, #4]
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baa4:	0719      	lsls	r1, r3, #28
 800baa6:	d42c      	bmi.n	800bb02 <__swsetup_r+0x82>
 800baa8:	06dd      	lsls	r5, r3, #27
 800baaa:	d411      	bmi.n	800bad0 <__swsetup_r+0x50>
 800baac:	2309      	movs	r3, #9
 800baae:	6033      	str	r3, [r6, #0]
 800bab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	f04f 30ff 	mov.w	r0, #4294967295
 800baba:	e03e      	b.n	800bb3a <__swsetup_r+0xba>
 800babc:	4b25      	ldr	r3, [pc, #148]	; (800bb54 <__swsetup_r+0xd4>)
 800babe:	429c      	cmp	r4, r3
 800bac0:	d101      	bne.n	800bac6 <__swsetup_r+0x46>
 800bac2:	68ac      	ldr	r4, [r5, #8]
 800bac4:	e7eb      	b.n	800ba9e <__swsetup_r+0x1e>
 800bac6:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <__swsetup_r+0xd8>)
 800bac8:	429c      	cmp	r4, r3
 800baca:	bf08      	it	eq
 800bacc:	68ec      	ldreq	r4, [r5, #12]
 800bace:	e7e6      	b.n	800ba9e <__swsetup_r+0x1e>
 800bad0:	0758      	lsls	r0, r3, #29
 800bad2:	d512      	bpl.n	800bafa <__swsetup_r+0x7a>
 800bad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bad6:	b141      	cbz	r1, 800baea <__swsetup_r+0x6a>
 800bad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800badc:	4299      	cmp	r1, r3
 800bade:	d002      	beq.n	800bae6 <__swsetup_r+0x66>
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7ff fcdb 	bl	800b49c <_free_r>
 800bae6:	2300      	movs	r3, #0
 800bae8:	6363      	str	r3, [r4, #52]	; 0x34
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	2300      	movs	r3, #0
 800baf4:	6063      	str	r3, [r4, #4]
 800baf6:	6923      	ldr	r3, [r4, #16]
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	f043 0308 	orr.w	r3, r3, #8
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	6923      	ldr	r3, [r4, #16]
 800bb04:	b94b      	cbnz	r3, 800bb1a <__swsetup_r+0x9a>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb10:	d003      	beq.n	800bb1a <__swsetup_r+0x9a>
 800bb12:	4621      	mov	r1, r4
 800bb14:	4630      	mov	r0, r6
 800bb16:	f000 f95b 	bl	800bdd0 <__smakebuf_r>
 800bb1a:	89a0      	ldrh	r0, [r4, #12]
 800bb1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb20:	f010 0301 	ands.w	r3, r0, #1
 800bb24:	d00a      	beq.n	800bb3c <__swsetup_r+0xbc>
 800bb26:	2300      	movs	r3, #0
 800bb28:	60a3      	str	r3, [r4, #8]
 800bb2a:	6963      	ldr	r3, [r4, #20]
 800bb2c:	425b      	negs	r3, r3
 800bb2e:	61a3      	str	r3, [r4, #24]
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	b943      	cbnz	r3, 800bb46 <__swsetup_r+0xc6>
 800bb34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb38:	d1ba      	bne.n	800bab0 <__swsetup_r+0x30>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	0781      	lsls	r1, r0, #30
 800bb3e:	bf58      	it	pl
 800bb40:	6963      	ldrpl	r3, [r4, #20]
 800bb42:	60a3      	str	r3, [r4, #8]
 800bb44:	e7f4      	b.n	800bb30 <__swsetup_r+0xb0>
 800bb46:	2000      	movs	r0, #0
 800bb48:	e7f7      	b.n	800bb3a <__swsetup_r+0xba>
 800bb4a:	bf00      	nop
 800bb4c:	24000010 	.word	0x24000010
 800bb50:	0800c1c0 	.word	0x0800c1c0
 800bb54:	0800c1e0 	.word	0x0800c1e0
 800bb58:	0800c1a0 	.word	0x0800c1a0

0800bb5c <__assert_func>:
 800bb5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb5e:	4614      	mov	r4, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	4b09      	ldr	r3, [pc, #36]	; (800bb88 <__assert_func+0x2c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4605      	mov	r5, r0
 800bb68:	68d8      	ldr	r0, [r3, #12]
 800bb6a:	b14c      	cbz	r4, 800bb80 <__assert_func+0x24>
 800bb6c:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <__assert_func+0x30>)
 800bb6e:	9100      	str	r1, [sp, #0]
 800bb70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb74:	4906      	ldr	r1, [pc, #24]	; (800bb90 <__assert_func+0x34>)
 800bb76:	462b      	mov	r3, r5
 800bb78:	f000 f8e0 	bl	800bd3c <fiprintf>
 800bb7c:	f000 f9a5 	bl	800beca <abort>
 800bb80:	4b04      	ldr	r3, [pc, #16]	; (800bb94 <__assert_func+0x38>)
 800bb82:	461c      	mov	r4, r3
 800bb84:	e7f3      	b.n	800bb6e <__assert_func+0x12>
 800bb86:	bf00      	nop
 800bb88:	24000010 	.word	0x24000010
 800bb8c:	0800c36d 	.word	0x0800c36d
 800bb90:	0800c37a 	.word	0x0800c37a
 800bb94:	0800c3a8 	.word	0x0800c3a8

0800bb98 <_close_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4d06      	ldr	r5, [pc, #24]	; (800bbb4 <_close_r+0x1c>)
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	602b      	str	r3, [r5, #0]
 800bba4:	f7f5 fcc5 	bl	8001532 <_close>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_close_r+0x1a>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_close_r+0x1a>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	24000464 	.word	0x24000464

0800bbb8 <__sflush_r>:
 800bbb8:	898a      	ldrh	r2, [r1, #12]
 800bbba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	0710      	lsls	r0, r2, #28
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	d458      	bmi.n	800bc78 <__sflush_r+0xc0>
 800bbc6:	684b      	ldr	r3, [r1, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dc05      	bgt.n	800bbd8 <__sflush_r+0x20>
 800bbcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dc02      	bgt.n	800bbd8 <__sflush_r+0x20>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	d0f9      	beq.n	800bbd2 <__sflush_r+0x1a>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbe4:	682f      	ldr	r7, [r5, #0]
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	d032      	beq.n	800bc50 <__sflush_r+0x98>
 800bbea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	075a      	lsls	r2, r3, #29
 800bbf0:	d505      	bpl.n	800bbfe <__sflush_r+0x46>
 800bbf2:	6863      	ldr	r3, [r4, #4]
 800bbf4:	1ac0      	subs	r0, r0, r3
 800bbf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbf8:	b10b      	cbz	r3, 800bbfe <__sflush_r+0x46>
 800bbfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbfc:	1ac0      	subs	r0, r0, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4602      	mov	r2, r0
 800bc02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc04:	6a21      	ldr	r1, [r4, #32]
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b0      	blx	r6
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	d106      	bne.n	800bc1e <__sflush_r+0x66>
 800bc10:	6829      	ldr	r1, [r5, #0]
 800bc12:	291d      	cmp	r1, #29
 800bc14:	d82c      	bhi.n	800bc70 <__sflush_r+0xb8>
 800bc16:	4a2a      	ldr	r2, [pc, #168]	; (800bcc0 <__sflush_r+0x108>)
 800bc18:	40ca      	lsrs	r2, r1
 800bc1a:	07d6      	lsls	r6, r2, #31
 800bc1c:	d528      	bpl.n	800bc70 <__sflush_r+0xb8>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	6062      	str	r2, [r4, #4]
 800bc22:	04d9      	lsls	r1, r3, #19
 800bc24:	6922      	ldr	r2, [r4, #16]
 800bc26:	6022      	str	r2, [r4, #0]
 800bc28:	d504      	bpl.n	800bc34 <__sflush_r+0x7c>
 800bc2a:	1c42      	adds	r2, r0, #1
 800bc2c:	d101      	bne.n	800bc32 <__sflush_r+0x7a>
 800bc2e:	682b      	ldr	r3, [r5, #0]
 800bc30:	b903      	cbnz	r3, 800bc34 <__sflush_r+0x7c>
 800bc32:	6560      	str	r0, [r4, #84]	; 0x54
 800bc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc36:	602f      	str	r7, [r5, #0]
 800bc38:	2900      	cmp	r1, #0
 800bc3a:	d0ca      	beq.n	800bbd2 <__sflush_r+0x1a>
 800bc3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc40:	4299      	cmp	r1, r3
 800bc42:	d002      	beq.n	800bc4a <__sflush_r+0x92>
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7ff fc29 	bl	800b49c <_free_r>
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc4e:	e7c1      	b.n	800bbd4 <__sflush_r+0x1c>
 800bc50:	6a21      	ldr	r1, [r4, #32]
 800bc52:	2301      	movs	r3, #1
 800bc54:	4628      	mov	r0, r5
 800bc56:	47b0      	blx	r6
 800bc58:	1c41      	adds	r1, r0, #1
 800bc5a:	d1c7      	bne.n	800bbec <__sflush_r+0x34>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0c4      	beq.n	800bbec <__sflush_r+0x34>
 800bc62:	2b1d      	cmp	r3, #29
 800bc64:	d001      	beq.n	800bc6a <__sflush_r+0xb2>
 800bc66:	2b16      	cmp	r3, #22
 800bc68:	d101      	bne.n	800bc6e <__sflush_r+0xb6>
 800bc6a:	602f      	str	r7, [r5, #0]
 800bc6c:	e7b1      	b.n	800bbd2 <__sflush_r+0x1a>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	e7ad      	b.n	800bbd4 <__sflush_r+0x1c>
 800bc78:	690f      	ldr	r7, [r1, #16]
 800bc7a:	2f00      	cmp	r7, #0
 800bc7c:	d0a9      	beq.n	800bbd2 <__sflush_r+0x1a>
 800bc7e:	0793      	lsls	r3, r2, #30
 800bc80:	680e      	ldr	r6, [r1, #0]
 800bc82:	bf08      	it	eq
 800bc84:	694b      	ldreq	r3, [r1, #20]
 800bc86:	600f      	str	r7, [r1, #0]
 800bc88:	bf18      	it	ne
 800bc8a:	2300      	movne	r3, #0
 800bc8c:	eba6 0807 	sub.w	r8, r6, r7
 800bc90:	608b      	str	r3, [r1, #8]
 800bc92:	f1b8 0f00 	cmp.w	r8, #0
 800bc96:	dd9c      	ble.n	800bbd2 <__sflush_r+0x1a>
 800bc98:	6a21      	ldr	r1, [r4, #32]
 800bc9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc9c:	4643      	mov	r3, r8
 800bc9e:	463a      	mov	r2, r7
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b0      	blx	r6
 800bca4:	2800      	cmp	r0, #0
 800bca6:	dc06      	bgt.n	800bcb6 <__sflush_r+0xfe>
 800bca8:	89a3      	ldrh	r3, [r4, #12]
 800bcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcae:	81a3      	strh	r3, [r4, #12]
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	e78e      	b.n	800bbd4 <__sflush_r+0x1c>
 800bcb6:	4407      	add	r7, r0
 800bcb8:	eba8 0800 	sub.w	r8, r8, r0
 800bcbc:	e7e9      	b.n	800bc92 <__sflush_r+0xda>
 800bcbe:	bf00      	nop
 800bcc0:	20400001 	.word	0x20400001

0800bcc4 <_fflush_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	4605      	mov	r5, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	b913      	cbnz	r3, 800bcd4 <_fflush_r+0x10>
 800bcce:	2500      	movs	r5, #0
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	b118      	cbz	r0, 800bcde <_fflush_r+0x1a>
 800bcd6:	6983      	ldr	r3, [r0, #24]
 800bcd8:	b90b      	cbnz	r3, 800bcde <_fflush_r+0x1a>
 800bcda:	f7fe ff97 	bl	800ac0c <__sinit>
 800bcde:	4b14      	ldr	r3, [pc, #80]	; (800bd30 <_fflush_r+0x6c>)
 800bce0:	429c      	cmp	r4, r3
 800bce2:	d11b      	bne.n	800bd1c <_fflush_r+0x58>
 800bce4:	686c      	ldr	r4, [r5, #4]
 800bce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ef      	beq.n	800bcce <_fflush_r+0xa>
 800bcee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcf0:	07d0      	lsls	r0, r2, #31
 800bcf2:	d404      	bmi.n	800bcfe <_fflush_r+0x3a>
 800bcf4:	0599      	lsls	r1, r3, #22
 800bcf6:	d402      	bmi.n	800bcfe <_fflush_r+0x3a>
 800bcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfa:	f7ff f82a 	bl	800ad52 <__retarget_lock_acquire_recursive>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	4621      	mov	r1, r4
 800bd02:	f7ff ff59 	bl	800bbb8 <__sflush_r>
 800bd06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd08:	07da      	lsls	r2, r3, #31
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	d4e0      	bmi.n	800bcd0 <_fflush_r+0xc>
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	059b      	lsls	r3, r3, #22
 800bd12:	d4dd      	bmi.n	800bcd0 <_fflush_r+0xc>
 800bd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd16:	f7ff f81d 	bl	800ad54 <__retarget_lock_release_recursive>
 800bd1a:	e7d9      	b.n	800bcd0 <_fflush_r+0xc>
 800bd1c:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <_fflush_r+0x70>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d101      	bne.n	800bd26 <_fflush_r+0x62>
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	e7df      	b.n	800bce6 <_fflush_r+0x22>
 800bd26:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <_fflush_r+0x74>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	68ec      	ldreq	r4, [r5, #12]
 800bd2e:	e7da      	b.n	800bce6 <_fflush_r+0x22>
 800bd30:	0800c1c0 	.word	0x0800c1c0
 800bd34:	0800c1e0 	.word	0x0800c1e0
 800bd38:	0800c1a0 	.word	0x0800c1a0

0800bd3c <fiprintf>:
 800bd3c:	b40e      	push	{r1, r2, r3}
 800bd3e:	b503      	push	{r0, r1, lr}
 800bd40:	4601      	mov	r1, r0
 800bd42:	ab03      	add	r3, sp, #12
 800bd44:	4805      	ldr	r0, [pc, #20]	; (800bd5c <fiprintf+0x20>)
 800bd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4a:	6800      	ldr	r0, [r0, #0]
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	f7ff fcaf 	bl	800b6b0 <_vfiprintf_r>
 800bd52:	b002      	add	sp, #8
 800bd54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd58:	b003      	add	sp, #12
 800bd5a:	4770      	bx	lr
 800bd5c:	24000010 	.word	0x24000010

0800bd60 <_lseek_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d07      	ldr	r5, [pc, #28]	; (800bd80 <_lseek_r+0x20>)
 800bd64:	4604      	mov	r4, r0
 800bd66:	4608      	mov	r0, r1
 800bd68:	4611      	mov	r1, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	602a      	str	r2, [r5, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f7f5 fc06 	bl	8001580 <_lseek>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_lseek_r+0x1e>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_lseek_r+0x1e>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	24000464 	.word	0x24000464

0800bd84 <__swhatbuf_r>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	460e      	mov	r6, r1
 800bd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	b096      	sub	sp, #88	; 0x58
 800bd90:	4614      	mov	r4, r2
 800bd92:	461d      	mov	r5, r3
 800bd94:	da08      	bge.n	800bda8 <__swhatbuf_r+0x24>
 800bd96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	602a      	str	r2, [r5, #0]
 800bd9e:	061a      	lsls	r2, r3, #24
 800bda0:	d410      	bmi.n	800bdc4 <__swhatbuf_r+0x40>
 800bda2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bda6:	e00e      	b.n	800bdc6 <__swhatbuf_r+0x42>
 800bda8:	466a      	mov	r2, sp
 800bdaa:	f000 f895 	bl	800bed8 <_fstat_r>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	dbf1      	blt.n	800bd96 <__swhatbuf_r+0x12>
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdbc:	425a      	negs	r2, r3
 800bdbe:	415a      	adcs	r2, r3
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	e7ee      	b.n	800bda2 <__swhatbuf_r+0x1e>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	b016      	add	sp, #88	; 0x58
 800bdcc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdd0 <__smakebuf_r>:
 800bdd0:	898b      	ldrh	r3, [r1, #12]
 800bdd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdd4:	079d      	lsls	r5, r3, #30
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460c      	mov	r4, r1
 800bdda:	d507      	bpl.n	800bdec <__smakebuf_r+0x1c>
 800bddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	6123      	str	r3, [r4, #16]
 800bde4:	2301      	movs	r3, #1
 800bde6:	6163      	str	r3, [r4, #20]
 800bde8:	b002      	add	sp, #8
 800bdea:	bd70      	pop	{r4, r5, r6, pc}
 800bdec:	ab01      	add	r3, sp, #4
 800bdee:	466a      	mov	r2, sp
 800bdf0:	f7ff ffc8 	bl	800bd84 <__swhatbuf_r>
 800bdf4:	9900      	ldr	r1, [sp, #0]
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff fbbb 	bl	800b574 <_malloc_r>
 800bdfe:	b948      	cbnz	r0, 800be14 <__smakebuf_r+0x44>
 800be00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be04:	059a      	lsls	r2, r3, #22
 800be06:	d4ef      	bmi.n	800bde8 <__smakebuf_r+0x18>
 800be08:	f023 0303 	bic.w	r3, r3, #3
 800be0c:	f043 0302 	orr.w	r3, r3, #2
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	e7e3      	b.n	800bddc <__smakebuf_r+0xc>
 800be14:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <__smakebuf_r+0x7c>)
 800be16:	62b3      	str	r3, [r6, #40]	; 0x28
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	6020      	str	r0, [r4, #0]
 800be1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	9b00      	ldr	r3, [sp, #0]
 800be24:	6163      	str	r3, [r4, #20]
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	6120      	str	r0, [r4, #16]
 800be2a:	b15b      	cbz	r3, 800be44 <__smakebuf_r+0x74>
 800be2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be30:	4630      	mov	r0, r6
 800be32:	f000 f863 	bl	800befc <_isatty_r>
 800be36:	b128      	cbz	r0, 800be44 <__smakebuf_r+0x74>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	f043 0301 	orr.w	r3, r3, #1
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	89a0      	ldrh	r0, [r4, #12]
 800be46:	4305      	orrs	r5, r0
 800be48:	81a5      	strh	r5, [r4, #12]
 800be4a:	e7cd      	b.n	800bde8 <__smakebuf_r+0x18>
 800be4c:	0800aba5 	.word	0x0800aba5

0800be50 <__ascii_mbtowc>:
 800be50:	b082      	sub	sp, #8
 800be52:	b901      	cbnz	r1, 800be56 <__ascii_mbtowc+0x6>
 800be54:	a901      	add	r1, sp, #4
 800be56:	b142      	cbz	r2, 800be6a <__ascii_mbtowc+0x1a>
 800be58:	b14b      	cbz	r3, 800be6e <__ascii_mbtowc+0x1e>
 800be5a:	7813      	ldrb	r3, [r2, #0]
 800be5c:	600b      	str	r3, [r1, #0]
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	1e10      	subs	r0, r2, #0
 800be62:	bf18      	it	ne
 800be64:	2001      	movne	r0, #1
 800be66:	b002      	add	sp, #8
 800be68:	4770      	bx	lr
 800be6a:	4610      	mov	r0, r2
 800be6c:	e7fb      	b.n	800be66 <__ascii_mbtowc+0x16>
 800be6e:	f06f 0001 	mvn.w	r0, #1
 800be72:	e7f8      	b.n	800be66 <__ascii_mbtowc+0x16>

0800be74 <__malloc_lock>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__malloc_lock+0x8>)
 800be76:	f7fe bf6c 	b.w	800ad52 <__retarget_lock_acquire_recursive>
 800be7a:	bf00      	nop
 800be7c:	24000458 	.word	0x24000458

0800be80 <__malloc_unlock>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__malloc_unlock+0x8>)
 800be82:	f7fe bf67 	b.w	800ad54 <__retarget_lock_release_recursive>
 800be86:	bf00      	nop
 800be88:	24000458 	.word	0x24000458

0800be8c <_read_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d07      	ldr	r5, [pc, #28]	; (800beac <_read_r+0x20>)
 800be90:	4604      	mov	r4, r0
 800be92:	4608      	mov	r0, r1
 800be94:	4611      	mov	r1, r2
 800be96:	2200      	movs	r2, #0
 800be98:	602a      	str	r2, [r5, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	f7f5 fb2c 	bl	80014f8 <_read>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_read_r+0x1e>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_read_r+0x1e>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	24000464 	.word	0x24000464

0800beb0 <__ascii_wctomb>:
 800beb0:	b149      	cbz	r1, 800bec6 <__ascii_wctomb+0x16>
 800beb2:	2aff      	cmp	r2, #255	; 0xff
 800beb4:	bf85      	ittet	hi
 800beb6:	238a      	movhi	r3, #138	; 0x8a
 800beb8:	6003      	strhi	r3, [r0, #0]
 800beba:	700a      	strbls	r2, [r1, #0]
 800bebc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bec0:	bf98      	it	ls
 800bec2:	2001      	movls	r0, #1
 800bec4:	4770      	bx	lr
 800bec6:	4608      	mov	r0, r1
 800bec8:	4770      	bx	lr

0800beca <abort>:
 800beca:	b508      	push	{r3, lr}
 800becc:	2006      	movs	r0, #6
 800bece:	f000 f84d 	bl	800bf6c <raise>
 800bed2:	2001      	movs	r0, #1
 800bed4:	f7f5 fb06 	bl	80014e4 <_exit>

0800bed8 <_fstat_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d07      	ldr	r5, [pc, #28]	; (800bef8 <_fstat_r+0x20>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	4611      	mov	r1, r2
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	f7f5 fb30 	bl	800154a <_fstat>
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	d102      	bne.n	800bef4 <_fstat_r+0x1c>
 800beee:	682b      	ldr	r3, [r5, #0]
 800bef0:	b103      	cbz	r3, 800bef4 <_fstat_r+0x1c>
 800bef2:	6023      	str	r3, [r4, #0]
 800bef4:	bd38      	pop	{r3, r4, r5, pc}
 800bef6:	bf00      	nop
 800bef8:	24000464 	.word	0x24000464

0800befc <_isatty_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4d06      	ldr	r5, [pc, #24]	; (800bf18 <_isatty_r+0x1c>)
 800bf00:	2300      	movs	r3, #0
 800bf02:	4604      	mov	r4, r0
 800bf04:	4608      	mov	r0, r1
 800bf06:	602b      	str	r3, [r5, #0]
 800bf08:	f7f5 fb2f 	bl	800156a <_isatty>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_isatty_r+0x1a>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_isatty_r+0x1a>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	24000464 	.word	0x24000464

0800bf1c <_raise_r>:
 800bf1c:	291f      	cmp	r1, #31
 800bf1e:	b538      	push	{r3, r4, r5, lr}
 800bf20:	4604      	mov	r4, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	d904      	bls.n	800bf30 <_raise_r+0x14>
 800bf26:	2316      	movs	r3, #22
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf32:	b112      	cbz	r2, 800bf3a <_raise_r+0x1e>
 800bf34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf38:	b94b      	cbnz	r3, 800bf4e <_raise_r+0x32>
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 f830 	bl	800bfa0 <_getpid_r>
 800bf40:	462a      	mov	r2, r5
 800bf42:	4601      	mov	r1, r0
 800bf44:	4620      	mov	r0, r4
 800bf46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf4a:	f000 b817 	b.w	800bf7c <_kill_r>
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d00a      	beq.n	800bf68 <_raise_r+0x4c>
 800bf52:	1c59      	adds	r1, r3, #1
 800bf54:	d103      	bne.n	800bf5e <_raise_r+0x42>
 800bf56:	2316      	movs	r3, #22
 800bf58:	6003      	str	r3, [r0, #0]
 800bf5a:	2001      	movs	r0, #1
 800bf5c:	e7e7      	b.n	800bf2e <_raise_r+0x12>
 800bf5e:	2400      	movs	r4, #0
 800bf60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf64:	4628      	mov	r0, r5
 800bf66:	4798      	blx	r3
 800bf68:	2000      	movs	r0, #0
 800bf6a:	e7e0      	b.n	800bf2e <_raise_r+0x12>

0800bf6c <raise>:
 800bf6c:	4b02      	ldr	r3, [pc, #8]	; (800bf78 <raise+0xc>)
 800bf6e:	4601      	mov	r1, r0
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	f7ff bfd3 	b.w	800bf1c <_raise_r>
 800bf76:	bf00      	nop
 800bf78:	24000010 	.word	0x24000010

0800bf7c <_kill_r>:
 800bf7c:	b538      	push	{r3, r4, r5, lr}
 800bf7e:	4d07      	ldr	r5, [pc, #28]	; (800bf9c <_kill_r+0x20>)
 800bf80:	2300      	movs	r3, #0
 800bf82:	4604      	mov	r4, r0
 800bf84:	4608      	mov	r0, r1
 800bf86:	4611      	mov	r1, r2
 800bf88:	602b      	str	r3, [r5, #0]
 800bf8a:	f7f5 fa9b 	bl	80014c4 <_kill>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	d102      	bne.n	800bf98 <_kill_r+0x1c>
 800bf92:	682b      	ldr	r3, [r5, #0]
 800bf94:	b103      	cbz	r3, 800bf98 <_kill_r+0x1c>
 800bf96:	6023      	str	r3, [r4, #0]
 800bf98:	bd38      	pop	{r3, r4, r5, pc}
 800bf9a:	bf00      	nop
 800bf9c:	24000464 	.word	0x24000464

0800bfa0 <_getpid_r>:
 800bfa0:	f7f5 ba88 	b.w	80014b4 <_getpid>

0800bfa4 <_init>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr

0800bfb0 <_fini>:
 800bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb2:	bf00      	nop
 800bfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb6:	bc08      	pop	{r3}
 800bfb8:	469e      	mov	lr, r3
 800bfba:	4770      	bx	lr
